/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables;


import io.zerows.extension.commerce.documentation.domain.Keys;
import io.zerows.extension.commerce.documentation.domain.Zdb;
import io.zerows.extension.commerce.documentation.domain.tables.records.DDocSegmentRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DDocSegment extends TableImpl<DDocSegmentRecord> {

    /**
     * The reference instance of <code>ZDB.D_DOC_SEGMENT</code>
     */
    public static final DDocSegment D_DOC_SEGMENT = new DDocSegment();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.KEY</code>. 「key」- 文档主键，唯一标识
     */
    public final TableField<DDocSegmentRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 文档主键，唯一标识");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.CODE</code>. 「code」- 章节编号
     */
    public final TableField<DDocSegmentRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 章节编号");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.PREFIX</code>. 「prefix」- 章节前缀
     */
    public final TableField<DDocSegmentRecord, String> PREFIX = createField(DSL.name("PREFIX"), SQLDataType.VARCHAR(255), this, "「prefix」- 章节前缀");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.NAME</code>. 「name」- 章节标题
     */
    public final TableField<DDocSegmentRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 章节标题");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.TITLE</code>. 「title」- 章节标题（理论上 prefix
     * + name）
     */
    public final TableField<DDocSegmentRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(255), this, "「title」- 章节标题（理论上 prefix + name）");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.TYPE</code>. 「type」- 章节类型
     */
    public final TableField<DDocSegmentRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(128), this, "「type」- 章节类型");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.STATUS</code>. 「status」- 状态
     */
    public final TableField<DDocSegmentRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(12), this, "「status」- 状态");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.CONTENT</code>. 「content」- 章节内容（带格式）
     */
    public final TableField<DDocSegmentRecord, String> CONTENT = createField(DSL.name("CONTENT"), SQLDataType.CLOB, this, "「content」- 章节内容（带格式）");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.CONTENT_TEXT</code>. 「contentText」-
     * 无格式章节内容
     */
    public final TableField<DDocSegmentRecord, String> CONTENT_TEXT = createField(DSL.name("CONTENT_TEXT"), SQLDataType.CLOB, this, "「contentText」- 无格式章节内容");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.CONTENT_META</code>. 「contentMeta」-
     * 存储格式
     */
    public final TableField<DDocSegmentRecord, String> CONTENT_META = createField(DSL.name("CONTENT_META"), SQLDataType.CLOB, this, "「contentMeta」- 存储格式");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.SORT</code>. 「sort」- 排序
     */
    public final TableField<DDocSegmentRecord, Integer> SORT = createField(DSL.name("SORT"), SQLDataType.INTEGER, this, "「sort」- 排序");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.LEVEL</code>. 「level」- 章节层级
     */
    public final TableField<DDocSegmentRecord, Integer> LEVEL = createField(DSL.name("LEVEL"), SQLDataType.INTEGER, this, "「level」- 章节层级");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.DOC_ID</code>. 「docId」- 章节所属文档ID
     */
    public final TableField<DDocSegmentRecord, String> DOC_ID = createField(DSL.name("DOC_ID"), SQLDataType.VARCHAR(36), this, "「docId」- 章节所属文档ID");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.PARENT_ID</code>. 「parentId」- 父章节ID
     */
    public final TableField<DDocSegmentRecord, String> PARENT_ID = createField(DSL.name("PARENT_ID"), SQLDataType.VARCHAR(36), this, "「parentId」- 父章节ID");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<DDocSegmentRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<DDocSegmentRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<DDocSegmentRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<DDocSegmentRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<DDocSegmentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<DDocSegmentRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<DDocSegmentRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>ZDB.D_DOC_SEGMENT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<DDocSegmentRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private DDocSegment(Name alias, Table<DDocSegmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private DDocSegment(Name alias, Table<DDocSegmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.D_DOC_SEGMENT</code> table reference
     */
    public DDocSegment(String alias) {
        this(DSL.name(alias), D_DOC_SEGMENT);
    }

    /**
     * Create an aliased <code>ZDB.D_DOC_SEGMENT</code> table reference
     */
    public DDocSegment(Name alias) {
        this(alias, D_DOC_SEGMENT);
    }

    /**
     * Create a <code>ZDB.D_DOC_SEGMENT</code> table reference
     */
    public DDocSegment() {
        this(DSL.name("D_DOC_SEGMENT"), null);
    }

    public <O extends Record> DDocSegment(Table<O> child, ForeignKey<O, DDocSegmentRecord> key) {
        super(child, key, D_DOC_SEGMENT);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DDocSegmentRecord> getRecordType() {
        return DDocSegmentRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<DDocSegmentRecord> getPrimaryKey() {
        return Keys.KEY_D_DOC_SEGMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<DDocSegmentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_D_DOC_SEGMENT_CODE, Keys.KEY_D_DOC_SEGMENT_NAME);
    }

    @Override
    public DDocSegment as(String alias) {
        return new DDocSegment(DSL.name(alias), this);
    }

    @Override
    public DDocSegment as(Name alias) {
        return new DDocSegment(alias, this);
    }

    @Override
    public DDocSegment as(Table<?> alias) {
        return new DDocSegment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DDocSegment rename(String name) {
        return new DDocSegment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DDocSegment rename(Name name) {
        return new DDocSegment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DDocSegment rename(Table<?> name) {
        return new DDocSegment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row22 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row22<String, String, String, String, String, String, String, String, String, String, Integer, Integer, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row22) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function22<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function22<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
