/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.records;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.documentation.domain.tables.DExam;
import io.zerows.extension.commerce.documentation.domain.tables.interfaces.IDExam;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DExamRecord extends UpdatableRecordImpl<DExamRecord> implements VertxPojo, IDExam {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached DExamRecord
     */
    public DExamRecord() {
        super(DExam.D_EXAM);
    }

    /**
     * Create a detached, initialised DExamRecord
     */
    public DExamRecord(String key, String code, String name, String subject, String brief, String sn, Integer duration, String type, String status, Boolean online, String addrUrl, String addrLocation, String addrContent, String modelId, String modelKey, String issuer, LocalDateTime issuerAt, LocalDateTime startAt, LocalDateTime endAt, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(DExam.D_EXAM);

        setKey(key);
        setCode(code);
        setName(name);
        setSubject(subject);
        setBrief(brief);
        setSn(sn);
        setDuration(duration);
        setType(type);
        setStatus(status);
        setOnline(online);
        setAddrUrl(addrUrl);
        setAddrLocation(addrLocation);
        setAddrContent(addrContent);
        setModelId(modelId);
        setModelKey(modelKey);
        setIssuer(issuer);
        setIssuerAt(issuerAt);
        setStartAt(startAt);
        setEndAt(endAt);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DExamRecord
     */
    public DExamRecord(io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam value) {
        super(DExam.D_EXAM);

        if (value != null) {
            setKey(value.getKey());
            setCode(value.getCode());
            setName(value.getName());
            setSubject(value.getSubject());
            setBrief(value.getBrief());
            setSn(value.getSn());
            setDuration(value.getDuration());
            setType(value.getType());
            setStatus(value.getStatus());
            setOnline(value.getOnline());
            setAddrUrl(value.getAddrUrl());
            setAddrLocation(value.getAddrLocation());
            setAddrContent(value.getAddrContent());
            setModelId(value.getModelId());
            setModelKey(value.getModelKey());
            setIssuer(value.getIssuer());
            setIssuerAt(value.getIssuerAt());
            setStartAt(value.getStartAt());
            setEndAt(value.getEndAt());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            resetChangedOnNotNull();
        }
    }

    public DExamRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.D_EXAM.KEY</code>. 「key」- 考试主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.KEY</code>. 「key」- 考试主键
     */
    @Override
    public DExamRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.CODE</code>. 「code」- 考试编号
     */
    @Override
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.CODE</code>. 「code」- 考试编号
     */
    @Override
    public DExamRecord setCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.NAME</code>. 「name」- 考试名称
     */
    @Override
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.NAME</code>. 「name」- 考试名称
     */
    @Override
    public DExamRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.SUBJECT</code>. 「subject」- 考试科目
     */
    @Override
    public String getSubject() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.SUBJECT</code>. 「subject」- 考试科目
     */
    @Override
    public DExamRecord setSubject(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.BRIEF</code>. 「brief」- 考试简介
     */
    @Override
    public String getBrief() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.BRIEF</code>. 「brief」- 考试简介
     */
    @Override
    public DExamRecord setBrief(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.SN</code>. 「sn」- 考试代码，如SCJP、SCWCD
     * 1.5等专业考试专用代码
     */
    @Override
    public String getSn() {
        return (String) get(5);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.SN</code>. 「sn」- 考试代码，如SCJP、SCWCD
     * 1.5等专业考试专用代码
     */
    @Override
    public DExamRecord setSn(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.DURATION</code>. 「duration」- 时长，单位：分钟
     */
    @Override
    public Integer getDuration() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.DURATION</code>. 「duration」- 时长，单位：分钟
     */
    @Override
    public DExamRecord setDuration(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.TYPE</code>. 「type」- 考试类型
     */
    @Override
    public String getType() {
        return (String) get(7);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.TYPE</code>. 「type」- 考试类型
     */
    @Override
    public DExamRecord setType(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.STATUS</code>. 「status」- 状态
     */
    @Override
    public String getStatus() {
        return (String) get(8);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.STATUS</code>. 「status」- 状态
     */
    @Override
    public DExamRecord setStatus(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ONLINE</code>. 「online」- 是否线上考试
     */
    @Override
    public Boolean getOnline() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ONLINE</code>. 「online」- 是否线上考试
     */
    @Override
    public DExamRecord setOnline(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ADDR_URL</code>. 「addrUrl」- 线上考试地址
     */
    @Override
    public String getAddrUrl() {
        return (String) get(10);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ADDR_URL</code>. 「addrUrl」- 线上考试地址
     */
    @Override
    public DExamRecord setAddrUrl(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ADDR_LOCATION</code>. 「addrLocation」-
     * 线下考试的考试地址
     */
    @Override
    public String getAddrLocation() {
        return (String) get(11);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ADDR_LOCATION</code>. 「addrLocation」-
     * 线下考试的考试地址
     */
    @Override
    public DExamRecord setAddrLocation(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ADDR_CONTENT</code>. 「addrContent」-
     * 线下考试地址详细描述
     */
    @Override
    public String getAddrContent() {
        return (String) get(12);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ADDR_CONTENT</code>. 「addrContent」-
     * 线下考试地址详细描述
     */
    @Override
    public DExamRecord setAddrContent(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public String getModelId() {
        return (String) get(13);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public DExamRecord setModelId(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public String getModelKey() {
        return (String) get(14);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public DExamRecord setModelKey(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ISSUER</code>. 「issuer」- 发布者
     */
    @Override
    public String getIssuer() {
        return (String) get(15);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ISSUER</code>. 「issuer」- 发布者
     */
    @Override
    public DExamRecord setIssuer(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ISSUER_AT</code>. 「issuerAt」- 发布时间
     */
    @Override
    public LocalDateTime getIssuerAt() {
        return (LocalDateTime) get(16);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ISSUER_AT</code>. 「issuerAt」- 发布时间
     */
    @Override
    public DExamRecord setIssuerAt(LocalDateTime value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.START_AT</code>. 「startAt」- 考试开始时间
     */
    @Override
    public LocalDateTime getStartAt() {
        return (LocalDateTime) get(17);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.START_AT</code>. 「startAt」- 考试开始时间
     */
    @Override
    public DExamRecord setStartAt(LocalDateTime value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.END_AT</code>. 「endAt」- 考试结束时间
     */
    @Override
    public LocalDateTime getEndAt() {
        return (LocalDateTime) get(18);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.END_AT</code>. 「endAt」- 考试结束时间
     */
    @Override
    public DExamRecord setEndAt(LocalDateTime value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(19);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public DExamRecord setSigma(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(20);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public DExamRecord setLanguage(String value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(21);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public DExamRecord setActive(Boolean value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(22);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public DExamRecord setMetadata(String value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(23);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public DExamRecord setCreatedAt(LocalDateTime value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(24);
    }

    /**
     * Setter for <code>ZDB.D_EXAM.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public DExamRecord setCreatedBy(String value) {
        set(24, value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>ZDB.D_EXAM.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(25);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.D_EXAM.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public DExamRecord setUpdatedAt(LocalDateTime value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(26);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.D_EXAM.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public DExamRecord setUpdatedBy(String value) {
        set(26, value);
        return this;
    }

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    @Override
    public void from(IDExam from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setName(from.getName());
        setSubject(from.getSubject());
        setBrief(from.getBrief());
        setSn(from.getSn());
        setDuration(from.getDuration());
        setType(from.getType());
        setStatus(from.getStatus());
        setOnline(from.getOnline());
        setAddrUrl(from.getAddrUrl());
        setAddrLocation(from.getAddrLocation());
        setAddrContent(from.getAddrContent());
        setModelId(from.getModelId());
        setModelKey(from.getModelKey());
        setIssuer(from.getIssuer());
        setIssuerAt(from.getIssuerAt());
        setStartAt(from.getStartAt());
        setEndAt(from.getEndAt());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IDExam> E into(E into) {
        into.from(this);
        return into;
    }
}
