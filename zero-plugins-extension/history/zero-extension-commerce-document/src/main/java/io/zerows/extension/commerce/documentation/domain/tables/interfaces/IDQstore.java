/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;

import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.setOrThrow;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public interface IDQstore extends VertxPojo, Serializable {

    /**
     * Getter for <code>ZDB.D_QSTORE.KEY</code>. 「key」- 题库主键
     */
    public String getKey();

    /**
     * Setter for <code>ZDB.D_QSTORE.KEY</code>. 「key」- 题库主键
     */
    public IDQstore setKey(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.CODE</code>. 「code」-  题库编号
     */
    public String getCode();

    /**
     * Setter for <code>ZDB.D_QSTORE.CODE</code>. 「code」-  题库编号
     */
    public IDQstore setCode(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.TYPE</code>. 「type」-  题库类型
     */
    public String getType();

    /**
     * Setter for <code>ZDB.D_QSTORE.TYPE</code>. 「type」-  题库类型
     */
    public IDQstore setType(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.STATUS</code>. 「status」- 状态
     */
    public String getStatus();

    /**
     * Setter for <code>ZDB.D_QSTORE.STATUS</code>. 「status」- 状态
     */
    public IDQstore setStatus(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.CATEGORY</code>. 「category」- 题库类型、树型模型
     */
    public String getCategory();

    /**
     * Setter for <code>ZDB.D_QSTORE.CATEGORY</code>. 「category」- 题库类型、树型模型
     */
    public IDQstore setCategory(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.NAME</code>. 「name」-  题库标题
     */
    public String getName();

    /**
     * Setter for <code>ZDB.D_QSTORE.NAME</code>. 「name」-  题库标题
     */
    public IDQstore setName(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.BRIEF</code>. 「brief」- 题库简介
     */
    public String getBrief();

    /**
     * Setter for <code>ZDB.D_QSTORE.BRIEF</code>. 「brief」- 题库简介
     */
    public IDQstore setBrief(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.VERSION</code>. 「version」- 题库版本, N.N
     */
    public String getVersion();

    /**
     * Setter for <code>ZDB.D_QSTORE.VERSION</code>. 「version」- 题库版本, N.N
     */
    public IDQstore setVersion(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.QUESTIONS</code>. 「questions」- 题目数量
     */
    public Integer getQuestions();

    /**
     * Setter for <code>ZDB.D_QSTORE.QUESTIONS</code>. 「questions」- 题目数量
     */
    public IDQstore setQuestions(Integer value);

    /**
     * Getter for <code>ZDB.D_QSTORE.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    public String getModelId();

    /**
     * Setter for <code>ZDB.D_QSTORE.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    public IDQstore setModelId(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public String getModelKey();

    /**
     * Setter for <code>ZDB.D_QSTORE.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public IDQstore setModelKey(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>ZDB.D_QSTORE.SIGMA</code>. 「sigma」- 统一标识
     */
    public IDQstore setSigma(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>ZDB.D_QSTORE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IDQstore setLanguage(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>ZDB.D_QSTORE.ACTIVE</code>. 「active」- 是否启用
     */
    public IDQstore setActive(Boolean value);

    /**
     * Getter for <code>ZDB.D_QSTORE.METADATA</code>. 「metadata」- 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>ZDB.D_QSTORE.METADATA</code>. 「metadata」- 附加配置数据
     */
    public IDQstore setMetadata(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>ZDB.D_QSTORE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IDQstore setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>ZDB.D_QSTORE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>ZDB.D_QSTORE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IDQstore setCreatedBy(String value);

    /**
     * Getter for <code>ZDB.D_QSTORE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>ZDB.D_QSTORE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IDQstore setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>ZDB.D_QSTORE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    /**
     * Setter for <code>ZDB.D_QSTORE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IDQstore setUpdatedBy(String value);

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IDQstore
     */
    public void from(IDQstore from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IDQstore
     */
    public <E extends IDQstore> E into(E into);

    @Override
    public default IDQstore fromJson(io.vertx.core.json.JsonObject json) {
        setOrThrow(this::setKey, json::getString, "KEY", "java.lang.String");
        setOrThrow(this::setCode, json::getString, "CODE", "java.lang.String");
        setOrThrow(this::setType, json::getString, "TYPE", "java.lang.String");
        setOrThrow(this::setStatus, json::getString, "STATUS", "java.lang.String");
        setOrThrow(this::setCategory, json::getString, "CATEGORY", "java.lang.String");
        setOrThrow(this::setName, json::getString, "NAME", "java.lang.String");
        setOrThrow(this::setBrief, json::getString, "BRIEF", "java.lang.String");
        setOrThrow(this::setVersion, json::getString, "VERSION", "java.lang.String");
        setOrThrow(this::setQuestions, json::getInteger, "QUESTIONS", "java.lang.Integer");
        setOrThrow(this::setModelId, json::getString, "MODEL_ID", "java.lang.String");
        setOrThrow(this::setModelKey, json::getString, "MODEL_KEY", "java.lang.String");
        setOrThrow(this::setSigma, json::getString, "SIGMA", "java.lang.String");
        setOrThrow(this::setLanguage, json::getString, "LANGUAGE", "java.lang.String");
        setOrThrow(this::setActive, json::getBoolean, "ACTIVE", "java.lang.Boolean");
        setOrThrow(this::setMetadata, json::getString, "METADATA", "java.lang.String");
        setOrThrow(this::setCreatedAt, key -> {
            String s = json.getString(key);
            return s == null ? null : java.time.LocalDateTime.parse(s);
        }, "CREATED_AT", "java.time.LocalDateTime");
        setOrThrow(this::setCreatedBy, json::getString, "CREATED_BY", "java.lang.String");
        setOrThrow(this::setUpdatedAt, key -> {
            String s = json.getString(key);
            return s == null ? null : java.time.LocalDateTime.parse(s);
        }, "UPDATED_AT", "java.time.LocalDateTime");
        setOrThrow(this::setUpdatedBy, json::getString, "UPDATED_BY", "java.lang.String");
        return this;
    }


    @Override
    public default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY", getKey());
        json.put("CODE", getCode());
        json.put("TYPE", getType());
        json.put("STATUS", getStatus());
        json.put("CATEGORY", getCategory());
        json.put("NAME", getName());
        json.put("BRIEF", getBrief());
        json.put("VERSION", getVersion());
        json.put("QUESTIONS", getQuestions());
        json.put("MODEL_ID", getModelId());
        json.put("MODEL_KEY", getModelKey());
        json.put("SIGMA", getSigma());
        json.put("LANGUAGE", getLanguage());
        json.put("ACTIVE", getActive());
        json.put("METADATA", getMetadata());
        json.put("CREATED_AT", getCreatedAt() == null ? null : getCreatedAt().toString());
        json.put("CREATED_BY", getCreatedBy());
        json.put("UPDATED_AT", getUpdatedAt() == null ? null : getUpdatedAt().toString());
        json.put("UPDATED_BY", getUpdatedBy());
        return json;
    }

}
