/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.commerce.documentation.domain.tables.DRefer;
import io.zerows.extension.commerce.documentation.domain.tables.records.DReferRecord;
import org.jooq.Configuration;
import org.jooq.Record4;

import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DReferDao extends AbstractVertxDAO<DReferRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer, Record4<String, String, String, String>, Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>>, Future<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>, Future<Integer>, Future<Record4<String, String, String, String>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DReferRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer, Record4<String, String, String, String>> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public DReferDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(DRefer.D_REFER, io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer.class, new JDBCClassicQueryExecutor<DReferRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer, Record4<String, String, String, String>>(configuration, io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer.class, vertx));
    }

    @Override
    protected Record4<String, String, String, String> getId(io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer object) {
        return compositeKeyRecord(object.getFromId(), object.getFromType(), object.getToId(), object.getToType());
    }

    /**
     * Find records that have <code>FROM_TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>> findManyByFromType(Collection<String> values) {
        return findManyByCondition(DRefer.D_REFER.FROM_TYPE.in(values));
    }

    /**
     * Find records that have <code>FROM_TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>> findManyByFromType(Collection<String> values, int limit) {
        return findManyByCondition(DRefer.D_REFER.FROM_TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>TO_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>> findManyByToId(Collection<String> values) {
        return findManyByCondition(DRefer.D_REFER.TO_ID.in(values));
    }

    /**
     * Find records that have <code>TO_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>> findManyByToId(Collection<String> values, int limit) {
        return findManyByCondition(DRefer.D_REFER.TO_ID.in(values), limit);
    }

    /**
     * Find records that have <code>TO_TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>> findManyByToType(Collection<String> values) {
        return findManyByCondition(DRefer.D_REFER.TO_TYPE.in(values));
    }

    /**
     * Find records that have <code>TO_TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>> findManyByToType(Collection<String> values, int limit) {
        return findManyByCondition(DRefer.D_REFER.TO_TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>INLINE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>> findManyByInline(Collection<Boolean> values) {
        return findManyByCondition(DRefer.D_REFER.INLINE.in(values));
    }

    /**
     * Find records that have <code>INLINE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>> findManyByInline(Collection<Boolean> values, int limit) {
        return findManyByCondition(DRefer.D_REFER.INLINE.in(values), limit);
    }

    /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>> findManyByComment(Collection<String> values) {
        return findManyByCondition(DRefer.D_REFER.COMMENT.in(values));
    }

    /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>> findManyByComment(Collection<String> values, int limit) {
        return findManyByCondition(DRefer.D_REFER.COMMENT.in(values), limit);
    }

    /**
     * Find records that have <code>REFER_COMPONENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>> findManyByReferComponent(Collection<String> values) {
        return findManyByCondition(DRefer.D_REFER.REFER_COMPONENT.in(values));
    }

    /**
     * Find records that have <code>REFER_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer>> findManyByReferComponent(Collection<String> values, int limit) {
        return findManyByCondition(DRefer.D_REFER.REFER_COMPONENT.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<DReferRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer, Record4<String, String, String, String>> queryExecutor() {
        return (JDBCClassicQueryExecutor<DReferRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer, Record4<String, String, String, String>>) super.queryExecutor();
    }
}
