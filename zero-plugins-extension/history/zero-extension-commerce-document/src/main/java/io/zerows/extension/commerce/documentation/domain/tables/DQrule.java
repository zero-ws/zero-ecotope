/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables;


import io.zerows.extension.commerce.documentation.domain.Keys;
import io.zerows.extension.commerce.documentation.domain.Zdb;
import io.zerows.extension.commerce.documentation.domain.tables.records.DQruleRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DQrule extends TableImpl<DQruleRecord> {

    /**
     * The reference instance of <code>ZDB.D_QRULE</code>
     */
    public static final DQrule D_QRULE = new DQrule();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>ZDB.D_QRULE.REF_ID</code>. 「refId」- 关联考卷中问题实例，对应
     * D_PAPER_REF 表中内容
     */
    public final TableField<DQruleRecord, String> REF_ID = createField(DSL.name("REF_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「refId」- 关联考卷中问题实例，对应 D_PAPER_REF 表中内容");
    /**
     * The column <code>ZDB.D_QRULE.ANSWER_ID</code>. 「answerId」- 考卷ID
     */
    public final TableField<DQruleRecord, String> ANSWER_ID = createField(DSL.name("ANSWER_ID"), SQLDataType.VARCHAR(36), this, "「answerId」- 考卷ID");
    /**
     * The column <code>ZDB.D_QRULE.PAPER_ID</code>. 「paperId」- 规则所属考卷ID
     */
    public final TableField<DQruleRecord, String> PAPER_ID = createField(DSL.name("PAPER_ID"), SQLDataType.VARCHAR(36), this, "「paperId」- 规则所属考卷ID");
    /**
     * The column <code>ZDB.D_QRULE.TYPE</code>. 「type」- 规则类型
     */
    public final TableField<DQruleRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(128).nullable(false), this, "「type」- 规则类型");
    /**
     * The column <code>ZDB.D_QRULE.QUESTION_ID</code>. 「questionId」- 问题ID
     */
    public final TableField<DQruleRecord, String> QUESTION_ID = createField(DSL.name("QUESTION_ID"), SQLDataType.VARCHAR(36), this, "「questionId」- 问题ID");
    /**
     * The column <code>ZDB.D_QRULE.IS_REQUIRED</code>. 「isRequired」- 必答题
     */
    public final TableField<DQruleRecord, Boolean> IS_REQUIRED = createField(DSL.name("IS_REQUIRED"), SQLDataType.BIT, this, "「isRequired」- 必答题");
    /**
     * The column <code>ZDB.D_QRULE.IS_ATTACHED</code>. 「isAttached」- 附件必须
     */
    public final TableField<DQruleRecord, Boolean> IS_ATTACHED = createField(DSL.name("IS_ATTACHED"), SQLDataType.BIT, this, "「isAttached」- 附件必须");
    /**
     * The column <code>ZDB.D_QRULE.IS_PROOF</code>. 「isProof」- 证据必须
     */
    public final TableField<DQruleRecord, Boolean> IS_PROOF = createField(DSL.name("IS_PROOF"), SQLDataType.BIT, this, "「isProof」- 证据必须");
    /**
     * The column <code>ZDB.D_QRULE.RULE_SET</code>. 「ruleSet」- 规则分批执行
     */
    public final TableField<DQruleRecord, String> RULE_SET = createField(DSL.name("RULE_SET"), SQLDataType.VARCHAR(255).nullable(false), this, "「ruleSet」- 规则分批执行");
    /**
     * The column <code>ZDB.D_QRULE.RULE_CONFIG</code>. 「ruleConfig」- 规则相关配置
     */
    public final TableField<DQruleRecord, String> RULE_CONFIG = createField(DSL.name("RULE_CONFIG"), SQLDataType.CLOB, this, "「ruleConfig」- 规则相关配置");
    /**
     * The column <code>ZDB.D_QRULE.RULE_COMPONENT</code>. 「ruleComponent」-
     * 规则执行组件（扩展用）
     */
    public final TableField<DQruleRecord, String> RULE_COMPONENT = createField(DSL.name("RULE_COMPONENT"), SQLDataType.VARCHAR(255), this, "「ruleComponent」- 规则执行组件（扩展用）");

    private DQrule(Name alias, Table<DQruleRecord> aliased) {
        this(alias, aliased, null);
    }

    private DQrule(Name alias, Table<DQruleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.D_QRULE</code> table reference
     */
    public DQrule(String alias) {
        this(DSL.name(alias), D_QRULE);
    }

    /**
     * Create an aliased <code>ZDB.D_QRULE</code> table reference
     */
    public DQrule(Name alias) {
        this(alias, D_QRULE);
    }

    /**
     * Create a <code>ZDB.D_QRULE</code> table reference
     */
    public DQrule() {
        this(DSL.name("D_QRULE"), null);
    }

    public <O extends Record> DQrule(Table<O> child, ForeignKey<O, DQruleRecord> key) {
        super(child, key, D_QRULE);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DQruleRecord> getRecordType() {
        return DQruleRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<DQruleRecord> getPrimaryKey() {
        return Keys.KEY_D_QRULE_PRIMARY;
    }

    @Override
    public DQrule as(String alias) {
        return new DQrule(DSL.name(alias), this);
    }

    @Override
    public DQrule as(Name alias) {
        return new DQrule(alias, this);
    }

    @Override
    public DQrule as(Table<?> alias) {
        return new DQrule(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DQrule rename(String name) {
        return new DQrule(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DQrule rename(Name name) {
        return new DQrule(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DQrule rename(Table<?> name) {
        return new DQrule(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, String, String, String, Boolean, Boolean, Boolean, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super Boolean, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
