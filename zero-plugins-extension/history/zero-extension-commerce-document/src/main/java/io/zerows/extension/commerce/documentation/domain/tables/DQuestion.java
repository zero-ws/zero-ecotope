/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables;


import io.zerows.extension.commerce.documentation.domain.Keys;
import io.zerows.extension.commerce.documentation.domain.Zdb;
import io.zerows.extension.commerce.documentation.domain.tables.records.DQuestionRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DQuestion extends TableImpl<DQuestionRecord> {

    /**
     * The reference instance of <code>ZDB.D_QUESTION</code>
     */
    public static final DQuestion D_QUESTION = new DQuestion();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>ZDB.D_QUESTION.KEY</code>. 「key」- 问题主键
     */
    public final TableField<DQuestionRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 问题主键");
    /**
     * The column <code>ZDB.D_QUESTION.CODE</code>. 「code」- 问题编号
     */
    public final TableField<DQuestionRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 问题编号");
    /**
     * The column <code>ZDB.D_QUESTION.TYPE</code>. 「type」- 题目类型
     */
    public final TableField<DQuestionRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(128), this, "「type」- 题目类型");
    /**
     * The column <code>ZDB.D_QUESTION.SORT</code>. 「sort」- 题目排序（题库中题目顺序）
     */
    public final TableField<DQuestionRecord, Integer> SORT = createField(DSL.name("SORT"), SQLDataType.INTEGER, this, "「sort」- 题目排序（题库中题目顺序）");
    /**
     * The column <code>ZDB.D_QUESTION.NAME</code>. 「name」- 题干
     */
    public final TableField<DQuestionRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 题干");
    /**
     * The column <code>ZDB.D_QUESTION.BRIEF</code>. 「brief」- 题目描述信息
     */
    public final TableField<DQuestionRecord, String> BRIEF = createField(DSL.name("BRIEF"), SQLDataType.CLOB, this, "「brief」- 题目描述信息");
    /**
     * The column <code>ZDB.D_QUESTION.TIP</code>. 「tip」- 题目提示信息
     */
    public final TableField<DQuestionRecord, String> TIP = createField(DSL.name("TIP"), SQLDataType.CLOB, this, "「tip」- 题目提示信息");
    /**
     * The column <code>ZDB.D_QUESTION.MATERIAL</code>. 「material」- 题目的特殊材料
     */
    public final TableField<DQuestionRecord, String> MATERIAL = createField(DSL.name("MATERIAL"), SQLDataType.CLOB, this, "「material」- 题目的特殊材料");
    /**
     * The column <code>ZDB.D_QUESTION.MATERIAL_FILES</code>. 「materialFiles」-
     * 材料文件
     */
    public final TableField<DQuestionRecord, String> MATERIAL_FILES = createField(DSL.name("MATERIAL_FILES"), SQLDataType.CLOB, this, "「materialFiles」- 材料文件");
    /**
     * The column <code>ZDB.D_QUESTION.SCORE</code>. 「score」- 题目分值
     */
    public final TableField<DQuestionRecord, BigDecimal> SCORE = createField(DSL.name("SCORE"), SQLDataType.DECIMAL(18, 4), this, "「score」- 题目分值");
    /**
     * The column <code>ZDB.D_QUESTION.LEVEL</code>. 「level」- 题目等级（难度）
     */
    public final TableField<DQuestionRecord, Integer> LEVEL = createField(DSL.name("LEVEL"), SQLDataType.INTEGER, this, "「level」- 题目等级（难度）");
    /**
     * The column <code>ZDB.D_QUESTION.LEVEL_CONTENT</code>. 「levelContent」-
     * 题目等级描述信息
     */
    public final TableField<DQuestionRecord, String> LEVEL_CONTENT = createField(DSL.name("LEVEL_CONTENT"), SQLDataType.CLOB, this, "「levelContent」- 题目等级描述信息");
    /**
     * The column <code>ZDB.D_QUESTION.ANSWER_DEFINE</code>. 「answerDefine」-
     * 答题描述
     */
    public final TableField<DQuestionRecord, String> ANSWER_DEFINE = createField(DSL.name("ANSWER_DEFINE"), SQLDataType.CLOB, this, "「answerDefine」- 答题描述");
    /**
     * The column <code>ZDB.D_QUESTION.STORE_ID</code>. 「storeId」- 所属题库
     */
    public final TableField<DQuestionRecord, String> STORE_ID = createField(DSL.name("STORE_ID"), SQLDataType.VARCHAR(36), this, "「storeId」- 所属题库");
    /**
     * The column <code>ZDB.D_QUESTION.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    public final TableField<DQuestionRecord, String> MODEL_ID = createField(DSL.name("MODEL_ID"), SQLDataType.VARCHAR(255), this, "「modelId」- 关联的模型identifier，用于描述");
    /**
     * The column <code>ZDB.D_QUESTION.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public final TableField<DQuestionRecord, String> MODEL_KEY = createField(DSL.name("MODEL_KEY"), SQLDataType.VARCHAR(36), this, "「modelKey」- 关联的模型记录ID，用于描述哪一个Model中的记录");
    /**
     * The column <code>ZDB.D_QUESTION.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<DQuestionRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>ZDB.D_QUESTION.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<DQuestionRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>ZDB.D_QUESTION.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<DQuestionRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>ZDB.D_QUESTION.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<DQuestionRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>ZDB.D_QUESTION.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<DQuestionRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>ZDB.D_QUESTION.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<DQuestionRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>ZDB.D_QUESTION.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<DQuestionRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>ZDB.D_QUESTION.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<DQuestionRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private DQuestion(Name alias, Table<DQuestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private DQuestion(Name alias, Table<DQuestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.D_QUESTION</code> table reference
     */
    public DQuestion(String alias) {
        this(DSL.name(alias), D_QUESTION);
    }

    /**
     * Create an aliased <code>ZDB.D_QUESTION</code> table reference
     */
    public DQuestion(Name alias) {
        this(alias, D_QUESTION);
    }

    /**
     * Create a <code>ZDB.D_QUESTION</code> table reference
     */
    public DQuestion() {
        this(DSL.name("D_QUESTION"), null);
    }

    public <O extends Record> DQuestion(Table<O> child, ForeignKey<O, DQuestionRecord> key) {
        super(child, key, D_QUESTION);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DQuestionRecord> getRecordType() {
        return DQuestionRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<DQuestionRecord> getPrimaryKey() {
        return Keys.KEY_D_QUESTION_PRIMARY;
    }

    @Override
    public List<UniqueKey<DQuestionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_D_QUESTION_CODE, Keys.KEY_D_QUESTION_STORE_ID);
    }

    @Override
    public DQuestion as(String alias) {
        return new DQuestion(DSL.name(alias), this);
    }

    @Override
    public DQuestion as(Name alias) {
        return new DQuestion(alias, this);
    }

    @Override
    public DQuestion as(Table<?> alias) {
        return new DQuestion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DQuestion rename(String name) {
        return new DQuestion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DQuestion rename(Name name) {
        return new DQuestion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DQuestion rename(Table<?> name) {
        return new DQuestion(name.getQualifiedName(), null);
    }
}
