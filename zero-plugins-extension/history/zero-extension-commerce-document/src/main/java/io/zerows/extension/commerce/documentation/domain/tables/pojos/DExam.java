/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.pojos;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.documentation.domain.tables.interfaces.IDExam;

import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DExam implements VertxPojo, IDExam {

    private static final long serialVersionUID = 1L;

    private String key;
    private String code;
    private String name;
    private String subject;
    private String brief;
    private String sn;
    private Integer duration;
    private String type;
    private String status;
    private Boolean online;
    private String addrUrl;
    private String addrLocation;
    private String addrContent;
    private String modelId;
    private String modelKey;
    private String issuer;
    private LocalDateTime issuerAt;
    private LocalDateTime startAt;
    private LocalDateTime endAt;
    private String sigma;
    private String language;
    private Boolean active;
    private String metadata;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public DExam() {
    }

    public DExam(IDExam value) {
        this.key = value.getKey();
        this.code = value.getCode();
        this.name = value.getName();
        this.subject = value.getSubject();
        this.brief = value.getBrief();
        this.sn = value.getSn();
        this.duration = value.getDuration();
        this.type = value.getType();
        this.status = value.getStatus();
        this.online = value.getOnline();
        this.addrUrl = value.getAddrUrl();
        this.addrLocation = value.getAddrLocation();
        this.addrContent = value.getAddrContent();
        this.modelId = value.getModelId();
        this.modelKey = value.getModelKey();
        this.issuer = value.getIssuer();
        this.issuerAt = value.getIssuerAt();
        this.startAt = value.getStartAt();
        this.endAt = value.getEndAt();
        this.sigma = value.getSigma();
        this.language = value.getLanguage();
        this.active = value.getActive();
        this.metadata = value.getMetadata();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public DExam(
        String key,
        String code,
        String name,
        String subject,
        String brief,
        String sn,
        Integer duration,
        String type,
        String status,
        Boolean online,
        String addrUrl,
        String addrLocation,
        String addrContent,
        String modelId,
        String modelKey,
        String issuer,
        LocalDateTime issuerAt,
        LocalDateTime startAt,
        LocalDateTime endAt,
        String sigma,
        String language,
        Boolean active,
        String metadata,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.code = code;
        this.name = name;
        this.subject = subject;
        this.brief = brief;
        this.sn = sn;
        this.duration = duration;
        this.type = type;
        this.status = status;
        this.online = online;
        this.addrUrl = addrUrl;
        this.addrLocation = addrLocation;
        this.addrContent = addrContent;
        this.modelId = modelId;
        this.modelKey = modelKey;
        this.issuer = issuer;
        this.issuerAt = issuerAt;
        this.startAt = startAt;
        this.endAt = endAt;
        this.sigma = sigma;
        this.language = language;
        this.active = active;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

    public DExam(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.D_EXAM.KEY</code>. 「key」- 考试主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.KEY</code>. 「key」- 考试主键
     */
    @Override
    public DExam setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.CODE</code>. 「code」- 考试编号
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.CODE</code>. 「code」- 考试编号
     */
    @Override
    public DExam setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.NAME</code>. 「name」- 考试名称
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.NAME</code>. 「name」- 考试名称
     */
    @Override
    public DExam setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.SUBJECT</code>. 「subject」- 考试科目
     */
    @Override
    public String getSubject() {
        return this.subject;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.SUBJECT</code>. 「subject」- 考试科目
     */
    @Override
    public DExam setSubject(String subject) {
        this.subject = subject;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.BRIEF</code>. 「brief」- 考试简介
     */
    @Override
    public String getBrief() {
        return this.brief;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.BRIEF</code>. 「brief」- 考试简介
     */
    @Override
    public DExam setBrief(String brief) {
        this.brief = brief;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.SN</code>. 「sn」- 考试代码，如SCJP、SCWCD
     * 1.5等专业考试专用代码
     */
    @Override
    public String getSn() {
        return this.sn;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.SN</code>. 「sn」- 考试代码，如SCJP、SCWCD
     * 1.5等专业考试专用代码
     */
    @Override
    public DExam setSn(String sn) {
        this.sn = sn;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.DURATION</code>. 「duration」- 时长，单位：分钟
     */
    @Override
    public Integer getDuration() {
        return this.duration;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.DURATION</code>. 「duration」- 时长，单位：分钟
     */
    @Override
    public DExam setDuration(Integer duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.TYPE</code>. 「type」- 考试类型
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.TYPE</code>. 「type」- 考试类型
     */
    @Override
    public DExam setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.STATUS</code>. 「status」- 状态
     */
    @Override
    public String getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.STATUS</code>. 「status」- 状态
     */
    @Override
    public DExam setStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ONLINE</code>. 「online」- 是否线上考试
     */
    @Override
    public Boolean getOnline() {
        return this.online;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ONLINE</code>. 「online」- 是否线上考试
     */
    @Override
    public DExam setOnline(Boolean online) {
        this.online = online;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ADDR_URL</code>. 「addrUrl」- 线上考试地址
     */
    @Override
    public String getAddrUrl() {
        return this.addrUrl;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ADDR_URL</code>. 「addrUrl」- 线上考试地址
     */
    @Override
    public DExam setAddrUrl(String addrUrl) {
        this.addrUrl = addrUrl;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ADDR_LOCATION</code>. 「addrLocation」-
     * 线下考试的考试地址
     */
    @Override
    public String getAddrLocation() {
        return this.addrLocation;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ADDR_LOCATION</code>. 「addrLocation」-
     * 线下考试的考试地址
     */
    @Override
    public DExam setAddrLocation(String addrLocation) {
        this.addrLocation = addrLocation;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ADDR_CONTENT</code>. 「addrContent」-
     * 线下考试地址详细描述
     */
    @Override
    public String getAddrContent() {
        return this.addrContent;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ADDR_CONTENT</code>. 「addrContent」-
     * 线下考试地址详细描述
     */
    @Override
    public DExam setAddrContent(String addrContent) {
        this.addrContent = addrContent;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public String getModelId() {
        return this.modelId;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public DExam setModelId(String modelId) {
        this.modelId = modelId;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public String getModelKey() {
        return this.modelKey;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public DExam setModelKey(String modelKey) {
        this.modelKey = modelKey;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ISSUER</code>. 「issuer」- 发布者
     */
    @Override
    public String getIssuer() {
        return this.issuer;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ISSUER</code>. 「issuer」- 发布者
     */
    @Override
    public DExam setIssuer(String issuer) {
        this.issuer = issuer;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ISSUER_AT</code>. 「issuerAt」- 发布时间
     */
    @Override
    public LocalDateTime getIssuerAt() {
        return this.issuerAt;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ISSUER_AT</code>. 「issuerAt」- 发布时间
     */
    @Override
    public DExam setIssuerAt(LocalDateTime issuerAt) {
        this.issuerAt = issuerAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.START_AT</code>. 「startAt」- 考试开始时间
     */
    @Override
    public LocalDateTime getStartAt() {
        return this.startAt;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.START_AT</code>. 「startAt」- 考试开始时间
     */
    @Override
    public DExam setStartAt(LocalDateTime startAt) {
        this.startAt = startAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.END_AT</code>. 「endAt」- 考试结束时间
     */
    @Override
    public LocalDateTime getEndAt() {
        return this.endAt;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.END_AT</code>. 「endAt」- 考试结束时间
     */
    @Override
    public DExam setEndAt(LocalDateTime endAt) {
        this.endAt = endAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public DExam setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public DExam setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public DExam setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public DExam setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public DExam setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public DExam setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public DExam setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_EXAM.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>ZDB.D_EXAM.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public DExam setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final DExam other = (DExam) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        } else if (!this.key.equals(other.key))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        } else if (!this.code.equals(other.code))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        } else if (!this.name.equals(other.name))
            return false;
        if (this.subject == null) {
            if (other.subject != null)
                return false;
        } else if (!this.subject.equals(other.subject))
            return false;
        if (this.brief == null) {
            if (other.brief != null)
                return false;
        } else if (!this.brief.equals(other.brief))
            return false;
        if (this.sn == null) {
            if (other.sn != null)
                return false;
        } else if (!this.sn.equals(other.sn))
            return false;
        if (this.duration == null) {
            if (other.duration != null)
                return false;
        } else if (!this.duration.equals(other.duration))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        } else if (!this.type.equals(other.type))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        } else if (!this.status.equals(other.status))
            return false;
        if (this.online == null) {
            if (other.online != null)
                return false;
        } else if (!this.online.equals(other.online))
            return false;
        if (this.addrUrl == null) {
            if (other.addrUrl != null)
                return false;
        } else if (!this.addrUrl.equals(other.addrUrl))
            return false;
        if (this.addrLocation == null) {
            if (other.addrLocation != null)
                return false;
        } else if (!this.addrLocation.equals(other.addrLocation))
            return false;
        if (this.addrContent == null) {
            if (other.addrContent != null)
                return false;
        } else if (!this.addrContent.equals(other.addrContent))
            return false;
        if (this.modelId == null) {
            if (other.modelId != null)
                return false;
        } else if (!this.modelId.equals(other.modelId))
            return false;
        if (this.modelKey == null) {
            if (other.modelKey != null)
                return false;
        } else if (!this.modelKey.equals(other.modelKey))
            return false;
        if (this.issuer == null) {
            if (other.issuer != null)
                return false;
        } else if (!this.issuer.equals(other.issuer))
            return false;
        if (this.issuerAt == null) {
            if (other.issuerAt != null)
                return false;
        } else if (!this.issuerAt.equals(other.issuerAt))
            return false;
        if (this.startAt == null) {
            if (other.startAt != null)
                return false;
        } else if (!this.startAt.equals(other.startAt))
            return false;
        if (this.endAt == null) {
            if (other.endAt != null)
                return false;
        } else if (!this.endAt.equals(other.endAt))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        } else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        } else if (!this.language.equals(other.language))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        } else if (!this.active.equals(other.active))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        } else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        } else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        } else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        } else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        } else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.subject == null) ? 0 : this.subject.hashCode());
        result = prime * result + ((this.brief == null) ? 0 : this.brief.hashCode());
        result = prime * result + ((this.sn == null) ? 0 : this.sn.hashCode());
        result = prime * result + ((this.duration == null) ? 0 : this.duration.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.online == null) ? 0 : this.online.hashCode());
        result = prime * result + ((this.addrUrl == null) ? 0 : this.addrUrl.hashCode());
        result = prime * result + ((this.addrLocation == null) ? 0 : this.addrLocation.hashCode());
        result = prime * result + ((this.addrContent == null) ? 0 : this.addrContent.hashCode());
        result = prime * result + ((this.modelId == null) ? 0 : this.modelId.hashCode());
        result = prime * result + ((this.modelKey == null) ? 0 : this.modelKey.hashCode());
        result = prime * result + ((this.issuer == null) ? 0 : this.issuer.hashCode());
        result = prime * result + ((this.issuerAt == null) ? 0 : this.issuerAt.hashCode());
        result = prime * result + ((this.startAt == null) ? 0 : this.startAt.hashCode());
        result = prime * result + ((this.endAt == null) ? 0 : this.endAt.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DExam (");

        sb.append(key);
        sb.append(", ").append(code);
        sb.append(", ").append(name);
        sb.append(", ").append(subject);
        sb.append(", ").append(brief);
        sb.append(", ").append(sn);
        sb.append(", ").append(duration);
        sb.append(", ").append(type);
        sb.append(", ").append(status);
        sb.append(", ").append(online);
        sb.append(", ").append(addrUrl);
        sb.append(", ").append(addrLocation);
        sb.append(", ").append(addrContent);
        sb.append(", ").append(modelId);
        sb.append(", ").append(modelKey);
        sb.append(", ").append(issuer);
        sb.append(", ").append(issuerAt);
        sb.append(", ").append(startAt);
        sb.append(", ").append(endAt);
        sb.append(", ").append(sigma);
        sb.append(", ").append(language);
        sb.append(", ").append(active);
        sb.append(", ").append(metadata);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDExam from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setName(from.getName());
        setSubject(from.getSubject());
        setBrief(from.getBrief());
        setSn(from.getSn());
        setDuration(from.getDuration());
        setType(from.getType());
        setStatus(from.getStatus());
        setOnline(from.getOnline());
        setAddrUrl(from.getAddrUrl());
        setAddrLocation(from.getAddrLocation());
        setAddrContent(from.getAddrContent());
        setModelId(from.getModelId());
        setModelKey(from.getModelKey());
        setIssuer(from.getIssuer());
        setIssuerAt(from.getIssuerAt());
        setStartAt(from.getStartAt());
        setEndAt(from.getEndAt());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IDExam> E into(E into) {
        into.from(this);
        return into;
    }
}
