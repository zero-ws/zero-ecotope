/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables;


import io.zerows.extension.commerce.documentation.domain.Keys;
import io.zerows.extension.commerce.documentation.domain.Zdb;
import io.zerows.extension.commerce.documentation.domain.tables.records.DDocRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DDoc extends TableImpl<DDocRecord> {

    /**
     * The reference instance of <code>ZDB.D_DOC</code>
     */
    public static final DDoc D_DOC = new DDoc();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>ZDB.D_DOC.KEY</code>. 「key」- 文档主键，唯一标识
     */
    public final TableField<DDocRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 文档主键，唯一标识");
    /**
     * The column <code>ZDB.D_DOC.CODE</code>. 「code」- 文档系统编号
     */
    public final TableField<DDocRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 文档系统编号");
    /**
     * The column <code>ZDB.D_DOC.STATUS</code>. 「status」- 状态
     */
    public final TableField<DDocRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(12), this, "「status」- 状态");
    /**
     * The column <code>ZDB.D_DOC.TYPE</code>. 「type」- 文档类型，用于指定子表信息
     */
    public final TableField<DDocRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(128), this, "「type」- 文档类型，用于指定子表信息");
    /**
     * The column <code>ZDB.D_DOC.CATEGORY</code>. 「category」- 文档类别, 关联对应的分类
     */
    public final TableField<DDocRecord, String> CATEGORY = createField(DSL.name("CATEGORY"), SQLDataType.VARCHAR(36), this, "「category」- 文档类别, 关联对应的分类");
    /**
     * The column <code>ZDB.D_DOC.NAME</code>. 「name」- 文档名称
     */
    public final TableField<DDocRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 文档名称");
    /**
     * The column <code>ZDB.D_DOC.SN</code>. 「sn」- 文档编号
     */
    public final TableField<DDocRecord, String> SN = createField(DSL.name("SN"), SQLDataType.VARCHAR(255), this, "「sn」- 文档编号");
    /**
     * The column <code>ZDB.D_DOC.PREFIX</code>. 「prefix」- 文档前缀
     */
    public final TableField<DDocRecord, String> PREFIX = createField(DSL.name("PREFIX"), SQLDataType.VARCHAR(255), this, "「prefix」- 文档前缀");
    /**
     * The column <code>ZDB.D_DOC.BRIEF</code>. 「brief」- 文档简介
     */
    public final TableField<DDocRecord, String> BRIEF = createField(DSL.name("BRIEF"), SQLDataType.CLOB, this, "「brief」- 文档简介");
    /**
     * The column <code>ZDB.D_DOC.DESCRIPTION</code>. 「description」- 文档描述
     */
    public final TableField<DDocRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "「description」- 文档描述");
    /**
     * The column <code>ZDB.D_DOC.SCOPE</code>. 「scope」- 作用范围描述
     */
    public final TableField<DDocRecord, String> SCOPE = createField(DSL.name("SCOPE"), SQLDataType.CLOB, this, "「scope」- 作用范围描述");
    /**
     * The column <code>ZDB.D_DOC.VERSION</code>. 「version」- 文档版本, N.N
     */
    public final TableField<DDocRecord, String> VERSION = createField(DSL.name("VERSION"), SQLDataType.VARCHAR(32), this, "「version」- 文档版本, N.N");
    /**
     * The column <code>ZDB.D_DOC.AUTHOR</code>. 「author」- 文档作者
     */
    public final TableField<DDocRecord, String> AUTHOR = createField(DSL.name("AUTHOR"), SQLDataType.VARCHAR(128), this, "「author」- 文档作者");
    /**
     * The column <code>ZDB.D_DOC.AUTHOR_OR</code>. 「authorOr」- 第二作者、第三作者
     */
    public final TableField<DDocRecord, String> AUTHOR_OR = createField(DSL.name("AUTHOR_OR"), SQLDataType.CLOB, this, "「authorOr」- 第二作者、第三作者");
    /**
     * The column <code>ZDB.D_DOC.PUBLISHER</code>. 「publisher」- 发布者信息
     */
    public final TableField<DDocRecord, String> PUBLISHER = createField(DSL.name("PUBLISHER"), SQLDataType.CLOB, this, "「publisher」- 发布者信息");
    /**
     * The column <code>ZDB.D_DOC.PUBLISH_AT</code>. 「publishAt」- 发布时间或日期
     */
    public final TableField<DDocRecord, LocalDateTime> PUBLISH_AT = createField(DSL.name("PUBLISH_AT"), SQLDataType.LOCALDATETIME(0), this, "「publishAt」- 发布时间或日期");
    /**
     * The column <code>ZDB.D_DOC.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    public final TableField<DDocRecord, String> MODEL_ID = createField(DSL.name("MODEL_ID"), SQLDataType.VARCHAR(255), this, "「modelId」- 关联的模型identifier，用于描述");
    /**
     * The column <code>ZDB.D_DOC.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public final TableField<DDocRecord, String> MODEL_KEY = createField(DSL.name("MODEL_KEY"), SQLDataType.VARCHAR(36), this, "「modelKey」- 关联的模型记录ID，用于描述哪一个Model中的记录");
    /**
     * The column <code>ZDB.D_DOC.COPY</code>. 「copy」- 是否副本
     */
    public final TableField<DDocRecord, Boolean> COPY = createField(DSL.name("COPY"), SQLDataType.BIT, this, "「copy」- 是否副本");
    /**
     * The column <code>ZDB.D_DOC.COPY_TO</code>. 「copy」- 若是副本，则标注是哪份文档的副本
     */
    public final TableField<DDocRecord, String> COPY_TO = createField(DSL.name("COPY_TO"), SQLDataType.VARCHAR(36), this, "「copy」- 若是副本，则标注是哪份文档的副本");
    /**
     * The column <code>ZDB.D_DOC.FILE_NAME</code>. 「fileName」- 原始文件名，带扩展名
     */
    public final TableField<DDocRecord, String> FILE_NAME = createField(DSL.name("FILE_NAME"), SQLDataType.VARCHAR(255), this, "「fileName」- 原始文件名，带扩展名");
    /**
     * The column <code>ZDB.D_DOC.FILE_KEY</code>. 「fileKey」-
     * TPL模式中的文件唯一的key（全局唯一）
     */
    public final TableField<DDocRecord, String> FILE_KEY = createField(DSL.name("FILE_KEY"), SQLDataType.VARCHAR(255), this, "「fileKey」- TPL模式中的文件唯一的key（全局唯一）");
    /**
     * The column <code>ZDB.D_DOC.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<DDocRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>ZDB.D_DOC.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<DDocRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>ZDB.D_DOC.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<DDocRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>ZDB.D_DOC.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<DDocRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>ZDB.D_DOC.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<DDocRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>ZDB.D_DOC.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<DDocRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>ZDB.D_DOC.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<DDocRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>ZDB.D_DOC.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<DDocRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private DDoc(Name alias, Table<DDocRecord> aliased) {
        this(alias, aliased, null);
    }

    private DDoc(Name alias, Table<DDocRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.D_DOC</code> table reference
     */
    public DDoc(String alias) {
        this(DSL.name(alias), D_DOC);
    }

    /**
     * Create an aliased <code>ZDB.D_DOC</code> table reference
     */
    public DDoc(Name alias) {
        this(alias, D_DOC);
    }

    /**
     * Create a <code>ZDB.D_DOC</code> table reference
     */
    public DDoc() {
        this(DSL.name("D_DOC"), null);
    }

    public <O extends Record> DDoc(Table<O> child, ForeignKey<O, DDocRecord> key) {
        super(child, key, D_DOC);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DDocRecord> getRecordType() {
        return DDocRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<DDocRecord> getPrimaryKey() {
        return Keys.KEY_D_DOC_PRIMARY;
    }

    @Override
    public List<UniqueKey<DDocRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_D_DOC_CODE, Keys.KEY_D_DOC_NAME, Keys.KEY_D_DOC_FILE_KEY);
    }

    @Override
    public DDoc as(String alias) {
        return new DDoc(DSL.name(alias), this);
    }

    @Override
    public DDoc as(Name alias) {
        return new DDoc(alias, this);
    }

    @Override
    public DDoc as(Table<?> alias) {
        return new DDoc(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DDoc rename(String name) {
        return new DDoc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DDoc rename(Name name) {
        return new DDoc(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DDoc rename(Table<?> name) {
        return new DDoc(name.getQualifiedName(), null);
    }
}
