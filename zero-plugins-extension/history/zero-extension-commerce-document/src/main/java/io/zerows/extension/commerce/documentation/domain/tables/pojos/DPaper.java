/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.pojos;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.documentation.domain.tables.interfaces.IDPaper;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DPaper implements VertxPojo, IDPaper {

    private static final long serialVersionUID = 1L;

    private String key;
    private String code;
    private String name;
    private String type;
    private String status;
    private String brief;
    private String version;
    private Boolean simulate;
    private BigDecimal score;
    private String uiCover;
    private String uiBg;
    private String uiConfig;
    private String uiComponent;
    private String examId;
    private String modelId;
    private String modelKey;
    private Boolean copy;
    private String copyTo;
    private String sigma;
    private String language;
    private Boolean active;
    private String metadata;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public DPaper() {
    }

    public DPaper(IDPaper value) {
        this.key = value.getKey();
        this.code = value.getCode();
        this.name = value.getName();
        this.type = value.getType();
        this.status = value.getStatus();
        this.brief = value.getBrief();
        this.version = value.getVersion();
        this.simulate = value.getSimulate();
        this.score = value.getScore();
        this.uiCover = value.getUiCover();
        this.uiBg = value.getUiBg();
        this.uiConfig = value.getUiConfig();
        this.uiComponent = value.getUiComponent();
        this.examId = value.getExamId();
        this.modelId = value.getModelId();
        this.modelKey = value.getModelKey();
        this.copy = value.getCopy();
        this.copyTo = value.getCopyTo();
        this.sigma = value.getSigma();
        this.language = value.getLanguage();
        this.active = value.getActive();
        this.metadata = value.getMetadata();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public DPaper(
        String key,
        String code,
        String name,
        String type,
        String status,
        String brief,
        String version,
        Boolean simulate,
        BigDecimal score,
        String uiCover,
        String uiBg,
        String uiConfig,
        String uiComponent,
        String examId,
        String modelId,
        String modelKey,
        Boolean copy,
        String copyTo,
        String sigma,
        String language,
        Boolean active,
        String metadata,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.code = code;
        this.name = name;
        this.type = type;
        this.status = status;
        this.brief = brief;
        this.version = version;
        this.simulate = simulate;
        this.score = score;
        this.uiCover = uiCover;
        this.uiBg = uiBg;
        this.uiConfig = uiConfig;
        this.uiComponent = uiComponent;
        this.examId = examId;
        this.modelId = modelId;
        this.modelKey = modelKey;
        this.copy = copy;
        this.copyTo = copyTo;
        this.sigma = sigma;
        this.language = language;
        this.active = active;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

    public DPaper(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.D_PAPER.KEY</code>. 「key」- 问卷主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.KEY</code>. 「key」- 问卷主键
     */
    @Override
    public DPaper setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.CODE</code>. 「code」- 问卷编号
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.CODE</code>. 「code」- 问卷编号
     */
    @Override
    public DPaper setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.NAME</code>. 「name」- 问卷标题
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.NAME</code>. 「name」- 问卷标题
     */
    @Override
    public DPaper setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.TYPE</code>. 「type」- 问卷类型
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.TYPE</code>. 「type」- 问卷类型
     */
    @Override
    public DPaper setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.STATUS</code>. 「status」- 状态
     */
    @Override
    public String getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.STATUS</code>. 「status」- 状态
     */
    @Override
    public DPaper setStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.BRIEF</code>. 「brief」- 问卷简介
     */
    @Override
    public String getBrief() {
        return this.brief;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.BRIEF</code>. 「brief」- 问卷简介
     */
    @Override
    public DPaper setBrief(String brief) {
        this.brief = brief;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.VERSION</code>. 「version」- 问卷版本, N.N
     */
    @Override
    public String getVersion() {
        return this.version;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.VERSION</code>. 「version」- 问卷版本, N.N
     */
    @Override
    public DPaper setVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.SIMULATE</code>. 「simulate」- 是否模拟卷
     */
    @Override
    public Boolean getSimulate() {
        return this.simulate;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.SIMULATE</code>. 「simulate」- 是否模拟卷
     */
    @Override
    public DPaper setSimulate(Boolean simulate) {
        this.simulate = simulate;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.SCORE</code>. 「score」- 当前考卷总体分数
     */
    @Override
    public BigDecimal getScore() {
        return this.score;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.SCORE</code>. 「score」- 当前考卷总体分数
     */
    @Override
    public DPaper setScore(BigDecimal score) {
        this.score = score;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.UI_COVER</code>. 「uiCover」- 封面图片
     */
    @Override
    public String getUiCover() {
        return this.uiCover;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.UI_COVER</code>. 「uiCover」- 封面图片
     */
    @Override
    public DPaper setUiCover(String uiCover) {
        this.uiCover = uiCover;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.UI_BG</code>. 「uiBg」- 问卷背景图
     */
    @Override
    public String getUiBg() {
        return this.uiBg;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.UI_BG</code>. 「uiBg」- 问卷背景图
     */
    @Override
    public DPaper setUiBg(String uiBg) {
        this.uiBg = uiBg;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.UI_CONFIG</code>. 「uiConfig」- 问卷配置
     */
    @Override
    public String getUiConfig() {
        return this.uiConfig;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.UI_CONFIG</code>. 「uiConfig」- 问卷配置
     */
    @Override
    public DPaper setUiConfig(String uiConfig) {
        this.uiConfig = uiConfig;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.UI_COMPONENT</code>. 「uiComponent」-
     * 问卷呈现专用配置（扩展用）
     */
    @Override
    public String getUiComponent() {
        return this.uiComponent;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.UI_COMPONENT</code>. 「uiComponent」-
     * 问卷呈现专用配置（扩展用）
     */
    @Override
    public DPaper setUiComponent(String uiComponent) {
        this.uiComponent = uiComponent;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.EXAM_ID</code>. 「examId」- 关联的考试ID
     */
    @Override
    public String getExamId() {
        return this.examId;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.EXAM_ID</code>. 「examId」- 关联的考试ID
     */
    @Override
    public DPaper setExamId(String examId) {
        this.examId = examId;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public String getModelId() {
        return this.modelId;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public DPaper setModelId(String modelId) {
        this.modelId = modelId;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public String getModelKey() {
        return this.modelKey;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public DPaper setModelKey(String modelKey) {
        this.modelKey = modelKey;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.COPY</code>. 「copy」- 是否副本
     */
    @Override
    public Boolean getCopy() {
        return this.copy;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.COPY</code>. 「copy」- 是否副本
     */
    @Override
    public DPaper setCopy(Boolean copy) {
        this.copy = copy;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.COPY_TO</code>. 「copy」- 若是副本，则标注是哪份文档的副本
     */
    @Override
    public String getCopyTo() {
        return this.copyTo;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.COPY_TO</code>. 「copy」- 若是副本，则标注是哪份文档的副本
     */
    @Override
    public DPaper setCopyTo(String copyTo) {
        this.copyTo = copyTo;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public DPaper setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public DPaper setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public DPaper setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public DPaper setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public DPaper setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public DPaper setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public DPaper setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>ZDB.D_PAPER.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public DPaper setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final DPaper other = (DPaper) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        } else if (!this.key.equals(other.key))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        } else if (!this.code.equals(other.code))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        } else if (!this.name.equals(other.name))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        } else if (!this.type.equals(other.type))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        } else if (!this.status.equals(other.status))
            return false;
        if (this.brief == null) {
            if (other.brief != null)
                return false;
        } else if (!this.brief.equals(other.brief))
            return false;
        if (this.version == null) {
            if (other.version != null)
                return false;
        } else if (!this.version.equals(other.version))
            return false;
        if (this.simulate == null) {
            if (other.simulate != null)
                return false;
        } else if (!this.simulate.equals(other.simulate))
            return false;
        if (this.score == null) {
            if (other.score != null)
                return false;
        } else if (!this.score.equals(other.score))
            return false;
        if (this.uiCover == null) {
            if (other.uiCover != null)
                return false;
        } else if (!this.uiCover.equals(other.uiCover))
            return false;
        if (this.uiBg == null) {
            if (other.uiBg != null)
                return false;
        } else if (!this.uiBg.equals(other.uiBg))
            return false;
        if (this.uiConfig == null) {
            if (other.uiConfig != null)
                return false;
        } else if (!this.uiConfig.equals(other.uiConfig))
            return false;
        if (this.uiComponent == null) {
            if (other.uiComponent != null)
                return false;
        } else if (!this.uiComponent.equals(other.uiComponent))
            return false;
        if (this.examId == null) {
            if (other.examId != null)
                return false;
        } else if (!this.examId.equals(other.examId))
            return false;
        if (this.modelId == null) {
            if (other.modelId != null)
                return false;
        } else if (!this.modelId.equals(other.modelId))
            return false;
        if (this.modelKey == null) {
            if (other.modelKey != null)
                return false;
        } else if (!this.modelKey.equals(other.modelKey))
            return false;
        if (this.copy == null) {
            if (other.copy != null)
                return false;
        } else if (!this.copy.equals(other.copy))
            return false;
        if (this.copyTo == null) {
            if (other.copyTo != null)
                return false;
        } else if (!this.copyTo.equals(other.copyTo))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        } else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        } else if (!this.language.equals(other.language))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        } else if (!this.active.equals(other.active))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        } else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        } else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        } else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        } else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        } else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.brief == null) ? 0 : this.brief.hashCode());
        result = prime * result + ((this.version == null) ? 0 : this.version.hashCode());
        result = prime * result + ((this.simulate == null) ? 0 : this.simulate.hashCode());
        result = prime * result + ((this.score == null) ? 0 : this.score.hashCode());
        result = prime * result + ((this.uiCover == null) ? 0 : this.uiCover.hashCode());
        result = prime * result + ((this.uiBg == null) ? 0 : this.uiBg.hashCode());
        result = prime * result + ((this.uiConfig == null) ? 0 : this.uiConfig.hashCode());
        result = prime * result + ((this.uiComponent == null) ? 0 : this.uiComponent.hashCode());
        result = prime * result + ((this.examId == null) ? 0 : this.examId.hashCode());
        result = prime * result + ((this.modelId == null) ? 0 : this.modelId.hashCode());
        result = prime * result + ((this.modelKey == null) ? 0 : this.modelKey.hashCode());
        result = prime * result + ((this.copy == null) ? 0 : this.copy.hashCode());
        result = prime * result + ((this.copyTo == null) ? 0 : this.copyTo.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DPaper (");

        sb.append(key);
        sb.append(", ").append(code);
        sb.append(", ").append(name);
        sb.append(", ").append(type);
        sb.append(", ").append(status);
        sb.append(", ").append(brief);
        sb.append(", ").append(version);
        sb.append(", ").append(simulate);
        sb.append(", ").append(score);
        sb.append(", ").append(uiCover);
        sb.append(", ").append(uiBg);
        sb.append(", ").append(uiConfig);
        sb.append(", ").append(uiComponent);
        sb.append(", ").append(examId);
        sb.append(", ").append(modelId);
        sb.append(", ").append(modelKey);
        sb.append(", ").append(copy);
        sb.append(", ").append(copyTo);
        sb.append(", ").append(sigma);
        sb.append(", ").append(language);
        sb.append(", ").append(active);
        sb.append(", ").append(metadata);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDPaper from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setName(from.getName());
        setType(from.getType());
        setStatus(from.getStatus());
        setBrief(from.getBrief());
        setVersion(from.getVersion());
        setSimulate(from.getSimulate());
        setScore(from.getScore());
        setUiCover(from.getUiCover());
        setUiBg(from.getUiBg());
        setUiConfig(from.getUiConfig());
        setUiComponent(from.getUiComponent());
        setExamId(from.getExamId());
        setModelId(from.getModelId());
        setModelKey(from.getModelKey());
        setCopy(from.getCopy());
        setCopyTo(from.getCopyTo());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IDPaper> E into(E into) {
        into.from(this);
        return into;
    }
}
