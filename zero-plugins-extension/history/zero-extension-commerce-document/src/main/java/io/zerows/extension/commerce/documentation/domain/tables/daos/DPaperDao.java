/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.commerce.documentation.domain.tables.DPaper;
import io.zerows.extension.commerce.documentation.domain.tables.records.DPaperRecord;
import org.jooq.Configuration;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DPaperDao extends AbstractVertxDAO<DPaperRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper, String, Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>>, Future<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DPaperRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public DPaperDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(DPaper.D_PAPER, io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper.class, new JDBCClassicQueryExecutor<DPaperRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper, String>(configuration, io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper.class, vertx));
    }

    @Override
    protected String getId(io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByCode(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByCode(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByName(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByName(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByType(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByType(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByStatus(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.STATUS.in(values));
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByStatus(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.STATUS.in(values), limit);
    }

    /**
     * Find records that have <code>BRIEF IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByBrief(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.BRIEF.in(values));
    }

    /**
     * Find records that have <code>BRIEF IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByBrief(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.BRIEF.in(values), limit);
    }

    /**
     * Find records that have <code>VERSION IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByVersion(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.VERSION.in(values));
    }

    /**
     * Find records that have <code>VERSION IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByVersion(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.VERSION.in(values), limit);
    }

    /**
     * Find records that have <code>SIMULATE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyBySimulate(Collection<Boolean> values) {
        return findManyByCondition(DPaper.D_PAPER.SIMULATE.in(values));
    }

    /**
     * Find records that have <code>SIMULATE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyBySimulate(Collection<Boolean> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.SIMULATE.in(values), limit);
    }

    /**
     * Find records that have <code>SCORE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByScore(Collection<BigDecimal> values) {
        return findManyByCondition(DPaper.D_PAPER.SCORE.in(values));
    }

    /**
     * Find records that have <code>SCORE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByScore(Collection<BigDecimal> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.SCORE.in(values), limit);
    }

    /**
     * Find records that have <code>UI_COVER IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByUiCover(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.UI_COVER.in(values));
    }

    /**
     * Find records that have <code>UI_COVER IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByUiCover(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.UI_COVER.in(values), limit);
    }

    /**
     * Find records that have <code>UI_BG IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByUiBg(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.UI_BG.in(values));
    }

    /**
     * Find records that have <code>UI_BG IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByUiBg(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.UI_BG.in(values), limit);
    }

    /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByUiConfig(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.UI_CONFIG.in(values));
    }

    /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByUiConfig(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.UI_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>UI_COMPONENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByUiComponent(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.UI_COMPONENT.in(values));
    }

    /**
     * Find records that have <code>UI_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByUiComponent(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.UI_COMPONENT.in(values), limit);
    }

    /**
     * Find records that have <code>EXAM_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByExamId(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.EXAM_ID.in(values));
    }

    /**
     * Find records that have <code>EXAM_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByExamId(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.EXAM_ID.in(values), limit);
    }

    /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByModelId(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.MODEL_ID.in(values));
    }

    /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByModelId(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.MODEL_ID.in(values), limit);
    }

    /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByModelKey(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.MODEL_KEY.in(values));
    }

    /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByModelKey(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.MODEL_KEY.in(values), limit);
    }

    /**
     * Find records that have <code>COPY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByCopy(Collection<Boolean> values) {
        return findManyByCondition(DPaper.D_PAPER.COPY.in(values));
    }

    /**
     * Find records that have <code>COPY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByCopy(Collection<Boolean> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.COPY.in(values), limit);
    }

    /**
     * Find records that have <code>COPY_TO IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByCopyTo(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.COPY_TO.in(values));
    }

    /**
     * Find records that have <code>COPY_TO IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByCopyTo(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.COPY_TO.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyBySigma(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyBySigma(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByLanguage(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByLanguage(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByActive(Collection<Boolean> values) {
        return findManyByCondition(DPaper.D_PAPER.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByActive(Collection<Boolean> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByMetadata(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByMetadata(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByCreatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DPaper.D_PAPER.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByCreatedBy(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByCreatedBy(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DPaper.D_PAPER.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByUpdatedBy(Collection<String> values) {
        return findManyByCondition(DPaper.D_PAPER.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper>> findManyByUpdatedBy(Collection<String> values, int limit) {
        return findManyByCondition(DPaper.D_PAPER.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<DPaperRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<DPaperRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper, String>) super.queryExecutor();
    }
}
