/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.commerce.documentation.domain.tables.DExam;
import io.zerows.extension.commerce.documentation.domain.tables.records.DExamRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DExamDao extends AbstractVertxDAO<DExamRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam, String, Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>>, Future<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DExamRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public DExamDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(DExam.D_EXAM, io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam.class, new JDBCClassicQueryExecutor<DExamRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam, String>(configuration, io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam.class, vertx));
    }

    @Override
    protected String getId(io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByCode(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByCode(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByName(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByName(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>SUBJECT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyBySubject(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.SUBJECT.in(values));
    }

    /**
     * Find records that have <code>SUBJECT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyBySubject(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.SUBJECT.in(values), limit);
    }

    /**
     * Find records that have <code>BRIEF IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByBrief(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.BRIEF.in(values));
    }

    /**
     * Find records that have <code>BRIEF IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByBrief(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.BRIEF.in(values), limit);
    }

    /**
     * Find records that have <code>SN IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyBySn(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.SN.in(values));
    }

    /**
     * Find records that have <code>SN IN (values)</code> asynchronously limited
     * by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyBySn(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.SN.in(values), limit);
    }

    /**
     * Find records that have <code>DURATION IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByDuration(Collection<Integer> values) {
        return findManyByCondition(DExam.D_EXAM.DURATION.in(values));
    }

    /**
     * Find records that have <code>DURATION IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByDuration(Collection<Integer> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.DURATION.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByType(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByType(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByStatus(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.STATUS.in(values));
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByStatus(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.STATUS.in(values), limit);
    }

    /**
     * Find records that have <code>ONLINE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByOnline(Collection<Boolean> values) {
        return findManyByCondition(DExam.D_EXAM.ONLINE.in(values));
    }

    /**
     * Find records that have <code>ONLINE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByOnline(Collection<Boolean> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.ONLINE.in(values), limit);
    }

    /**
     * Find records that have <code>ADDR_URL IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByAddrUrl(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.ADDR_URL.in(values));
    }

    /**
     * Find records that have <code>ADDR_URL IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByAddrUrl(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.ADDR_URL.in(values), limit);
    }

    /**
     * Find records that have <code>ADDR_LOCATION IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByAddrLocation(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.ADDR_LOCATION.in(values));
    }

    /**
     * Find records that have <code>ADDR_LOCATION IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByAddrLocation(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.ADDR_LOCATION.in(values), limit);
    }

    /**
     * Find records that have <code>ADDR_CONTENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByAddrContent(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.ADDR_CONTENT.in(values));
    }

    /**
     * Find records that have <code>ADDR_CONTENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByAddrContent(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.ADDR_CONTENT.in(values), limit);
    }

    /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByModelId(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.MODEL_ID.in(values));
    }

    /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByModelId(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.MODEL_ID.in(values), limit);
    }

    /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByModelKey(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.MODEL_KEY.in(values));
    }

    /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByModelKey(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.MODEL_KEY.in(values), limit);
    }

    /**
     * Find records that have <code>ISSUER IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByIssuer(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.ISSUER.in(values));
    }

    /**
     * Find records that have <code>ISSUER IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByIssuer(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.ISSUER.in(values), limit);
    }

    /**
     * Find records that have <code>ISSUER_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByIssuerAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DExam.D_EXAM.ISSUER_AT.in(values));
    }

    /**
     * Find records that have <code>ISSUER_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByIssuerAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.ISSUER_AT.in(values), limit);
    }

    /**
     * Find records that have <code>START_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByStartAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DExam.D_EXAM.START_AT.in(values));
    }

    /**
     * Find records that have <code>START_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByStartAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.START_AT.in(values), limit);
    }

    /**
     * Find records that have <code>END_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByEndAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DExam.D_EXAM.END_AT.in(values));
    }

    /**
     * Find records that have <code>END_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByEndAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.END_AT.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyBySigma(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyBySigma(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByLanguage(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByLanguage(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByActive(Collection<Boolean> values) {
        return findManyByCondition(DExam.D_EXAM.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByActive(Collection<Boolean> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByMetadata(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByMetadata(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByCreatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DExam.D_EXAM.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByCreatedBy(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByCreatedBy(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DExam.D_EXAM.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByUpdatedBy(Collection<String> values) {
        return findManyByCondition(DExam.D_EXAM.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam>> findManyByUpdatedBy(Collection<String> values, int limit) {
        return findManyByCondition(DExam.D_EXAM.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<DExamRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<DExamRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DExam, String>) super.queryExecutor();
    }
}
