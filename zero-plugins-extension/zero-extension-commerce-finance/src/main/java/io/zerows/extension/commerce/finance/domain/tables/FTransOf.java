/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.finance.domain.tables;


import io.zerows.extension.commerce.finance.domain.Indexes;
import io.zerows.extension.commerce.finance.domain.Keys;
import io.zerows.extension.commerce.finance.domain.Zdb;
import io.zerows.extension.commerce.finance.domain.tables.records.FTransOfRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FTransOf extends TableImpl<FTransOfRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.F_TRANS_OF</code>
     */
    public static final FTransOf F_TRANS_OF = new FTransOf();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FTransOfRecord> getRecordType() {
        return FTransOfRecord.class;
    }

    /**
     * The column <code>ZDB.F_TRANS_OF.TRANS_ID</code>. 「transId」- 关联交易ID
     */
    public final TableField<FTransOfRecord, String> TRANS_ID = createField(DSL.name("TRANS_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「transId」- 关联交易ID");

    /**
     * The column <code>ZDB.F_TRANS_OF.OBJECT_TYPE</code>. 「objectType」- 交易目标类型
     */
    public final TableField<FTransOfRecord, String> OBJECT_TYPE = createField(DSL.name("OBJECT_TYPE"), SQLDataType.VARCHAR(64).nullable(false), this, "「objectType」- 交易目标类型");

    /**
     * The column <code>ZDB.F_TRANS_OF.OBJECT_ID</code>. 「objectId」- 关联目标ID
     */
    public final TableField<FTransOfRecord, String> OBJECT_ID = createField(DSL.name("OBJECT_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「objectId」- 关联目标ID");

    /**
     * The column <code>ZDB.F_TRANS_OF.COMMENT</code>. 「comment」 - 关联备注
     */
    public final TableField<FTransOfRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」 - 关联备注");

    private FTransOf(Name alias, Table<FTransOfRecord> aliased) {
        this(alias, aliased, null);
    }

    private FTransOf(Name alias, Table<FTransOfRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.F_TRANS_OF</code> table reference
     */
    public FTransOf(String alias) {
        this(DSL.name(alias), F_TRANS_OF);
    }

    /**
     * Create an aliased <code>ZDB.F_TRANS_OF</code> table reference
     */
    public FTransOf(Name alias) {
        this(alias, F_TRANS_OF);
    }

    /**
     * Create a <code>ZDB.F_TRANS_OF</code> table reference
     */
    public FTransOf() {
        this(DSL.name("F_TRANS_OF"), null);
    }

    public <O extends Record> FTransOf(Table<O> child, ForeignKey<O, FTransOfRecord> key) {
        super(child, key, F_TRANS_OF);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.F_TRANS_OF_IDX_F_TRANS_OF_TRANS_ID);
    }

    @Override
    public UniqueKey<FTransOfRecord> getPrimaryKey() {
        return Keys.KEY_F_TRANS_OF_PRIMARY;
    }

    @Override
    public FTransOf as(String alias) {
        return new FTransOf(DSL.name(alias), this);
    }

    @Override
    public FTransOf as(Name alias) {
        return new FTransOf(alias, this);
    }

    @Override
    public FTransOf as(Table<?> alias) {
        return new FTransOf(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FTransOf rename(String name) {
        return new FTransOf(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FTransOf rename(Name name) {
        return new FTransOf(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FTransOf rename(Table<?> name) {
        return new FTransOf(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
