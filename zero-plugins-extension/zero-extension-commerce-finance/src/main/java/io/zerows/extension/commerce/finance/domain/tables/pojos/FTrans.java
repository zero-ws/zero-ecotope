/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.finance.domain.tables.pojos;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.finance.domain.tables.interfaces.IFTrans;

import java.math.BigDecimal;
import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FTrans implements VertxPojo, IFTrans {

    private static final long serialVersionUID = 1L;

    private String key;
    private String name;
    private String code;
    private String serial;
    private String type;
    private String status;
    private BigDecimal amount;
    private BigDecimal amountPre;
    private BigDecimal amountGap;
    private String rounded;
    private Boolean prepay;
    private String comment;
    private LocalDateTime startAt;
    private LocalDateTime endAt;
    private String groupBy;
    private String sigma;
    private String language;
    private Boolean active;
    private String metadata;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public FTrans() {}

    public FTrans(IFTrans value) {
        this.key = value.getKey();
        this.name = value.getName();
        this.code = value.getCode();
        this.serial = value.getSerial();
        this.type = value.getType();
        this.status = value.getStatus();
        this.amount = value.getAmount();
        this.amountPre = value.getAmountPre();
        this.amountGap = value.getAmountGap();
        this.rounded = value.getRounded();
        this.prepay = value.getPrepay();
        this.comment = value.getComment();
        this.startAt = value.getStartAt();
        this.endAt = value.getEndAt();
        this.groupBy = value.getGroupBy();
        this.sigma = value.getSigma();
        this.language = value.getLanguage();
        this.active = value.getActive();
        this.metadata = value.getMetadata();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public FTrans(
        String key,
        String name,
        String code,
        String serial,
        String type,
        String status,
        BigDecimal amount,
        BigDecimal amountPre,
        BigDecimal amountGap,
        String rounded,
        Boolean prepay,
        String comment,
        LocalDateTime startAt,
        LocalDateTime endAt,
        String groupBy,
        String sigma,
        String language,
        Boolean active,
        String metadata,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.name = name;
        this.code = code;
        this.serial = serial;
        this.type = type;
        this.status = status;
        this.amount = amount;
        this.amountPre = amountPre;
        this.amountGap = amountGap;
        this.rounded = rounded;
        this.prepay = prepay;
        this.comment = comment;
        this.startAt = startAt;
        this.endAt = endAt;
        this.groupBy = groupBy;
        this.sigma = sigma;
        this.language = language;
        this.active = active;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public FTrans(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>ZDB.F_TRANS.KEY</code>. 「key」- 交易单主键ID
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.KEY</code>. 「key」- 交易单主键ID
     */
    @Override
    public FTrans setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.NAME</code>. 「name」 - 交易单标题
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.NAME</code>. 「name」 - 交易单标题
     */
    @Override
    public FTrans setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.CODE</code>. 「code」 - 交易单编号
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.CODE</code>. 「code」 - 交易单编号
     */
    @Override
    public FTrans setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.SERIAL</code>. 「serial」 - 交易单据号
     */
    @Override
    public String getSerial() {
        return this.serial;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.SERIAL</code>. 「serial」 - 交易单据号
     */
    @Override
    public FTrans setSerial(String serial) {
        this.serial = serial;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.TYPE</code>. 「type」 - 交易单类型
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.TYPE</code>. 「type」 - 交易单类型
     */
    @Override
    public FTrans setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.STATUS</code>. 「status」 - 交易状态
     */
    @Override
    public String getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.STATUS</code>. 「status」 - 交易状态
     */
    @Override
    public FTrans setStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.AMOUNT</code>. 「amount」——价税合计，所有明细对应的实际结算金额
     */
    @Override
    public BigDecimal getAmount() {
        return this.amount;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.AMOUNT</code>. 「amount」——价税合计，所有明细对应的实际结算金额
     */
    @Override
    public FTrans setAmount(BigDecimal amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.AMOUNT_PRE</code>. 「amountPre」预付金额
     */
    @Override
    public BigDecimal getAmountPre() {
        return this.amountPre;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.AMOUNT_PRE</code>. 「amountPre」预付金额
     */
    @Override
    public FTrans setAmountPre(BigDecimal amountPre) {
        this.amountPre = amountPre;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.AMOUNT_GAP</code>. 「amountGap」——差价，根据
     * rounded 计算差价
     */
    @Override
    public BigDecimal getAmountGap() {
        return this.amountGap;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.AMOUNT_GAP</code>. 「amountGap」——差价，根据
     * rounded 计算差价
     */
    @Override
    public FTrans setAmountGap(BigDecimal amountGap) {
        this.amountGap = amountGap;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.ROUNDED</code>. 「rounded」抹零方式，不同抹零方式会影响验证规则
     */
    @Override
    public String getRounded() {
        return this.rounded;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.ROUNDED</code>. 「rounded」抹零方式，不同抹零方式会影响验证规则
     */
    @Override
    public FTrans setRounded(String rounded) {
        this.rounded = rounded;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.PREPAY</code>. 「prepay」- 是否预付
     */
    @Override
    public Boolean getPrepay() {
        return this.prepay;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.PREPAY</code>. 「prepay」- 是否预付
     */
    @Override
    public FTrans setPrepay(Boolean prepay) {
        this.prepay = prepay;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.COMMENT</code>. 「comment」 - 备注
     */
    @Override
    public String getComment() {
        return this.comment;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.COMMENT</code>. 「comment」 - 备注
     */
    @Override
    public FTrans setComment(String comment) {
        this.comment = comment;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.START_AT</code>. 「startAt」- 开始时间
     */
    @Override
    public LocalDateTime getStartAt() {
        return this.startAt;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.START_AT</code>. 「startAt」- 开始时间
     */
    @Override
    public FTrans setStartAt(LocalDateTime startAt) {
        this.startAt = startAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.END_AT</code>. 「endAt」- 结束时间
     */
    @Override
    public LocalDateTime getEndAt() {
        return this.endAt;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.END_AT</code>. 「endAt」- 结束时间
     */
    @Override
    public FTrans setEndAt(LocalDateTime endAt) {
        this.endAt = endAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.GROUP_BY</code>. 「groupBy」- 分组
     */
    @Override
    public String getGroupBy() {
        return this.groupBy;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.GROUP_BY</code>. 「groupBy」- 分组
     */
    @Override
    public FTrans setGroupBy(String groupBy) {
        this.groupBy = groupBy;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public FTrans setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public FTrans setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public FTrans setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public FTrans setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public FTrans setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public FTrans setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public FTrans setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>ZDB.F_TRANS.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public FTrans setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final FTrans other = (FTrans) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        }
        else if (!this.code.equals(other.code))
            return false;
        if (this.serial == null) {
            if (other.serial != null)
                return false;
        }
        else if (!this.serial.equals(other.serial))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        if (this.amount == null) {
            if (other.amount != null)
                return false;
        }
        else if (!this.amount.equals(other.amount))
            return false;
        if (this.amountPre == null) {
            if (other.amountPre != null)
                return false;
        }
        else if (!this.amountPre.equals(other.amountPre))
            return false;
        if (this.amountGap == null) {
            if (other.amountGap != null)
                return false;
        }
        else if (!this.amountGap.equals(other.amountGap))
            return false;
        if (this.rounded == null) {
            if (other.rounded != null)
                return false;
        }
        else if (!this.rounded.equals(other.rounded))
            return false;
        if (this.prepay == null) {
            if (other.prepay != null)
                return false;
        }
        else if (!this.prepay.equals(other.prepay))
            return false;
        if (this.comment == null) {
            if (other.comment != null)
                return false;
        }
        else if (!this.comment.equals(other.comment))
            return false;
        if (this.startAt == null) {
            if (other.startAt != null)
                return false;
        }
        else if (!this.startAt.equals(other.startAt))
            return false;
        if (this.endAt == null) {
            if (other.endAt != null)
                return false;
        }
        else if (!this.endAt.equals(other.endAt))
            return false;
        if (this.groupBy == null) {
            if (other.groupBy != null)
                return false;
        }
        else if (!this.groupBy.equals(other.groupBy))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        }
        else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        }
        else if (!this.language.equals(other.language))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        }
        else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.serial == null) ? 0 : this.serial.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.amount == null) ? 0 : this.amount.hashCode());
        result = prime * result + ((this.amountPre == null) ? 0 : this.amountPre.hashCode());
        result = prime * result + ((this.amountGap == null) ? 0 : this.amountGap.hashCode());
        result = prime * result + ((this.rounded == null) ? 0 : this.rounded.hashCode());
        result = prime * result + ((this.prepay == null) ? 0 : this.prepay.hashCode());
        result = prime * result + ((this.comment == null) ? 0 : this.comment.hashCode());
        result = prime * result + ((this.startAt == null) ? 0 : this.startAt.hashCode());
        result = prime * result + ((this.endAt == null) ? 0 : this.endAt.hashCode());
        result = prime * result + ((this.groupBy == null) ? 0 : this.groupBy.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("FTrans (");

        sb.append(key);
        sb.append(", ").append(name);
        sb.append(", ").append(code);
        sb.append(", ").append(serial);
        sb.append(", ").append(type);
        sb.append(", ").append(status);
        sb.append(", ").append(amount);
        sb.append(", ").append(amountPre);
        sb.append(", ").append(amountGap);
        sb.append(", ").append(rounded);
        sb.append(", ").append(prepay);
        sb.append(", ").append(comment);
        sb.append(", ").append(startAt);
        sb.append(", ").append(endAt);
        sb.append(", ").append(groupBy);
        sb.append(", ").append(sigma);
        sb.append(", ").append(language);
        sb.append(", ").append(active);
        sb.append(", ").append(metadata);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IFTrans from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setSerial(from.getSerial());
        setType(from.getType());
        setStatus(from.getStatus());
        setAmount(from.getAmount());
        setAmountPre(from.getAmountPre());
        setAmountGap(from.getAmountGap());
        setRounded(from.getRounded());
        setPrepay(from.getPrepay());
        setComment(from.getComment());
        setStartAt(from.getStartAt());
        setEndAt(from.getEndAt());
        setGroupBy(from.getGroupBy());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IFTrans> E into(E into) {
        into.from(this);
        return into;
    }
}
