/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.lbs.domain.tables;


import io.zerows.extension.commerce.lbs.domain.Keys;
import io.zerows.extension.commerce.lbs.domain.Zdb;
import io.zerows.extension.commerce.lbs.domain.tables.records.LTentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LTent extends TableImpl<LTentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.L_TENT</code>
     */
    public static final LTent L_TENT = new LTent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LTentRecord> getRecordType() {
        return LTentRecord.class;
    }

    /**
     * The column <code>ZDB.L_TENT.KEY</code>. 「key」- 主键
     */
    public final TableField<LTentRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 主键");

    /**
     * The column <code>ZDB.L_TENT.NAME</code>. 「name」- 名称
     */
    public final TableField<LTentRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(32).nullable(false), this, "「name」- 名称");

    /**
     * The column <code>ZDB.L_TENT.CODE</code>. 「code」- 编码
     */
    public final TableField<LTentRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(36), this, "「code」- 编码");

    /**
     * The column <code>ZDB.L_TENT.CONTACT_PHONE</code>. 「contactPhone」- 联系电话
     */
    public final TableField<LTentRecord, String> CONTACT_PHONE = createField(DSL.name("CONTACT_PHONE"), SQLDataType.VARCHAR(20), this, "「contactPhone」- 联系电话");

    /**
     * The column <code>ZDB.L_TENT.CONTACT_NAME</code>. 「contactName」- 联系人姓名
     */
    public final TableField<LTentRecord, String> CONTACT_NAME = createField(DSL.name("CONTACT_NAME"), SQLDataType.VARCHAR(64), this, "「contactName」- 联系人姓名");

    /**
     * The column <code>ZDB.L_TENT.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<LTentRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");

    /**
     * The column <code>ZDB.L_TENT.ORDER</code>. 「order」- 排序
     */
    public final TableField<LTentRecord, Integer> ORDER = createField(DSL.name("ORDER"), SQLDataType.INTEGER, this, "「order」- 排序");

    /**
     * The column <code>ZDB.L_TENT.LOCATION_ID</code>. 「locationId」- 关联地址ID
     */
    public final TableField<LTentRecord, String> LOCATION_ID = createField(DSL.name("LOCATION_ID"), SQLDataType.VARCHAR(36), this, "「locationId」- 关联地址ID");

    /**
     * The column <code>ZDB.L_TENT.YARD_ID</code>. 「yardId」- 关联小区ID
     */
    public final TableField<LTentRecord, String> YARD_ID = createField(DSL.name("YARD_ID"), SQLDataType.VARCHAR(36), this, "「yardId」- 关联小区ID");

    /**
     * The column <code>ZDB.L_TENT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<LTentRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>ZDB.L_TENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<LTentRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");

    /**
     * The column <code>ZDB.L_TENT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<LTentRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");

    /**
     * The column <code>ZDB.L_TENT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<LTentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");

    /**
     * The column <code>ZDB.L_TENT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<LTentRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");

    /**
     * The column <code>ZDB.L_TENT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<LTentRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");

    /**
     * The column <code>ZDB.L_TENT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<LTentRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private LTent(Name alias, Table<LTentRecord> aliased) {
        this(alias, aliased, null);
    }

    private LTent(Name alias, Table<LTentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.L_TENT</code> table reference
     */
    public LTent(String alias) {
        this(DSL.name(alias), L_TENT);
    }

    /**
     * Create an aliased <code>ZDB.L_TENT</code> table reference
     */
    public LTent(Name alias) {
        this(alias, L_TENT);
    }

    /**
     * Create a <code>ZDB.L_TENT</code> table reference
     */
    public LTent() {
        this(DSL.name("L_TENT"), null);
    }

    public <O extends Record> LTent(Table<O> child, ForeignKey<O, LTentRecord> key) {
        super(child, key, L_TENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<LTentRecord> getPrimaryKey() {
        return Keys.KEY_L_TENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<LTentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_L_TENT_CODE);
    }

    @Override
    public LTent as(String alias) {
        return new LTent(DSL.name(alias), this);
    }

    @Override
    public LTent as(Name alias) {
        return new LTent(alias, this);
    }

    @Override
    public LTent as(Table<?> alias) {
        return new LTent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public LTent rename(String name) {
        return new LTent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LTent rename(Name name) {
        return new LTent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public LTent rename(Table<?> name) {
        return new LTent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, String, String, String, String, String, Integer, String, String, Boolean, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
