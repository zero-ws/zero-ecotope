/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.ambient.domain.tables;


import io.zerows.extension.runtime.ambient.domain.Keys;
import io.zerows.extension.runtime.ambient.domain.Zdb;
import io.zerows.extension.runtime.ambient.domain.tables.records.RTagObjectRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RTagObject extends TableImpl<RTagObjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.R_TAG_OBJECT</code>
     */
    public static final RTagObject R_TAG_OBJECT = new RTagObject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RTagObjectRecord> getRecordType() {
        return RTagObjectRecord.class;
    }

    /**
     * The column <code>ZDB.R_TAG_OBJECT.TAG_ID</code>. 「tagId」- 标签ID
     */
    public final TableField<RTagObjectRecord, String> TAG_ID = createField(DSL.name("TAG_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「tagId」- 标签ID");

    /**
     * The column <code>ZDB.R_TAG_OBJECT.ENTITY_TYPE</code>. 「entityType」- 关联类型
     */
    public final TableField<RTagObjectRecord, String> ENTITY_TYPE = createField(DSL.name("ENTITY_TYPE"), SQLDataType.VARCHAR(64).nullable(false), this, "「entityType」- 关联类型");

    /**
     * The column <code>ZDB.R_TAG_OBJECT.ENTITY_ID</code>. 「entityId」- 关联实体ID
     */
    public final TableField<RTagObjectRecord, String> ENTITY_ID = createField(DSL.name("ENTITY_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「entityId」- 关联实体ID");

    /**
     * The column <code>ZDB.R_TAG_OBJECT.LINK_COMPONENT</code>. 「linkComponent」-
     * 关联执行组件（扩展用）
     */
    public final TableField<RTagObjectRecord, String> LINK_COMPONENT = createField(DSL.name("LINK_COMPONENT"), SQLDataType.VARCHAR(255), this, "「linkComponent」- 关联执行组件（扩展用）");

    /**
     * The column <code>ZDB.R_TAG_OBJECT.COMMENT</code>. 「comment」- 关系备注
     */
    public final TableField<RTagObjectRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB, this, "「comment」- 关系备注");

    private RTagObject(Name alias, Table<RTagObjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private RTagObject(Name alias, Table<RTagObjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.R_TAG_OBJECT</code> table reference
     */
    public RTagObject(String alias) {
        this(DSL.name(alias), R_TAG_OBJECT);
    }

    /**
     * Create an aliased <code>ZDB.R_TAG_OBJECT</code> table reference
     */
    public RTagObject(Name alias) {
        this(alias, R_TAG_OBJECT);
    }

    /**
     * Create a <code>ZDB.R_TAG_OBJECT</code> table reference
     */
    public RTagObject() {
        this(DSL.name("R_TAG_OBJECT"), null);
    }

    public <O extends Record> RTagObject(Table<O> child, ForeignKey<O, RTagObjectRecord> key) {
        super(child, key, R_TAG_OBJECT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<RTagObjectRecord> getPrimaryKey() {
        return Keys.KEY_R_TAG_OBJECT_PRIMARY;
    }

    @Override
    public RTagObject as(String alias) {
        return new RTagObject(DSL.name(alias), this);
    }

    @Override
    public RTagObject as(Name alias) {
        return new RTagObject(alias, this);
    }

    @Override
    public RTagObject as(Table<?> alias) {
        return new RTagObject(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RTagObject rename(String name) {
        return new RTagObject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RTagObject rename(Name name) {
        return new RTagObject(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RTagObject rename(Table<?> name) {
        return new RTagObject(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
