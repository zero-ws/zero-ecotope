# -----------------------------------------------------------------
# 🚀 启动专用配置
boot:
  pre: # ⚡ 预处理组件和配置 (应用启动前的初始化工作)
    component: # 🔧 预处理组件列表
    # 例如：数据源初始化、缓存预热、配置加载等组件
    config: # 📋 预处理配置参数
    # 预处理阶段的特定配置项，如初始化顺序、依赖关系等

  on: # 🎯 启动组件和配置 (应用启动时的组件加载)
    component: # 🔌 启动时激活的组件
    # 例如：数据库连接池、消息队列、定时任务等核心组件
    config: # 📋 启动配置参数
    # 启动阶段的配置项，如启动顺序、启动超时时间等

# -----------------------------------------------------------------
# 🌐 服务器专用配置
server:
  port: ${Z_API_PORT:6083}                   # ---> 💻️ 服务端口
  address: ${Z_API_HOST:0.0.0.0}             # ---> 💻️ 服务器绑定地址
  options: # 🎯 此处结构直接对接 io.vertx.core.http.HttpServerOptions
    ssl: ${Z_API_SSL}                        # 启用 HTTPS (环境变量控制)
    useAlpn: true                            # 启用 ALPN 支持 HTTP/2
    keyStoreOptions: # 🔐 SSL 密钥库配置
      type: jks                              # 密钥库类型 (JKS/PKCS12/PFX)
      path: keys/keystore-hotel.jks          # 密钥库文件路径
      password: "app.hotel"                  # 密钥库访问密码

  # ⚠️ 注意：新版本 WebSocket 只能在 HTTP Server 基础之上进行展开，等价于它无法支持独立的 Sock 服务，这种模式
  # 下，WebSocket 端口必须与 HTTP 端口保持一致，所以会导致 Z_SOCK_PORT 失效，必须保证二者的一致性，
  # 否则会报端口冲突错误
  websocket: # 🌐 此处结构直接对接 io.zerows.epoch.basicore.option.SockOptions
    # publish: /ws/                          # 是否启用发布通道 (非安全)
    component: io.zerows.plugins.websocket.stomp.handler.AxisStomp # 🎯 STOMP处理器组件
    config: # 🎛️ Ares 组件用于扩展 (STOMP)
      stomp:
        port: ${Z_SOCK_PORT:6083}            # ---> 💻️ WebSocket 端口 -1 表示禁用 TCP (⚠️ 必须与HTTP端口一致)
        secured: true                        # 🔒 启用安全提供程序 (STOMP安全认证)
        websocketBridge: true                # 🌉 启用 WebSocket 桥接 (STOMP桥接模式)
        websocketPath: /api/web-socket       # 🛣️ WebSocket 路径 (WebSocket访问路径)
        # stomp:                             # 📡 STOMP 处理器配置 (STOMP协议细节)
        # bridge:                            # 🌉 关于 `PermittedOptions` 的桥接配置 (权限桥接)
        # handler:                           # 🎯 处理器配置 (不同处理器可能不同)

# -----------------------------------------------------------------
# ⚡ Vertx 主配置
vertx:
  session:
    store-type: none                         # none/redis/jdbc/mongo
    timeout: 30                              # 分钟
    cookie:
      name: ????
      max-age: 1800
  config:
    import:
      - # 针对 vertx-boot.yml 中的设置
      # 🔐 Zero Web 专用配置
    instance: # 🏗️ 节点实例配置
      - name: 随机生成 -> 24位随机数           # 🏷️ 节点唯一标识
        options: # 🎯 此处结构直接对接 io.vertx.core.VertxOptions
        # Vertx运行时的各种选项配置
    delivery: # 📨 消息传递配置
      timeout: 180000                        # ⏱️ 消息传递超时时间(毫秒)
    deployment: # 🚀 部署配置
      instances: # 🏗️ 实例数量配置
        worker: 64                           # ⚙️ Worker线程实例数
        agent: 32                            # 🤖 Agent线程实例数
    # 哪种 shared 配置
    shared:
  application:
    name:
  mvc: # 对标 Spring MVC 配置做统一结构化
    cors: # ⛓️ 跨域资源共享配置
      origin: # 🌍 允许的跨域源列表
        - "客户端跨域的地址信息"              # 例如: http://localhost:3000, https://example.com
  # 🌐 Vertx 原生集群配置
  cluster: # 🏗️ 集群配置
    manager: 组件配置                         # 🎯 集群管理器组件
    options: 选项配置                         # ⚙️ 集群配置选项

  # 🔒 Zero 专用安全配置
  security: # 🛡️ 安全相关配置
    wall: /api                              # 🚧 安全墙路径 (API安全边界)
    jwt: # 🔐 JWT认证配置
      options: # ⚙️ JWT选项配置
        jwtOptions: # 🔑 JWT具体选项
          algorithm: HS256                   # 🔐 签名算法 (HS256/RS256/ES256)
        keyStore: # 🔐 密钥库配置
          type: jceks                        # 🔑 密钥库类型 (JCEKS)
          path: keys/keystore.jceks          # 📁 密钥库文件路径
          password: zerows                   # 🔑 密钥库密码

  # 🗄️ Zero 数据库专用配置（多数据源配置）
  datasource: # 🗄️ 数据源配置
    dynamic: # 🔄 动态多数据源配置
      primary: master                        # 🎯 主数据源标识
      strict: false                          # 🚫 严格模式 (true: 未指定数据源报错)
      datasource: # 🏗️ 多数据源详细配置
        master: # 🏆 主库配置 (写库)
          url:                               # 🔗 数据库连接URL
          username:                          # 👤 数据库用户名
          password:                          # 🔑 数据库密码
          instance:                          # 🏷️ 数据库实例标识
          driver-class-name:                 # 🚗 JDBC驱动类名
        master-history: # 📚 历史库配置 (历史数据)
          url:                               # 🔗 历史库连接URL
          username:                          # 👤 历史库用户名
          password:                          # 🔑 历史库密码
          instance:                          # 🏷️ 历史库实例标识
          driver-class-name:                 # 🚗 历史库JDBC驱动类名
        master-workflow: # 🔄 工作流库配置 (流程数据)
          url:                               # 🔗 工作流库连接URL
          username:                          # 👤 工作流库用户名
          password:                          # 🔑 工作流库密码
          instance:                          # 🏷️ 工作流库实例标识
          driver-class-name:                 # 🚗 工作流库JDBC驱动类名

    # 🎯 单数据源配置 (当不使用动态数据源时)
    url:                                     # 🔗 数据库连接URL
    username:                                # 👤 数据库用户名
    password:                                # 🔑 数据库密码
    driver-class-name:                       # 🚗 JDBC驱动类名

    # 🏊‍♂️ 连接池配置
    hikari: # 🎯 HikariCP 连接池配置
      minimum-idle: 10                       # 🏊‍♂️ 最小空闲连接数

  # 🗄️ Redis 配置
  data: # 🗄️ 数据存储配置
    redis: # 🐘 Redis 缓存配置
      host: 主机地址                          # 🖥️ Redis服务器主机地址
      port: 端口号                            # 🔌 Redis服务器端口号
      password: 密码                          # 🔑 Redis连接密码
      database: 0                            # 🗃️ Redis数据库编号
      timeout: 3000                          # ⏱️ 连接超时时间(毫秒)

# -----------------------------------------------------------------
# 🔄 微服务通信
dubbo: # 🌐 Dubbo 微服务配置
  application: # 🏢 应用配置
    name: ${vertx.application.name}          # 🏷️ 应用名称 (继承自vertx应用名)
    qosPort: ???                            # 🎛️ QoS端口 (Dubbo监控端口)
    serialize-check-status: DISABLE          # 🔒 序列化检查状态 (禁用以提高性能)

  registry: # 📖 注册中心配置
    address: nacos://                        # 🏛️ 注册中心地址 (Nacos)
    parameters: # ⚙️ 注册中心参数
      namespace:                             # 🌌 命名空间 (Nacos命名空间)
      username:                              # 👤 注册中心用户名
      password:                              # 🔑 注册中心密码

  protocol: # 🌐 协议配置
    name: dubbo                             # 🏷️ 协议名称 (Dubbo协议)
    port: 20880                             # 🔌 服务端口 (Dubbo默认端口)

  provider: # 🏭 服务提供者配置
    serialization-security-check: false      # 🔒 序列化安全检查 (禁用以提高性能)

  consumer: # 🛒 服务消费者配置
    serialization-security-check: false      # 🔒 序列化安全检查 (禁用以提高性能)

# -----------------------------------------------------------------
# 🏢 业务配置
app: # 🏢 应用业务配置
  id: "???"                                 # 🏷️ 应用唯一标识
  tenant: "???"                             # 🏢 租户标识 (多租户系统)
  data: # 📊 业务数据配置
    copyright: ""                           # 📝 版权信息
  config: # ⚙️ 业务配置
    demo: false                             # 🎮 演示模式开关 (true: 演示模式)

# -----------------------------------------------------------------
# 💾 存储配置
storage: # 💾 文件存储配置
# 文件上传、下载、存储相关的配置
# 例如：本地存储路径、云存储配置、分布式文件系统等

# 🔄 Request / Response 执行专用插件配置
plugins: # 🔄 执行处理器插件
  io.zerows.extension.commerce.rbac.plugins.request.DataRegion: # 🌍 数据区域插件
    prefix: /api/                           # 🛣️ API路径前缀
  io.zerows.extension.commerce.rbac.plugins.request.AuditorPin: # 📋 审计插件
    include: # 📝 需要审计的API路径列表
      - /api/mcard/publish                  # 🎫 会员发卡 (需要审计记录)
      - /api/order/standard/submit          # 📋 订单预定 (需要审计记录)
      - /api/order/direct/submit            # 📋 直接预定/订单预定 (需要审计记录)
      - /api/order/check-in/submit          # 🏨 办理入住 (需要审计记录)
      - /api/order/check-in/tomorrow        # 🏨 续住 (需要审计记录)
      - /api/hotel/book-mute                # 📖 哑房账本初始化（读写合一）(需要审计记录)
      - /api/cancel-work/order              # ❌ 取消订单 (需要审计记录)
      - /api/cancel-work/order-item         # ❌ 取消订单项 (需要审计记录)
      - /api/cancel-work/schedule           # ❌ 取消排房/入住 (需要审计记录)

# 📊 Excel 处理配置
excel: # 📊 Excel 文件处理配置
  pen: "io.zerows.plugins.office.excel.tpl.BlueTpl" # 🎨 Excel模板处理器
  temp: /tmp/                              # 🗂️ 临时文件目录
  tenant: "init/environment.json"          # 🏢 租户初始化配置文件
  # mapping 自动计算                        # 🗺️ 字段映射自动计算 (根据模板自动推导)

# 🔄 数据库迁移配置
flyway: # 🔄 Flyway 数据库迁移工具配置
# 专用 flyway 配置
# 数据库版本管理、SQL脚本执行、数据库迁移等配置

# 📱 短信服务配置
sms: # 📱 短信服务配置
  aliyun: # 🌐 阿里云短信服务配置
    domain:                                 # 🌐 API域名
    region_id:                              # 🌍 地域ID
    access_id:                              # 🔑 Access Key ID
    access_secret:                          # 🔐 Access Key Secret
    sign_name:                              # ✍️ 短信签名
    tpl:                                    # 📋 短信模板配置