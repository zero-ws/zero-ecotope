/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.ambient.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.runtime.ambient.domain.tables.XTenant;
import io.zerows.extension.runtime.ambient.domain.tables.records.XTenantRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XTenantDao extends AbstractVertxDAO<XTenantRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant, String, Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>>, Future<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<XTenantRecord,io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public XTenantDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(XTenant.X_TENANT, io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant.class, new JDBCClassicQueryExecutor<XTenantRecord,io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant,String>(configuration,io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant.class,vertx));
        }

        @Override
        protected String getId(io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByName(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByCode(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByStatus(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.STATUS.in(values));
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByStatus(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.STATUS.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByType(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>ID_NUMBER IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByIdNumber(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.ID_NUMBER.in(values));
        }

        /**
     * Find records that have <code>ID_NUMBER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByIdNumber(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.ID_NUMBER.in(values),limit);
        }

        /**
     * Find records that have <code>ID_FRONT IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByIdFront(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.ID_FRONT.in(values));
        }

        /**
     * Find records that have <code>ID_FRONT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByIdFront(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.ID_FRONT.in(values),limit);
        }

        /**
     * Find records that have <code>ID_BACK IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByIdBack(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.ID_BACK.in(values));
        }

        /**
     * Find records that have <code>ID_BACK IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByIdBack(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.ID_BACK.in(values),limit);
        }

        /**
     * Find records that have <code>BANK_ID IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByBankId(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.BANK_ID.in(values));
        }

        /**
     * Find records that have <code>BANK_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByBankId(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.BANK_ID.in(values),limit);
        }

        /**
     * Find records that have <code>BANK_CARD IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByBankCard(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.BANK_CARD.in(values));
        }

        /**
     * Find records that have <code>BANK_CARD IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByBankCard(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.BANK_CARD.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(XTenant.X_TENANT.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XTenant.X_TENANT.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(XTenant.X_TENANT.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(XTenant.X_TENANT.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(XTenant.X_TENANT.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<XTenantRecord,io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<XTenantRecord,io.zerows.extension.runtime.ambient.domain.tables.pojos.XTenant,String>) super.queryExecutor();
        }
}
