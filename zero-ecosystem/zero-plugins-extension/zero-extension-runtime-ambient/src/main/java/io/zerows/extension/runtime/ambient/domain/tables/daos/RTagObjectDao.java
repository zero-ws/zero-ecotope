/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.ambient.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.runtime.ambient.domain.tables.RTagObject;
import io.zerows.extension.runtime.ambient.domain.tables.records.RTagObjectRecord;
import org.jooq.Configuration;
import org.jooq.Record3;

import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RTagObjectDao extends AbstractVertxDAO<RTagObjectRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject, Record3<String, String, String>, Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject>>, Future<io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject>, Future<Integer>, Future<Record3<String, String, String>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<RTagObjectRecord,io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject,Record3<String, String, String>> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public RTagObjectDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(RTagObject.R_TAG_OBJECT, io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject.class, new JDBCClassicQueryExecutor<RTagObjectRecord,io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject,Record3<String, String, String>>(configuration,io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject.class,vertx));
        }

        @Override
        protected Record3<String, String, String> getId(io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject object) {
                return compositeKeyRecord(object.getTagId(), object.getEntityType(), object.getEntityId());
        }

        /**
     * Find records that have <code>ENTITY_TYPE IN (values)</code>
     * asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject>> findManyByEntityType(Collection<String> values) {
                return findManyByCondition(RTagObject.R_TAG_OBJECT.ENTITY_TYPE.in(values));
        }

        /**
     * Find records that have <code>ENTITY_TYPE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject>> findManyByEntityType(Collection<String> values, int limit) {
                return findManyByCondition(RTagObject.R_TAG_OBJECT.ENTITY_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>ENTITY_ID IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject>> findManyByEntityId(Collection<String> values) {
                return findManyByCondition(RTagObject.R_TAG_OBJECT.ENTITY_ID.in(values));
        }

        /**
     * Find records that have <code>ENTITY_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject>> findManyByEntityId(Collection<String> values, int limit) {
                return findManyByCondition(RTagObject.R_TAG_OBJECT.ENTITY_ID.in(values),limit);
        }

        /**
     * Find records that have <code>LINK_COMPONENT IN (values)</code>
     * asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject>> findManyByLinkComponent(Collection<String> values) {
                return findManyByCondition(RTagObject.R_TAG_OBJECT.LINK_COMPONENT.in(values));
        }

        /**
     * Find records that have <code>LINK_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject>> findManyByLinkComponent(Collection<String> values, int limit) {
                return findManyByCondition(RTagObject.R_TAG_OBJECT.LINK_COMPONENT.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject>> findManyByComment(Collection<String> values) {
                return findManyByCondition(RTagObject.R_TAG_OBJECT.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(RTagObject.R_TAG_OBJECT.COMMENT.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<RTagObjectRecord,io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject,Record3<String, String, String>> queryExecutor(){
                return (JDBCClassicQueryExecutor<RTagObjectRecord,io.zerows.extension.runtime.ambient.domain.tables.pojos.RTagObject,Record3<String, String, String>>) super.queryExecutor();
        }
}
