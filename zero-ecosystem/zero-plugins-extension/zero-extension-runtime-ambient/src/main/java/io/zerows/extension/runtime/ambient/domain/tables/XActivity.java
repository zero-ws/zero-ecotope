/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.ambient.domain.tables;


import io.zerows.extension.runtime.ambient.domain.Indexes;
import io.zerows.extension.runtime.ambient.domain.Keys;
import io.zerows.extension.runtime.ambient.domain.Zdb;
import io.zerows.extension.runtime.ambient.domain.tables.records.XActivityRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function19;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row19;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class XActivity extends TableImpl<XActivityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.X_ACTIVITY</code>
     */
    public static final XActivity X_ACTIVITY = new XActivity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<XActivityRecord> getRecordType() {
        return XActivityRecord.class;
    }

    /**
     * The column <code>ZDB.X_ACTIVITY.KEY</code>. 「key」- 操作行为主键
     */
    public final TableField<XActivityRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 操作行为主键");

    /**
     * The column <code>ZDB.X_ACTIVITY.TYPE</code>. 「type」- 操作类型
     */
    public final TableField<XActivityRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(64), this, "「type」- 操作类型");

    /**
     * The column <code>ZDB.X_ACTIVITY.SERIAL</code>. 「serial」- 变更记录号
     */
    public final TableField<XActivityRecord, String> SERIAL = createField(DSL.name("SERIAL"), SQLDataType.VARCHAR(255), this, "「serial」- 变更记录号");

    /**
     * The column <code>ZDB.X_ACTIVITY.DESCRIPTION</code>. 「description」- 操作描述信息
     */
    public final TableField<XActivityRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "「description」- 操作描述信息");

    /**
     * The column <code>ZDB.X_ACTIVITY.MODEL_ID</code>. 「modelId」-
     * 组所关联的模型identifier，用于描述
     */
    public final TableField<XActivityRecord, String> MODEL_ID = createField(DSL.name("MODEL_ID"), SQLDataType.VARCHAR(255), this, "「modelId」- 组所关联的模型identifier，用于描述");

    /**
     * The column <code>ZDB.X_ACTIVITY.MODEL_KEY</code>. 「modelKey」-
     * 组所关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public final TableField<XActivityRecord, String> MODEL_KEY = createField(DSL.name("MODEL_KEY"), SQLDataType.VARCHAR(36), this, "「modelKey」- 组所关联的模型记录ID，用于描述哪一个Model中的记录");

    /**
     * The column <code>ZDB.X_ACTIVITY.MODEL_CATEGORY</code>. 「modelCategory」-
     * 关联的category记录，只包含叶节点
     */
    public final TableField<XActivityRecord, String> MODEL_CATEGORY = createField(DSL.name("MODEL_CATEGORY"), SQLDataType.VARCHAR(128), this, "「modelCategory」- 关联的category记录，只包含叶节点");

    /**
     * The column <code>ZDB.X_ACTIVITY.TASK_NAME</code>. 「taskName」- 任务名称
     */
    public final TableField<XActivityRecord, String> TASK_NAME = createField(DSL.name("TASK_NAME"), SQLDataType.VARCHAR(255), this, "「taskName」- 任务名称");

    /**
     * The column <code>ZDB.X_ACTIVITY.TASK_SERIAL</code>. 「taskSerial」- 任务单号
     */
    public final TableField<XActivityRecord, String> TASK_SERIAL = createField(DSL.name("TASK_SERIAL"), SQLDataType.VARCHAR(255), this, "「taskSerial」- 任务单号");

    /**
     * The column <code>ZDB.X_ACTIVITY.RECORD_OLD</code>. 「recordOld」-
     * 变更之前的数据（用于回滚）
     */
    public final TableField<XActivityRecord, String> RECORD_OLD = createField(DSL.name("RECORD_OLD"), SQLDataType.CLOB, this, "「recordOld」- 变更之前的数据（用于回滚）");

    /**
     * The column <code>ZDB.X_ACTIVITY.RECORD_NEW</code>. 「recordNew」-
     * 变更之后的数据（用于更新）
     */
    public final TableField<XActivityRecord, String> RECORD_NEW = createField(DSL.name("RECORD_NEW"), SQLDataType.CLOB, this, "「recordNew」- 变更之后的数据（用于更新）");

    /**
     * The column <code>ZDB.X_ACTIVITY.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    public final TableField<XActivityRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(128), this, "「sigma」- 用户组绑定的统一标识");

    /**
     * The column <code>ZDB.X_ACTIVITY.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<XActivityRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");

    /**
     * The column <code>ZDB.X_ACTIVITY.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<XActivityRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>ZDB.X_ACTIVITY.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<XActivityRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");

    /**
     * The column <code>ZDB.X_ACTIVITY.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<XActivityRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");

    /**
     * The column <code>ZDB.X_ACTIVITY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<XActivityRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");

    /**
     * The column <code>ZDB.X_ACTIVITY.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<XActivityRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");

    /**
     * The column <code>ZDB.X_ACTIVITY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<XActivityRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private XActivity(Name alias, Table<XActivityRecord> aliased) {
        this(alias, aliased, null);
    }

    private XActivity(Name alias, Table<XActivityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.X_ACTIVITY</code> table reference
     */
    public XActivity(String alias) {
        this(DSL.name(alias), X_ACTIVITY);
    }

    /**
     * Create an aliased <code>ZDB.X_ACTIVITY</code> table reference
     */
    public XActivity(Name alias) {
        this(alias, X_ACTIVITY);
    }

    /**
     * Create a <code>ZDB.X_ACTIVITY</code> table reference
     */
    public XActivity() {
        this(DSL.name("X_ACTIVITY"), null);
    }

    public <O extends Record> XActivity(Table<O> child, ForeignKey<O, XActivityRecord> key) {
        super(child, key, X_ACTIVITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.X_ACTIVITY_IDX_X_ACTIVITY_CREATED_AT, Indexes.X_ACTIVITY_IDXM_X_ACTIVITY_MODEL_ID_MODEL_KEY, Indexes.X_ACTIVITY_IDXM_X_ACTIVITY_SIGMA_ACTIVE);
    }

    @Override
    public UniqueKey<XActivityRecord> getPrimaryKey() {
        return Keys.KEY_X_ACTIVITY_PRIMARY;
    }

    @Override
    public XActivity as(String alias) {
        return new XActivity(DSL.name(alias), this);
    }

    @Override
    public XActivity as(Name alias) {
        return new XActivity(alias, this);
    }

    @Override
    public XActivity as(Table<?> alias) {
        return new XActivity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public XActivity rename(String name) {
        return new XActivity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public XActivity rename(Name name) {
        return new XActivity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public XActivity rename(Table<?> name) {
        return new XActivity(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row19 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function19<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function19<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
