/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.ambient.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.runtime.ambient.domain.tables.XSource;
import io.zerows.extension.runtime.ambient.domain.tables.records.XSourceRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class XSourceDao extends AbstractVertxDAO<XSourceRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource, String, Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>>, Future<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<XSourceRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public XSourceDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(XSource.X_SOURCE, io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource.class, new JDBCClassicQueryExecutor<XSourceRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource, String>(configuration, io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>IP_V4 IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByIpV4(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.IP_V4.in(values));
    }

    /**
     * Find records that have <code>IP_V4 IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByIpV4(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.IP_V4.in(values), limit);
    }

    /**
     * Find records that have <code>IP_V6 IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByIpV6(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.IP_V6.in(values));
    }

    /**
     * Find records that have <code>IP_V6 IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByIpV6(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.IP_V6.in(values), limit);
    }

    /**
     * Find records that have <code>HOSTNAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByHostname(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.HOSTNAME.in(values));
    }

    /**
     * Find records that have <code>HOSTNAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByHostname(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.HOSTNAME.in(values), limit);
    }

    /**
     * Find records that have <code>PORT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByPort(final Collection<Integer> values) {
        return findManyByCondition(XSource.X_SOURCE.PORT.in(values));
    }

    /**
     * Find records that have <code>PORT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByPort(final Collection<Integer> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.PORT.in(values), limit);
    }

    /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByCategory(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.CATEGORY.in(values));
    }

    /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByCategory(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.CATEGORY.in(values), limit);
    }

    /**
     * Find records that have <code>DRIVER_CLASS_NAME IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByDriverClassName(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.DRIVER_CLASS_NAME.in(values));
    }

    /**
     * Find records that have <code>DRIVER_CLASS_NAME IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByDriverClassName(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.DRIVER_CLASS_NAME.in(values), limit);
    }

    /**
     * Find records that have <code>JDBC_URL IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByJdbcUrl(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.JDBC_URL.in(values));
    }

    /**
     * Find records that have <code>JDBC_URL IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByJdbcUrl(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.JDBC_URL.in(values), limit);
    }

    /**
     * Find records that have <code>JDBC_CONFIG IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByJdbcConfig(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.JDBC_CONFIG.in(values));
    }

    /**
     * Find records that have <code>JDBC_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByJdbcConfig(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.JDBC_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>INSTANCE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByInstance(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.INSTANCE.in(values));
    }

    /**
     * Find records that have <code>INSTANCE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByInstance(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.INSTANCE.in(values), limit);
    }

    /**
     * Find records that have <code>USERNAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByUsername(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.USERNAME.in(values));
    }

    /**
     * Find records that have <code>USERNAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByUsername(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.USERNAME.in(values), limit);
    }

    /**
     * Find records that have <code>PASSWORD IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByPassword(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.PASSWORD.in(values));
    }

    /**
     * Find records that have <code>PASSWORD IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByPassword(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.PASSWORD.in(values), limit);
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByAppId(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.APP_ID.in(values));
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByAppId(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.APP_ID.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(XSource.X_SOURCE.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(XSource.X_SOURCE.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(XSource.X_SOURCE.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(XSource.X_SOURCE.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(XSource.X_SOURCE.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<XSourceRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<XSourceRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XSource, String>) super.queryExecutor();
    }
}
