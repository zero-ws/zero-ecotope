/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.ambient.domain.tables.records;


import io.r2mo.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.runtime.ambient.domain.tables.XLog;
import io.zerows.extension.runtime.ambient.domain.tables.interfaces.IXLog;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record18;
import org.jooq.Row18;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class XLogRecord extends UpdatableRecordImpl<XLogRecord> implements VertxPojo, Record18<String, String, String, String, String, String, LocalDateTime, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String>, IXLog {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ZDB.X_LOG.KEY</code>. 「key」- 日志的主键
     */
    @Override
    public XLogRecord setKey(final String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.KEY</code>. 「key」- 日志的主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.X_LOG.TYPE</code>. 「type」- 日志的分类
     */
    @Override
    public XLogRecord setType(final String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.TYPE</code>. 「type」- 日志的分类
     */
    @Override
    public String getType() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.X_LOG.LEVEL</code>. 「level」- 日志级别：ERROR / WARN /
     * INFO
     */
    @Override
    public XLogRecord setLevel(final String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.LEVEL</code>. 「level」- 日志级别：ERROR / WARN /
     * INFO
     */
    @Override
    public String getLevel() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.X_LOG.INFO_STACK</code>. 「infoStack」- 堆栈信息
     */
    @Override
    public XLogRecord setInfoStack(final String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.INFO_STACK</code>. 「infoStack」- 堆栈信息
     */
    @Override
    public String getInfoStack() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.X_LOG.INFO_SYSTEM</code>. 「infoSystem」- 日志内容
     */
    @Override
    public XLogRecord setInfoSystem(final String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.INFO_SYSTEM</code>. 「infoSystem」- 日志内容
     */
    @Override
    public String getInfoSystem() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.X_LOG.INFO_READABLE</code>. 「infoReadable」- 日志的可读信息
     */
    @Override
    public XLogRecord setInfoReadable(final String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.INFO_READABLE</code>. 「infoReadable」- 日志的可读信息
     */
    @Override
    public String getInfoReadable() {
        return (String) get(5);
    }

    /**
     * Setter for <code>ZDB.X_LOG.INFO_AT</code>. 「infoAt」- 日志记录时间
     */
    @Override
    public XLogRecord setInfoAt(final LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.INFO_AT</code>. 「infoAt」- 日志记录时间
     */
    @Override
    public LocalDateTime getInfoAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>ZDB.X_LOG.LOG_AGENT</code>. 「logAgent」- 记录日志的 agent 信息
     */
    @Override
    public XLogRecord setLogAgent(final String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.LOG_AGENT</code>. 「logAgent」- 记录日志的 agent 信息
     */
    @Override
    public String getLogAgent() {
        return (String) get(7);
    }

    /**
     * Setter for <code>ZDB.X_LOG.LOG_IP</code>. 「logIp」- 日志扩展组件
     */
    @Override
    public XLogRecord setLogIp(final String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.LOG_IP</code>. 「logIp」- 日志扩展组件
     */
    @Override
    public String getLogIp() {
        return (String) get(8);
    }

    /**
     * Setter for <code>ZDB.X_LOG.LOG_USER</code>. 「logUser」- 日志记录人
     */
    @Override
    public XLogRecord setLogUser(final String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.LOG_USER</code>. 「logUser」- 日志记录人
     */
    @Override
    public String getLogUser() {
        return (String) get(9);
    }

    /**
     * Setter for <code>ZDB.X_LOG.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public XLogRecord setActive(final Boolean value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(10);
    }

    /**
     * Setter for <code>ZDB.X_LOG.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public XLogRecord setSigma(final String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(11);
    }

    /**
     * Setter for <code>ZDB.X_LOG.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public XLogRecord setMetadata(final String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return (String) get(12);
    }

    /**
     * Setter for <code>ZDB.X_LOG.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public XLogRecord setLanguage(final String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(13);
    }

    /**
     * Setter for <code>ZDB.X_LOG.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public XLogRecord setCreatedAt(final LocalDateTime value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(14);
    }

    /**
     * Setter for <code>ZDB.X_LOG.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public XLogRecord setCreatedBy(final String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(15);
    }

    /**
     * Setter for <code>ZDB.X_LOG.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public XLogRecord setUpdatedAt(final LocalDateTime value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(16);
    }

    /**
     * Setter for <code>ZDB.X_LOG.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public XLogRecord setUpdatedBy(final String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.X_LOG.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(17);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record18 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, String, String, String, String, String, LocalDateTime, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    @Override
    public Row18<String, String, String, String, String, String, LocalDateTime, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row18) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return XLog.X_LOG.KEY;
    }

    @Override
    public Field<String> field2() {
        return XLog.X_LOG.TYPE;
    }

    @Override
    public Field<String> field3() {
        return XLog.X_LOG.LEVEL;
    }

    @Override
    public Field<String> field4() {
        return XLog.X_LOG.INFO_STACK;
    }

    @Override
    public Field<String> field5() {
        return XLog.X_LOG.INFO_SYSTEM;
    }

    @Override
    public Field<String> field6() {
        return XLog.X_LOG.INFO_READABLE;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return XLog.X_LOG.INFO_AT;
    }

    @Override
    public Field<String> field8() {
        return XLog.X_LOG.LOG_AGENT;
    }

    @Override
    public Field<String> field9() {
        return XLog.X_LOG.LOG_IP;
    }

    @Override
    public Field<String> field10() {
        return XLog.X_LOG.LOG_USER;
    }

    @Override
    public Field<Boolean> field11() {
        return XLog.X_LOG.ACTIVE;
    }

    @Override
    public Field<String> field12() {
        return XLog.X_LOG.SIGMA;
    }

    @Override
    public Field<String> field13() {
        return XLog.X_LOG.METADATA;
    }

    @Override
    public Field<String> field14() {
        return XLog.X_LOG.LANGUAGE;
    }

    @Override
    public Field<LocalDateTime> field15() {
        return XLog.X_LOG.CREATED_AT;
    }

    @Override
    public Field<String> field16() {
        return XLog.X_LOG.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field17() {
        return XLog.X_LOG.UPDATED_AT;
    }

    @Override
    public Field<String> field18() {
        return XLog.X_LOG.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getType();
    }

    @Override
    public String component3() {
        return getLevel();
    }

    @Override
    public String component4() {
        return getInfoStack();
    }

    @Override
    public String component5() {
        return getInfoSystem();
    }

    @Override
    public String component6() {
        return getInfoReadable();
    }

    @Override
    public LocalDateTime component7() {
        return getInfoAt();
    }

    @Override
    public String component8() {
        return getLogAgent();
    }

    @Override
    public String component9() {
        return getLogIp();
    }

    @Override
    public String component10() {
        return getLogUser();
    }

    @Override
    public Boolean component11() {
        return getActive();
    }

    @Override
    public String component12() {
        return getSigma();
    }

    @Override
    public String component13() {
        return getMetadata();
    }

    @Override
    public String component14() {
        return getLanguage();
    }

    @Override
    public LocalDateTime component15() {
        return getCreatedAt();
    }

    @Override
    public String component16() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component17() {
        return getUpdatedAt();
    }

    @Override
    public String component18() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getType();
    }

    @Override
    public String value3() {
        return getLevel();
    }

    @Override
    public String value4() {
        return getInfoStack();
    }

    @Override
    public String value5() {
        return getInfoSystem();
    }

    @Override
    public String value6() {
        return getInfoReadable();
    }

    @Override
    public LocalDateTime value7() {
        return getInfoAt();
    }

    @Override
    public String value8() {
        return getLogAgent();
    }

    @Override
    public String value9() {
        return getLogIp();
    }

    @Override
    public String value10() {
        return getLogUser();
    }

    @Override
    public Boolean value11() {
        return getActive();
    }

    @Override
    public String value12() {
        return getSigma();
    }

    @Override
    public String value13() {
        return getMetadata();
    }

    @Override
    public String value14() {
        return getLanguage();
    }

    @Override
    public LocalDateTime value15() {
        return getCreatedAt();
    }

    @Override
    public String value16() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value17() {
        return getUpdatedAt();
    }

    @Override
    public String value18() {
        return getUpdatedBy();
    }

    @Override
    public XLogRecord value1(final String value) {
        setKey(value);
        return this;
    }

    @Override
    public XLogRecord value2(final String value) {
        setType(value);
        return this;
    }

    @Override
    public XLogRecord value3(final String value) {
        setLevel(value);
        return this;
    }

    @Override
    public XLogRecord value4(final String value) {
        setInfoStack(value);
        return this;
    }

    @Override
    public XLogRecord value5(final String value) {
        setInfoSystem(value);
        return this;
    }

    @Override
    public XLogRecord value6(final String value) {
        setInfoReadable(value);
        return this;
    }

    @Override
    public XLogRecord value7(final LocalDateTime value) {
        setInfoAt(value);
        return this;
    }

    @Override
    public XLogRecord value8(final String value) {
        setLogAgent(value);
        return this;
    }

    @Override
    public XLogRecord value9(final String value) {
        setLogIp(value);
        return this;
    }

    @Override
    public XLogRecord value10(final String value) {
        setLogUser(value);
        return this;
    }

    @Override
    public XLogRecord value11(final Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public XLogRecord value12(final String value) {
        setSigma(value);
        return this;
    }

    @Override
    public XLogRecord value13(final String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public XLogRecord value14(final String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public XLogRecord value15(final LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public XLogRecord value16(final String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public XLogRecord value17(final LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public XLogRecord value18(final String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public XLogRecord values(final String value1, final String value2, final String value3, final String value4, final String value5, final String value6, final LocalDateTime value7, final String value8, final String value9, final String value10, final Boolean value11, final String value12, final String value13, final String value14, final LocalDateTime value15, final String value16, final LocalDateTime value17, final String value18) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(final IXLog from) {
        setKey(from.getKey());
        setType(from.getType());
        setLevel(from.getLevel());
        setInfoStack(from.getInfoStack());
        setInfoSystem(from.getInfoSystem());
        setInfoReadable(from.getInfoReadable());
        setInfoAt(from.getInfoAt());
        setLogAgent(from.getLogAgent());
        setLogIp(from.getLogIp());
        setLogUser(from.getLogUser());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IXLog> E into(final E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached XLogRecord
     */
    public XLogRecord() {
        super(XLog.X_LOG);
    }

    /**
     * Create a detached, initialised XLogRecord
     */
    public XLogRecord(final String key, final String type, final String level, final String infoStack, final String infoSystem, final String infoReadable, final LocalDateTime infoAt, final String logAgent, final String logIp, final String logUser, final Boolean active, final String sigma, final String metadata, final String language, final LocalDateTime createdAt, final String createdBy, final LocalDateTime updatedAt, final String updatedBy) {
        super(XLog.X_LOG);

        setKey(key);
        setType(type);
        setLevel(level);
        setInfoStack(infoStack);
        setInfoSystem(infoSystem);
        setInfoReadable(infoReadable);
        setInfoAt(infoAt);
        setLogAgent(logAgent);
        setLogIp(logIp);
        setLogUser(logUser);
        setActive(active);
        setSigma(sigma);
        setMetadata(metadata);
        setLanguage(language);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised XLogRecord
     */
    public XLogRecord(final io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog value) {
        super(XLog.X_LOG);

        if (value != null) {
            setKey(value.getKey());
            setType(value.getType());
            setLevel(value.getLevel());
            setInfoStack(value.getInfoStack());
            setInfoSystem(value.getInfoSystem());
            setInfoReadable(value.getInfoReadable());
            setInfoAt(value.getInfoAt());
            setLogAgent(value.getLogAgent());
            setLogIp(value.getLogIp());
            setLogUser(value.getLogUser());
            setActive(value.getActive());
            setSigma(value.getSigma());
            setMetadata(value.getMetadata());
            setLanguage(value.getLanguage());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            resetChangedOnNotNull();
        }
    }

    public XLogRecord(final io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
