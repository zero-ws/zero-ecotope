/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.ambient.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.runtime.ambient.domain.tables.XAttachment;
import io.zerows.extension.runtime.ambient.domain.tables.records.XAttachmentRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class XAttachmentDao extends AbstractVertxDAO<XAttachmentRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment, String, Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>>, Future<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<XAttachmentRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public XAttachmentDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(XAttachment.X_ATTACHMENT, io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment.class, new JDBCClassicQueryExecutor<XAttachmentRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment, String>(configuration, io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByName(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>EXTENSION IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByExtension(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.EXTENSION.in(values));
    }

    /**
     * Find records that have <code>EXTENSION IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByExtension(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.EXTENSION.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByType(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>MIME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByMime(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.MIME.in(values));
    }

    /**
     * Find records that have <code>MIME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByMime(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.MIME.in(values), limit);
    }

    /**
     * Find records that have <code>SIZE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyBySize(final Collection<Integer> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.SIZE.in(values));
    }

    /**
     * Find records that have <code>SIZE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyBySize(final Collection<Integer> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.SIZE.in(values), limit);
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByStatus(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.STATUS.in(values));
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByStatus(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.STATUS.in(values), limit);
    }

    /**
     * Find records that have <code>DIRECTORY_ID IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByDirectoryId(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.DIRECTORY_ID.in(values));
    }

    /**
     * Find records that have <code>DIRECTORY_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByDirectoryId(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.DIRECTORY_ID.in(values), limit);
    }

    /**
     * Find records that have <code>STORE_WAY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByStoreWay(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.STORE_WAY.in(values));
    }

    /**
     * Find records that have <code>STORE_WAY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByStoreWay(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.STORE_WAY.in(values), limit);
    }

    /**
     * Find records that have <code>STORE_PATH IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByStorePath(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.STORE_PATH.in(values));
    }

    /**
     * Find records that have <code>STORE_PATH IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByStorePath(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.STORE_PATH.in(values), limit);
    }

    /**
     * Find records that have <code>STORE_URI IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByStoreUri(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.STORE_URI.in(values));
    }

    /**
     * Find records that have <code>STORE_URI IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByStoreUri(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.STORE_URI.in(values), limit);
    }

    /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByModelId(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.MODEL_ID.in(values));
    }

    /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByModelId(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.MODEL_ID.in(values), limit);
    }

    /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByModelKey(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.MODEL_KEY.in(values));
    }

    /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByModelKey(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.MODEL_KEY.in(values), limit);
    }

    /**
     * Find records that have <code>MODEL_CATEGORY IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByModelCategory(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.MODEL_CATEGORY.in(values));
    }

    /**
     * Find records that have <code>MODEL_CATEGORY IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByModelCategory(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.MODEL_CATEGORY.in(values), limit);
    }

    /**
     * Find records that have <code>FILE_NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByFileName(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.FILE_NAME.in(values));
    }

    /**
     * Find records that have <code>FILE_NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByFileName(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.FILE_NAME.in(values), limit);
    }

    /**
     * Find records that have <code>FILE_KEY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByFileKey(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.FILE_KEY.in(values));
    }

    /**
     * Find records that have <code>FILE_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByFileKey(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.FILE_KEY.in(values), limit);
    }

    /**
     * Find records that have <code>FILE_URL IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByFileUrl(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.FILE_URL.in(values));
    }

    /**
     * Find records that have <code>FILE_URL IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByFileUrl(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.FILE_URL.in(values), limit);
    }

    /**
     * Find records that have <code>FILE_PATH IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByFilePath(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.FILE_PATH.in(values));
    }

    /**
     * Find records that have <code>FILE_PATH IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByFilePath(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.FILE_PATH.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(XAttachment.X_ATTACHMENT.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<XAttachmentRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<XAttachmentRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XAttachment, String>) super.queryExecutor();
    }
}
