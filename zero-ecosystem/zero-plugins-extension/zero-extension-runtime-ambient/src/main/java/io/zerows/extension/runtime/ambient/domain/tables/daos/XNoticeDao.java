/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.ambient.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.runtime.ambient.domain.tables.XNotice;
import io.zerows.extension.runtime.ambient.domain.tables.records.XNoticeRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class XNoticeDao extends AbstractVertxDAO<XNoticeRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice, String, Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>>, Future<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<XNoticeRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public XNoticeDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(XNotice.X_NOTICE, io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice.class, new JDBCClassicQueryExecutor<XNoticeRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice, String>(configuration, io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByName(final Collection<String> values) {
        return findManyByCondition(XNotice.X_NOTICE.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(XNotice.X_NOTICE.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByType(final Collection<String> values) {
        return findManyByCondition(XNotice.X_NOTICE.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByStatus(final Collection<String> values) {
        return findManyByCondition(XNotice.X_NOTICE.STATUS.in(values));
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByStatus(final Collection<String> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.STATUS.in(values), limit);
    }

    /**
     * Find records that have <code>CONTENT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByContent(final Collection<String> values) {
        return findManyByCondition(XNotice.X_NOTICE.CONTENT.in(values));
    }

    /**
     * Find records that have <code>CONTENT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByContent(final Collection<String> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.CONTENT.in(values), limit);
    }

    /**
     * Find records that have <code>EXPIRED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByExpiredAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(XNotice.X_NOTICE.EXPIRED_AT.in(values));
    }

    /**
     * Find records that have <code>EXPIRED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByExpiredAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.EXPIRED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByAppId(final Collection<String> values) {
        return findManyByCondition(XNotice.X_NOTICE.APP_ID.in(values));
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByAppId(final Collection<String> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.APP_ID.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(XNotice.X_NOTICE.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(XNotice.X_NOTICE.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(XNotice.X_NOTICE.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(XNotice.X_NOTICE.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(XNotice.X_NOTICE.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(XNotice.X_NOTICE.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(XNotice.X_NOTICE.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(XNotice.X_NOTICE.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(XNotice.X_NOTICE.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<XNoticeRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<XNoticeRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XNotice, String>) super.queryExecutor();
    }
}
