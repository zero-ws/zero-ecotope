/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.ambient.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.runtime.ambient.domain.tables.XLog;
import io.zerows.extension.runtime.ambient.domain.tables.records.XLogRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class XLogDao extends AbstractVertxDAO<XLogRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog, String, Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>>, Future<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<XLogRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public XLogDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(XLog.X_LOG, io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog.class, new JDBCClassicQueryExecutor<XLogRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog, String>(configuration, io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByType(final Collection<String> values) {
        return findManyByCondition(XLog.X_LOG.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>LEVEL IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByLevel(final Collection<String> values) {
        return findManyByCondition(XLog.X_LOG.LEVEL.in(values));
    }

    /**
     * Find records that have <code>LEVEL IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByLevel(final Collection<String> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.LEVEL.in(values), limit);
    }

    /**
     * Find records that have <code>INFO_STACK IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByInfoStack(final Collection<String> values) {
        return findManyByCondition(XLog.X_LOG.INFO_STACK.in(values));
    }

    /**
     * Find records that have <code>INFO_STACK IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByInfoStack(final Collection<String> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.INFO_STACK.in(values), limit);
    }

    /**
     * Find records that have <code>INFO_SYSTEM IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByInfoSystem(final Collection<String> values) {
        return findManyByCondition(XLog.X_LOG.INFO_SYSTEM.in(values));
    }

    /**
     * Find records that have <code>INFO_SYSTEM IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByInfoSystem(final Collection<String> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.INFO_SYSTEM.in(values), limit);
    }

    /**
     * Find records that have <code>INFO_READABLE IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByInfoReadable(final Collection<String> values) {
        return findManyByCondition(XLog.X_LOG.INFO_READABLE.in(values));
    }

    /**
     * Find records that have <code>INFO_READABLE IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByInfoReadable(final Collection<String> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.INFO_READABLE.in(values), limit);
    }

    /**
     * Find records that have <code>INFO_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByInfoAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(XLog.X_LOG.INFO_AT.in(values));
    }

    /**
     * Find records that have <code>INFO_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByInfoAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.INFO_AT.in(values), limit);
    }

    /**
     * Find records that have <code>LOG_AGENT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByLogAgent(final Collection<String> values) {
        return findManyByCondition(XLog.X_LOG.LOG_AGENT.in(values));
    }

    /**
     * Find records that have <code>LOG_AGENT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByLogAgent(final Collection<String> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.LOG_AGENT.in(values), limit);
    }

    /**
     * Find records that have <code>LOG_IP IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByLogIp(final Collection<String> values) {
        return findManyByCondition(XLog.X_LOG.LOG_IP.in(values));
    }

    /**
     * Find records that have <code>LOG_IP IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByLogIp(final Collection<String> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.LOG_IP.in(values), limit);
    }

    /**
     * Find records that have <code>LOG_USER IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByLogUser(final Collection<String> values) {
        return findManyByCondition(XLog.X_LOG.LOG_USER.in(values));
    }

    /**
     * Find records that have <code>LOG_USER IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByLogUser(final Collection<String> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.LOG_USER.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(XLog.X_LOG.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(XLog.X_LOG.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(XLog.X_LOG.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(XLog.X_LOG.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(XLog.X_LOG.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(XLog.X_LOG.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(XLog.X_LOG.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(XLog.X_LOG.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(XLog.X_LOG.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<XLogRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<XLogRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XLog, String>) super.queryExecutor();
    }
}
