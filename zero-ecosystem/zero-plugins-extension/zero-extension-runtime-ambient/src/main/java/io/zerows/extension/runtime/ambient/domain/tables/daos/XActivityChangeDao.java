/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.ambient.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.runtime.ambient.domain.tables.XActivityChange;
import io.zerows.extension.runtime.ambient.domain.tables.records.XActivityChangeRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class XActivityChangeDao extends AbstractVertxDAO<XActivityChangeRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange, String, Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>>, Future<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<XActivityChangeRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public XActivityChangeDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(XActivityChange.X_ACTIVITY_CHANGE, io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange.class, new JDBCClassicQueryExecutor<XActivityChangeRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange, String>(configuration, io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>ACTIVITY_ID IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByActivityId(final Collection<String> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.ACTIVITY_ID.in(values));
    }

    /**
     * Find records that have <code>ACTIVITY_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByActivityId(final Collection<String> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.ACTIVITY_ID.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByType(final Collection<String> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByStatus(final Collection<String> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.STATUS.in(values));
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByStatus(final Collection<String> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.STATUS.in(values), limit);
    }

    /**
     * Find records that have <code>FIELD_NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByFieldName(final Collection<String> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.FIELD_NAME.in(values));
    }

    /**
     * Find records that have <code>FIELD_NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByFieldName(final Collection<String> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.FIELD_NAME.in(values), limit);
    }

    /**
     * Find records that have <code>FIELD_ALIAS IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByFieldAlias(final Collection<String> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.FIELD_ALIAS.in(values));
    }

    /**
     * Find records that have <code>FIELD_ALIAS IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByFieldAlias(final Collection<String> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.FIELD_ALIAS.in(values), limit);
    }

    /**
     * Find records that have <code>FIELD_TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByFieldType(final Collection<String> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.FIELD_TYPE.in(values));
    }

    /**
     * Find records that have <code>FIELD_TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByFieldType(final Collection<String> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.FIELD_TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>VALUE_OLD IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByValueOld(final Collection<String> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.VALUE_OLD.in(values));
    }

    /**
     * Find records that have <code>VALUE_OLD IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByValueOld(final Collection<String> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.VALUE_OLD.in(values), limit);
    }

    /**
     * Find records that have <code>VALUE_NEW IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByValueNew(final Collection<String> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.VALUE_NEW.in(values));
    }

    /**
     * Find records that have <code>VALUE_NEW IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByValueNew(final Collection<String> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.VALUE_NEW.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(XActivityChange.X_ACTIVITY_CHANGE.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<XActivityChangeRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<XActivityChangeRecord, io.zerows.extension.runtime.ambient.domain.tables.pojos.XActivityChange, String>) super.queryExecutor();
    }
}
