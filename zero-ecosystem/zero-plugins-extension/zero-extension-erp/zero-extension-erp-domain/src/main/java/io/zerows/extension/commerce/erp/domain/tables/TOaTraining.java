/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.erp.domain.tables;


import io.zerows.extension.commerce.erp.domain.Keys;
import io.zerows.extension.commerce.erp.domain.Zdb;
import io.zerows.extension.commerce.erp.domain.tables.records.TOaTrainingRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TOaTraining extends TableImpl<TOaTrainingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.T_OA_TRAINING</code>
     */
    public static final TOaTraining T_OA_TRAINING = new TOaTraining();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOaTrainingRecord> getRecordType() {
        return TOaTrainingRecord.class;
    }

    /**
     * The column <code>ZDB.T_OA_TRAINING.KEY</code>. 「key」- Ticket Primary Key
     */
    public final TableField<TOaTrainingRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- Ticket Primary Key");

    /**
     * The column <code>ZDB.T_OA_TRAINING.COMMENT_EXTENSION</code>.
     * 「commentExtension」- Extension Comment
     */
    public final TableField<TOaTrainingRecord, String> COMMENT_EXTENSION = createField(DSL.name("COMMENT_EXTENSION"), SQLDataType.CLOB, this, "「commentExtension」- Extension Comment");

    /**
     * The column <code>ZDB.T_OA_TRAINING.START_AT</code>. 「startAt」- From
     */
    public final TableField<TOaTrainingRecord, LocalDateTime> START_AT = createField(DSL.name("START_AT"), SQLDataType.LOCALDATETIME(0), this, "「startAt」- From");

    /**
     * The column <code>ZDB.T_OA_TRAINING.END_AT</code>. 「endAt」- To
     */
    public final TableField<TOaTrainingRecord, LocalDateTime> END_AT = createField(DSL.name("END_AT"), SQLDataType.LOCALDATETIME(0), this, "「endAt」- To");

    /**
     * The column <code>ZDB.T_OA_TRAINING.TRAIN_LOCATION</code>.
     * 「trainLocation」- The location for training
     */
    public final TableField<TOaTrainingRecord, String> TRAIN_LOCATION = createField(DSL.name("TRAIN_LOCATION"), SQLDataType.CLOB, this, "「trainLocation」- The location for training");

    /**
     * The column <code>ZDB.T_OA_TRAINING.TRAIN_MODE</code>. 「trainMode」- The
     * mode of training
     */
    public final TableField<TOaTrainingRecord, String> TRAIN_MODE = createField(DSL.name("TRAIN_MODE"), SQLDataType.VARCHAR(64), this, "「trainMode」- The mode of training");

    /**
     * The column <code>ZDB.T_OA_TRAINING.LEADER</code>. 「leader」- The training
     * leader
     */
    public final TableField<TOaTrainingRecord, String> LEADER = createField(DSL.name("LEADER"), SQLDataType.VARCHAR(36), this, "「leader」- The training leader");

    /**
     * The column <code>ZDB.T_OA_TRAINING.LEADER_COMMENT</code>.
     * 「leaderComment」- Comment from leader
     */
    public final TableField<TOaTrainingRecord, String> LEADER_COMMENT = createField(DSL.name("LEADER_COMMENT"), SQLDataType.CLOB, this, "「leaderComment」- Comment from leader");

    /**
     * The column <code>ZDB.T_OA_TRAINING.REVIEWER</code>. 「reviewer」- The
     * training reviewer
     */
    public final TableField<TOaTrainingRecord, String> REVIEWER = createField(DSL.name("REVIEWER"), SQLDataType.VARCHAR(36), this, "「reviewer」- The training reviewer");

    /**
     * The column <code>ZDB.T_OA_TRAINING.REVIEWER_COMMENT</code>.
     * 「reviewerComment」- Comment from reviewer
     */
    public final TableField<TOaTrainingRecord, String> REVIEWER_COMMENT = createField(DSL.name("REVIEWER_COMMENT"), SQLDataType.CLOB, this, "「reviewerComment」- Comment from reviewer");

    private TOaTraining(Name alias, Table<TOaTrainingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TOaTraining(Name alias, Table<TOaTrainingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ZDB.T_OA_TRAINING</code> table reference
     */
    public TOaTraining(String alias) {
        this(DSL.name(alias), T_OA_TRAINING);
    }

    /**
     * Create an aliased <code>ZDB.T_OA_TRAINING</code> table reference
     */
    public TOaTraining(Name alias) {
        this(alias, T_OA_TRAINING);
    }

    /**
     * Create a <code>ZDB.T_OA_TRAINING</code> table reference
     */
    public TOaTraining() {
        this(DSL.name("T_OA_TRAINING"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<TOaTrainingRecord> getPrimaryKey() {
        return Keys.KEY_T_OA_TRAINING_PRIMARY;
    }

    @Override
    public TOaTraining as(String alias) {
        return new TOaTraining(DSL.name(alias), this);
    }

    @Override
    public TOaTraining as(Name alias) {
        return new TOaTraining(alias, this);
    }

    @Override
    public TOaTraining as(Table<?> alias) {
        return new TOaTraining(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOaTraining rename(String name) {
        return new TOaTraining(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOaTraining rename(Name name) {
        return new TOaTraining(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOaTraining rename(Table<?> name) {
        return new TOaTraining(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaTraining where(Condition condition) {
        return new TOaTraining(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaTraining where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaTraining where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaTraining where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOaTraining where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOaTraining where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOaTraining where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOaTraining where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaTraining whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaTraining whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
