/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.erp.domain.tables;


import io.zerows.extension.commerce.erp.domain.Keys;
import io.zerows.extension.commerce.erp.domain.Zdb;
import io.zerows.extension.commerce.erp.domain.tables.records.TOaTripRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TOaTrip extends TableImpl<TOaTripRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.T_OA_TRIP</code>
     */
    public static final TOaTrip T_OA_TRIP = new TOaTrip();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOaTripRecord> getRecordType() {
        return TOaTripRecord.class;
    }

    /**
     * The column <code>ZDB.T_OA_TRIP.KEY</code>. 「key」- Ticket Primary Key
     */
    public final TableField<TOaTripRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- Ticket Primary Key");

    /**
     * The column <code>ZDB.T_OA_TRIP.COMMENT_EXTENSION</code>.
     * 「commentExtension」- Extension Comment
     */
    public final TableField<TOaTripRecord, String> COMMENT_EXTENSION = createField(DSL.name("COMMENT_EXTENSION"), SQLDataType.CLOB, this, "「commentExtension」- Extension Comment");

    /**
     * The column <code>ZDB.T_OA_TRIP.REQUEST_BY</code>. 「requestBy」- Request
     * User
     */
    public final TableField<TOaTripRecord, String> REQUEST_BY = createField(DSL.name("REQUEST_BY"), SQLDataType.VARCHAR(36), this, "「requestBy」- Request User");

    /**
     * The column <code>ZDB.T_OA_TRIP.START_AT</code>. 「startAt」- From
     */
    public final TableField<TOaTripRecord, LocalDateTime> START_AT = createField(DSL.name("START_AT"), SQLDataType.LOCALDATETIME(0), this, "「startAt」- From");

    /**
     * The column <code>ZDB.T_OA_TRIP.END_AT</code>. 「endAt」- To
     */
    public final TableField<TOaTripRecord, LocalDateTime> END_AT = createField(DSL.name("END_AT"), SQLDataType.LOCALDATETIME(0), this, "「endAt」- To");

    /**
     * The column <code>ZDB.T_OA_TRIP.DAYS</code>. 「days」- Duration
     */
    public final TableField<TOaTripRecord, Integer> DAYS = createField(DSL.name("DAYS"), SQLDataType.INTEGER, this, "「days」- Duration");

    /**
     * The column <code>ZDB.T_OA_TRIP.TRIP_PROVINCE</code>. 「tripProvince」- Trip
     * Province
     */
    public final TableField<TOaTripRecord, String> TRIP_PROVINCE = createField(DSL.name("TRIP_PROVINCE"), SQLDataType.VARCHAR(36), this, "「tripProvince」- Trip Province");

    /**
     * The column <code>ZDB.T_OA_TRIP.TRIP_CITY</code>. 「tripCity」- Trip City
     */
    public final TableField<TOaTripRecord, String> TRIP_CITY = createField(DSL.name("TRIP_CITY"), SQLDataType.VARCHAR(36), this, "「tripCity」- Trip City");

    /**
     * The column <code>ZDB.T_OA_TRIP.TRIP_ADDRESS</code>. 「tripAddress」- Trip
     * Address
     */
    public final TableField<TOaTripRecord, String> TRIP_ADDRESS = createField(DSL.name("TRIP_ADDRESS"), SQLDataType.CLOB, this, "「tripAddress」- Trip Address");

    /**
     * The column <code>ZDB.T_OA_TRIP.REASON</code>. 「reason」- The reason to be
     * done
     */
    public final TableField<TOaTripRecord, String> REASON = createField(DSL.name("REASON"), SQLDataType.CLOB, this, "「reason」- The reason to be done");

    /**
     * The column <code>ZDB.T_OA_TRIP.WORK_CONTENT</code>. 「workContent」-
     * Working Assignment Content
     */
    public final TableField<TOaTripRecord, String> WORK_CONTENT = createField(DSL.name("WORK_CONTENT"), SQLDataType.CLOB, this, "「workContent」- Working Assignment Content");

    private TOaTrip(Name alias, Table<TOaTripRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TOaTrip(Name alias, Table<TOaTripRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ZDB.T_OA_TRIP</code> table reference
     */
    public TOaTrip(String alias) {
        this(DSL.name(alias), T_OA_TRIP);
    }

    /**
     * Create an aliased <code>ZDB.T_OA_TRIP</code> table reference
     */
    public TOaTrip(Name alias) {
        this(alias, T_OA_TRIP);
    }

    /**
     * Create a <code>ZDB.T_OA_TRIP</code> table reference
     */
    public TOaTrip() {
        this(DSL.name("T_OA_TRIP"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<TOaTripRecord> getPrimaryKey() {
        return Keys.KEY_T_OA_TRIP_PRIMARY;
    }

    @Override
    public TOaTrip as(String alias) {
        return new TOaTrip(DSL.name(alias), this);
    }

    @Override
    public TOaTrip as(Name alias) {
        return new TOaTrip(alias, this);
    }

    @Override
    public TOaTrip as(Table<?> alias) {
        return new TOaTrip(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOaTrip rename(String name) {
        return new TOaTrip(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOaTrip rename(Name name) {
        return new TOaTrip(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOaTrip rename(Table<?> name) {
        return new TOaTrip(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaTrip where(Condition condition) {
        return new TOaTrip(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaTrip where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaTrip where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaTrip where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOaTrip where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOaTrip where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOaTrip where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOaTrip where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaTrip whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaTrip whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
