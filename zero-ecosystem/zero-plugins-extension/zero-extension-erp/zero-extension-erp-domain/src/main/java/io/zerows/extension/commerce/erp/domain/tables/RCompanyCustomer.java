/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.erp.domain.tables;


import io.zerows.extension.commerce.erp.domain.Keys;
import io.zerows.extension.commerce.erp.domain.Zdb;
import io.zerows.extension.commerce.erp.domain.tables.records.RCompanyCustomerRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RCompanyCustomer extends TableImpl<RCompanyCustomerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.R_COMPANY_CUSTOMER</code>
     */
    public static final RCompanyCustomer R_COMPANY_CUSTOMER = new RCompanyCustomer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RCompanyCustomerRecord> getRecordType() {
        return RCompanyCustomerRecord.class;
    }

    /**
     * The column <code>ZDB.R_COMPANY_CUSTOMER.COMPANY_ID</code>. 「companyId」-
     * 企业的ID
     */
    public final TableField<RCompanyCustomerRecord, String> COMPANY_ID = createField(DSL.name("COMPANY_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「companyId」- 企业的ID");

    /**
     * The column <code>ZDB.R_COMPANY_CUSTOMER.CUSTOMER_ID</code>. 「customerId」-
     * 客户信息的ID
     */
    public final TableField<RCompanyCustomerRecord, String> CUSTOMER_ID = createField(DSL.name("CUSTOMER_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「customerId」- 客户信息的ID");

    /**
     * The column <code>ZDB.R_COMPANY_CUSTOMER.LINK_COMPONENT</code>.
     * 「linkComponent」- 关联执行组件（扩展用）
     */
    public final TableField<RCompanyCustomerRecord, String> LINK_COMPONENT = createField(DSL.name("LINK_COMPONENT"), SQLDataType.VARCHAR(255), this, "「linkComponent」- 关联执行组件（扩展用）");

    /**
     * The column <code>ZDB.R_COMPANY_CUSTOMER.COMMENT</code>. 「comment」- 关系备注
     */
    public final TableField<RCompanyCustomerRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB(65535), this, "「comment」- 关系备注");

    private RCompanyCustomer(Name alias, Table<RCompanyCustomerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RCompanyCustomer(Name alias, Table<RCompanyCustomerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ZDB.R_COMPANY_CUSTOMER</code> table reference
     */
    public RCompanyCustomer(String alias) {
        this(DSL.name(alias), R_COMPANY_CUSTOMER);
    }

    /**
     * Create an aliased <code>ZDB.R_COMPANY_CUSTOMER</code> table reference
     */
    public RCompanyCustomer(Name alias) {
        this(alias, R_COMPANY_CUSTOMER);
    }

    /**
     * Create a <code>ZDB.R_COMPANY_CUSTOMER</code> table reference
     */
    public RCompanyCustomer() {
        this(DSL.name("R_COMPANY_CUSTOMER"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<RCompanyCustomerRecord> getPrimaryKey() {
        return Keys.KEY_R_COMPANY_CUSTOMER_PRIMARY;
    }

    @Override
    public RCompanyCustomer as(String alias) {
        return new RCompanyCustomer(DSL.name(alias), this);
    }

    @Override
    public RCompanyCustomer as(Name alias) {
        return new RCompanyCustomer(alias, this);
    }

    @Override
    public RCompanyCustomer as(Table<?> alias) {
        return new RCompanyCustomer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RCompanyCustomer rename(String name) {
        return new RCompanyCustomer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RCompanyCustomer rename(Name name) {
        return new RCompanyCustomer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RCompanyCustomer rename(Table<?> name) {
        return new RCompanyCustomer(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RCompanyCustomer where(Condition condition) {
        return new RCompanyCustomer(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RCompanyCustomer where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RCompanyCustomer where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RCompanyCustomer where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RCompanyCustomer where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RCompanyCustomer where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RCompanyCustomer where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RCompanyCustomer where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RCompanyCustomer whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RCompanyCustomer whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
