/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.erp.domain.tables.records;


import io.r2mo.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.erp.domain.tables.EDept;
import io.zerows.extension.commerce.erp.domain.tables.interfaces.IEDept;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


import static io.r2mo.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EDeptRecord extends UpdatableRecordImpl<EDeptRecord> implements VertxPojo, IEDept {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ZDB.E_DEPT.KEY</code>. 「key」- 部门主键
     */
    @Override
    public EDeptRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.KEY</code>. 「key」- 部门主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.NAME</code>. 「name」- 部门名称
     */
    @Override
    public EDeptRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.NAME</code>. 「name」- 部门名称
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.CODE</code>. 「code」- 部门编号
     */
    @Override
    public EDeptRecord setCode(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.CODE</code>. 「code」- 部门编号
     */
    @Override
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.MANAGER_ID</code>. 「managerId」- 部门经理
     */
    @Override
    public EDeptRecord setManagerId(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.MANAGER_ID</code>. 「managerId」- 部门经理
     */
    @Override
    public String getManagerId() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.MANAGER_NAME</code>. 「managerName」- 部门名称
     */
    @Override
    public EDeptRecord setManagerName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.MANAGER_NAME</code>. 「managerName」- 部门名称
     */
    @Override
    public String getManagerName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.COMPANY_ID</code>. 「companyId」- 所属公司
     */
    @Override
    public EDeptRecord setCompanyId(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.COMPANY_ID</code>. 「companyId」- 所属公司
     */
    @Override
    public String getCompanyId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.DEPT_ID</code>. 「deptId」- 父部门
     */
    @Override
    public EDeptRecord setDeptId(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.DEPT_ID</code>. 「deptId」- 父部门
     */
    @Override
    public String getDeptId() {
        return (String) get(6);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.COMMENT</code>. 「comment」- 部门备注
     */
    @Override
    public EDeptRecord setComment(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.COMMENT</code>. 「comment」- 部门备注
     */
    @Override
    public String getComment() {
        return (String) get(7);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public EDeptRecord setMetadata(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return (String) get(8);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public EDeptRecord setActive(Boolean value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(9);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public EDeptRecord setSigma(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(10);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public EDeptRecord setLanguage(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(11);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public EDeptRecord setCreatedAt(LocalDateTime value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(12);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public EDeptRecord setCreatedBy(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(13);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public EDeptRecord setUpdatedAt(LocalDateTime value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(14);
    }

    /**
     * Setter for <code>ZDB.E_DEPT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public EDeptRecord setUpdatedBy(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_DEPT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(15);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IEDept from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setManagerId(from.getManagerId());
        setManagerName(from.getManagerName());
        setCompanyId(from.getCompanyId());
        setDeptId(from.getDeptId());
        setComment(from.getComment());
        setMetadata(from.getMetadata());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
        resetTouchedOnNotNull();
    }

    @Override
    public <E extends IEDept> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EDeptRecord
     */
    public EDeptRecord() {
        super(EDept.E_DEPT);
    }

    /**
     * Create a detached, initialised EDeptRecord
     */
    public EDeptRecord(String key, String name, String code, String managerId, String managerName, String companyId, String deptId, String comment, String metadata, Boolean active, String sigma, String language, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(EDept.E_DEPT);

        setKey(key);
        setName(name);
        setCode(code);
        setManagerId(managerId);
        setManagerName(managerName);
        setCompanyId(companyId);
        setDeptId(deptId);
        setComment(comment);
        setMetadata(metadata);
        setActive(active);
        setSigma(sigma);
        setLanguage(language);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised EDeptRecord
     */
    public EDeptRecord(IEDept value) {
        super(EDept.E_DEPT);

        if (value != null) {
            setKey(value.getKey());
            setName(value.getName());
            setCode(value.getCode());
            setManagerId(value.getManagerId());
            setManagerName(value.getManagerName());
            setCompanyId(value.getCompanyId());
            setDeptId(value.getDeptId());
            setComment(value.getComment());
            setMetadata(value.getMetadata());
            setActive(value.getActive());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            resetTouchedOnNotNull();
        }
    }

        public EDeptRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
