/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.erp.domain.tables;


import io.zerows.extension.commerce.erp.domain.Keys;
import io.zerows.extension.commerce.erp.domain.Zdb;
import io.zerows.extension.commerce.erp.domain.tables.records.TOaVacationRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TOaVacation extends TableImpl<TOaVacationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.T_OA_VACATION</code>
     */
    public static final TOaVacation T_OA_VACATION = new TOaVacation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOaVacationRecord> getRecordType() {
        return TOaVacationRecord.class;
    }

    /**
     * The column <code>ZDB.T_OA_VACATION.KEY</code>. 「key」- Ticket Primary Key
     */
    public final TableField<TOaVacationRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- Ticket Primary Key");

    /**
     * The column <code>ZDB.T_OA_VACATION.COMMENT_EXTENSION</code>.
     * 「commentExtension」- Extension Comment
     */
    public final TableField<TOaVacationRecord, String> COMMENT_EXTENSION = createField(DSL.name("COMMENT_EXTENSION"), SQLDataType.CLOB, this, "「commentExtension」- Extension Comment");

    /**
     * The column <code>ZDB.T_OA_VACATION.REQUEST_BY</code>. 「requestBy」-
     * Request User
     */
    public final TableField<TOaVacationRecord, String> REQUEST_BY = createField(DSL.name("REQUEST_BY"), SQLDataType.VARCHAR(36), this, "「requestBy」- Request User");

    /**
     * The column <code>ZDB.T_OA_VACATION.CLASSIFICATION</code>.
     * 「classification」- The ticket related income type
     */
    public final TableField<TOaVacationRecord, String> CLASSIFICATION = createField(DSL.name("CLASSIFICATION"), SQLDataType.VARCHAR(64), this, "「classification」- The ticket related income type");

    /**
     * The column <code>ZDB.T_OA_VACATION.START_AT</code>. 「startAt」- From
     */
    public final TableField<TOaVacationRecord, LocalDateTime> START_AT = createField(DSL.name("START_AT"), SQLDataType.LOCALDATETIME(0), this, "「startAt」- From");

    /**
     * The column <code>ZDB.T_OA_VACATION.END_AT</code>. 「endAt」- To
     */
    public final TableField<TOaVacationRecord, LocalDateTime> END_AT = createField(DSL.name("END_AT"), SQLDataType.LOCALDATETIME(0), this, "「endAt」- To");

    /**
     * The column <code>ZDB.T_OA_VACATION.DAYS</code>. 「days」- Duration
     */
    public final TableField<TOaVacationRecord, Integer> DAYS = createField(DSL.name("DAYS"), SQLDataType.INTEGER, this, "「days」- Duration");

    /**
     * The column <code>ZDB.T_OA_VACATION.REASON</code>. 「reason」- The reason to
     * be done
     */
    public final TableField<TOaVacationRecord, String> REASON = createField(DSL.name("REASON"), SQLDataType.CLOB, this, "「reason」- The reason to be done");

    /**
     * The column <code>ZDB.T_OA_VACATION.WORK_CONTENT</code>. 「workContent」-
     * Working Assignment Content
     */
    public final TableField<TOaVacationRecord, String> WORK_CONTENT = createField(DSL.name("WORK_CONTENT"), SQLDataType.CLOB, this, "「workContent」- Working Assignment Content");

    private TOaVacation(Name alias, Table<TOaVacationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TOaVacation(Name alias, Table<TOaVacationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ZDB.T_OA_VACATION</code> table reference
     */
    public TOaVacation(String alias) {
        this(DSL.name(alias), T_OA_VACATION);
    }

    /**
     * Create an aliased <code>ZDB.T_OA_VACATION</code> table reference
     */
    public TOaVacation(Name alias) {
        this(alias, T_OA_VACATION);
    }

    /**
     * Create a <code>ZDB.T_OA_VACATION</code> table reference
     */
    public TOaVacation() {
        this(DSL.name("T_OA_VACATION"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<TOaVacationRecord> getPrimaryKey() {
        return Keys.KEY_T_OA_VACATION_PRIMARY;
    }

    @Override
    public TOaVacation as(String alias) {
        return new TOaVacation(DSL.name(alias), this);
    }

    @Override
    public TOaVacation as(Name alias) {
        return new TOaVacation(alias, this);
    }

    @Override
    public TOaVacation as(Table<?> alias) {
        return new TOaVacation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOaVacation rename(String name) {
        return new TOaVacation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOaVacation rename(Name name) {
        return new TOaVacation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOaVacation rename(Table<?> name) {
        return new TOaVacation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaVacation where(Condition condition) {
        return new TOaVacation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaVacation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaVacation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaVacation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOaVacation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOaVacation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOaVacation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TOaVacation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaVacation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TOaVacation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
