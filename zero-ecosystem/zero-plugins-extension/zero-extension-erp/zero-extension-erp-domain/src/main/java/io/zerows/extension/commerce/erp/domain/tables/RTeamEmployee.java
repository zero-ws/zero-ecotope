/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.erp.domain.tables;


import io.zerows.extension.commerce.erp.domain.Keys;
import io.zerows.extension.commerce.erp.domain.Zdb;
import io.zerows.extension.commerce.erp.domain.tables.records.RTeamEmployeeRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RTeamEmployee extends TableImpl<RTeamEmployeeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.R_TEAM_EMPLOYEE</code>
     */
    public static final RTeamEmployee R_TEAM_EMPLOYEE = new RTeamEmployee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RTeamEmployeeRecord> getRecordType() {
        return RTeamEmployeeRecord.class;
    }

    /**
     * The column <code>ZDB.R_TEAM_EMPLOYEE.TEAM_ID</code>. 「teamId」- 组的ID
     */
    public final TableField<RTeamEmployeeRecord, String> TEAM_ID = createField(DSL.name("TEAM_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「teamId」- 组的ID");

    /**
     * The column <code>ZDB.R_TEAM_EMPLOYEE.EMPLOYEE_ID</code>. 「employeeId」-
     * 员工ID
     */
    public final TableField<RTeamEmployeeRecord, String> EMPLOYEE_ID = createField(DSL.name("EMPLOYEE_ID"), SQLDataType.VARCHAR(36).nullable(false), this, "「employeeId」- 员工ID");

    /**
     * The column <code>ZDB.R_TEAM_EMPLOYEE.LINK_COMPONENT</code>.
     * 「linkComponent」- 关联执行组件（扩展用）
     */
    public final TableField<RTeamEmployeeRecord, String> LINK_COMPONENT = createField(DSL.name("LINK_COMPONENT"), SQLDataType.VARCHAR(255), this, "「linkComponent」- 关联执行组件（扩展用）");

    /**
     * The column <code>ZDB.R_TEAM_EMPLOYEE.COMMENT</code>. 「comment」- 关系备注
     */
    public final TableField<RTeamEmployeeRecord, String> COMMENT = createField(DSL.name("COMMENT"), SQLDataType.CLOB(65535), this, "「comment」- 关系备注");

    private RTeamEmployee(Name alias, Table<RTeamEmployeeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RTeamEmployee(Name alias, Table<RTeamEmployeeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ZDB.R_TEAM_EMPLOYEE</code> table reference
     */
    public RTeamEmployee(String alias) {
        this(DSL.name(alias), R_TEAM_EMPLOYEE);
    }

    /**
     * Create an aliased <code>ZDB.R_TEAM_EMPLOYEE</code> table reference
     */
    public RTeamEmployee(Name alias) {
        this(alias, R_TEAM_EMPLOYEE);
    }

    /**
     * Create a <code>ZDB.R_TEAM_EMPLOYEE</code> table reference
     */
    public RTeamEmployee() {
        this(DSL.name("R_TEAM_EMPLOYEE"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<RTeamEmployeeRecord> getPrimaryKey() {
        return Keys.KEY_R_TEAM_EMPLOYEE_PRIMARY;
    }

    @Override
    public RTeamEmployee as(String alias) {
        return new RTeamEmployee(DSL.name(alias), this);
    }

    @Override
    public RTeamEmployee as(Name alias) {
        return new RTeamEmployee(alias, this);
    }

    @Override
    public RTeamEmployee as(Table<?> alias) {
        return new RTeamEmployee(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RTeamEmployee rename(String name) {
        return new RTeamEmployee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RTeamEmployee rename(Name name) {
        return new RTeamEmployee(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RTeamEmployee rename(Table<?> name) {
        return new RTeamEmployee(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RTeamEmployee where(Condition condition) {
        return new RTeamEmployee(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RTeamEmployee where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RTeamEmployee where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RTeamEmployee where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RTeamEmployee where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RTeamEmployee where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RTeamEmployee where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RTeamEmployee where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RTeamEmployee whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RTeamEmployee whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
