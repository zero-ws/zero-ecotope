/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.erp.domain.tables.records;


import io.r2mo.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.erp.domain.tables.TOaTraining;
import io.zerows.extension.commerce.erp.domain.tables.interfaces.ITOaTraining;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


import static io.r2mo.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TOaTrainingRecord extends UpdatableRecordImpl<TOaTrainingRecord> implements VertxPojo, ITOaTraining {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ZDB.T_OA_TRAINING.KEY</code>. 「key」- Ticket Primary Key
     */
    @Override
    public TOaTrainingRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.T_OA_TRAINING.KEY</code>. 「key」- Ticket Primary Key
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.T_OA_TRAINING.COMMENT_EXTENSION</code>.
     * 「commentExtension」- Extension Comment
     */
    @Override
    public TOaTrainingRecord setCommentExtension(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.T_OA_TRAINING.COMMENT_EXTENSION</code>.
     * 「commentExtension」- Extension Comment
     */
    @Override
    public String getCommentExtension() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.T_OA_TRAINING.START_AT</code>. 「startAt」- From
     */
    @Override
    public TOaTrainingRecord setStartAt(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.T_OA_TRAINING.START_AT</code>. 「startAt」- From
     */
    @Override
    public LocalDateTime getStartAt() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>ZDB.T_OA_TRAINING.END_AT</code>. 「endAt」- To
     */
    @Override
    public TOaTrainingRecord setEndAt(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.T_OA_TRAINING.END_AT</code>. 「endAt」- To
     */
    @Override
    public LocalDateTime getEndAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>ZDB.T_OA_TRAINING.TRAIN_LOCATION</code>.
     * 「trainLocation」- The location for training
     */
    @Override
    public TOaTrainingRecord setTrainLocation(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.T_OA_TRAINING.TRAIN_LOCATION</code>.
     * 「trainLocation」- The location for training
     */
    @Override
    public String getTrainLocation() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.T_OA_TRAINING.TRAIN_MODE</code>. 「trainMode」- The
     * mode of training
     */
    @Override
    public TOaTrainingRecord setTrainMode(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.T_OA_TRAINING.TRAIN_MODE</code>. 「trainMode」- The
     * mode of training
     */
    @Override
    public String getTrainMode() {
        return (String) get(5);
    }

    /**
     * Setter for <code>ZDB.T_OA_TRAINING.LEADER</code>. 「leader」- The training
     * leader
     */
    @Override
    public TOaTrainingRecord setLeader(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.T_OA_TRAINING.LEADER</code>. 「leader」- The training
     * leader
     */
    @Override
    public String getLeader() {
        return (String) get(6);
    }

    /**
     * Setter for <code>ZDB.T_OA_TRAINING.LEADER_COMMENT</code>.
     * 「leaderComment」- Comment from leader
     */
    @Override
    public TOaTrainingRecord setLeaderComment(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.T_OA_TRAINING.LEADER_COMMENT</code>.
     * 「leaderComment」- Comment from leader
     */
    @Override
    public String getLeaderComment() {
        return (String) get(7);
    }

    /**
     * Setter for <code>ZDB.T_OA_TRAINING.REVIEWER</code>. 「reviewer」- The
     * training reviewer
     */
    @Override
    public TOaTrainingRecord setReviewer(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.T_OA_TRAINING.REVIEWER</code>. 「reviewer」- The
     * training reviewer
     */
    @Override
    public String getReviewer() {
        return (String) get(8);
    }

    /**
     * Setter for <code>ZDB.T_OA_TRAINING.REVIEWER_COMMENT</code>.
     * 「reviewerComment」- Comment from reviewer
     */
    @Override
    public TOaTrainingRecord setReviewerComment(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.T_OA_TRAINING.REVIEWER_COMMENT</code>.
     * 「reviewerComment」- Comment from reviewer
     */
    @Override
    public String getReviewerComment() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(ITOaTraining from) {
        setKey(from.getKey());
        setCommentExtension(from.getCommentExtension());
        setStartAt(from.getStartAt());
        setEndAt(from.getEndAt());
        setTrainLocation(from.getTrainLocation());
        setTrainMode(from.getTrainMode());
        setLeader(from.getLeader());
        setLeaderComment(from.getLeaderComment());
        setReviewer(from.getReviewer());
        setReviewerComment(from.getReviewerComment());
        resetTouchedOnNotNull();
    }

    @Override
    public <E extends ITOaTraining> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TOaTrainingRecord
     */
    public TOaTrainingRecord() {
        super(TOaTraining.T_OA_TRAINING);
    }

    /**
     * Create a detached, initialised TOaTrainingRecord
     */
    public TOaTrainingRecord(String key, String commentExtension, LocalDateTime startAt, LocalDateTime endAt, String trainLocation, String trainMode, String leader, String leaderComment, String reviewer, String reviewerComment) {
        super(TOaTraining.T_OA_TRAINING);

        setKey(key);
        setCommentExtension(commentExtension);
        setStartAt(startAt);
        setEndAt(endAt);
        setTrainLocation(trainLocation);
        setTrainMode(trainMode);
        setLeader(leader);
        setLeaderComment(leaderComment);
        setReviewer(reviewer);
        setReviewerComment(reviewerComment);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised TOaTrainingRecord
     */
    public TOaTrainingRecord(ITOaTraining value) {
        super(TOaTraining.T_OA_TRAINING);

        if (value != null) {
            setKey(value.getKey());
            setCommentExtension(value.getCommentExtension());
            setStartAt(value.getStartAt());
            setEndAt(value.getEndAt());
            setTrainLocation(value.getTrainLocation());
            setTrainMode(value.getTrainMode());
            setLeader(value.getLeader());
            setLeaderComment(value.getLeaderComment());
            setReviewer(value.getReviewer());
            setReviewerComment(value.getReviewerComment());
            resetTouchedOnNotNull();
        }
    }

        public TOaTrainingRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
