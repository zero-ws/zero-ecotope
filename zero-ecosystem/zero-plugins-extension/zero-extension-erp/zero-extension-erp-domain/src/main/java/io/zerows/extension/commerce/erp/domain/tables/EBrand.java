/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.erp.domain.tables;


import io.zerows.extension.commerce.erp.domain.Indexes;
import io.zerows.extension.commerce.erp.domain.Keys;
import io.zerows.extension.commerce.erp.domain.Zdb;
import io.zerows.extension.commerce.erp.domain.tables.records.EBrandRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EBrand extends TableImpl<EBrandRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.E_BRAND</code>
     */
    public static final EBrand E_BRAND = new EBrand();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EBrandRecord> getRecordType() {
        return EBrandRecord.class;
    }

    /**
     * The column <code>ZDB.E_BRAND.KEY</code>. 「key」- 品牌ID
     */
    public final TableField<EBrandRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 品牌ID");

    /**
     * The column <code>ZDB.E_BRAND.CODE</code>. 「code」- 品牌编码
     */
    public final TableField<EBrandRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 品牌编码");

    /**
     * The column <code>ZDB.E_BRAND.NAME</code>. 「name」- 品牌名称
     */
    public final TableField<EBrandRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 品牌名称");

    /**
     * The column <code>ZDB.E_BRAND.ALIAS</code>. 「alias」- 品牌别名
     */
    public final TableField<EBrandRecord, String> ALIAS = createField(DSL.name("ALIAS"), SQLDataType.VARCHAR(255), this, "「alias」- 品牌别名");

    /**
     * The column <code>ZDB.E_BRAND.COMPANY_NAME</code>. 「companyName」- 品牌公司名
     */
    public final TableField<EBrandRecord, String> COMPANY_NAME = createField(DSL.name("COMPANY_NAME"), SQLDataType.VARCHAR(128), this, "「companyName」- 品牌公司名");

    /**
     * The column <code>ZDB.E_BRAND.CATEGORY_CODE</code>. 「categoryCode」- 类别代码
     */
    public final TableField<EBrandRecord, String> CATEGORY_CODE = createField(DSL.name("CATEGORY_CODE"), SQLDataType.VARCHAR(16), this, "「categoryCode」- 类别代码");

    /**
     * The column <code>ZDB.E_BRAND.CATEGORY_NAME</code>. 「categoryName」- 类别名称
     */
    public final TableField<EBrandRecord, String> CATEGORY_NAME = createField(DSL.name("CATEGORY_NAME"), SQLDataType.VARCHAR(128), this, "「categoryName」- 类别名称");

    /**
     * The column <code>ZDB.E_BRAND.AREA</code>. 「area」- 区域码，如：GB/T2659-2000国际标准
     */
    public final TableField<EBrandRecord, String> AREA = createField(DSL.name("AREA"), SQLDataType.VARCHAR(128), this, "「area」- 区域码，如：GB/T2659-2000国际标准");

    /**
     * The column <code>ZDB.E_BRAND.AREA_NAME</code>. 「areaName」- 区域名称
     */
    public final TableField<EBrandRecord, String> AREA_NAME = createField(DSL.name("AREA_NAME"), SQLDataType.VARCHAR(128), this, "「areaName」- 区域名称");

    /**
     * The column <code>ZDB.E_BRAND.AREA_CATEGORY</code>. 「areaCategory」- 区域类别码
     */
    public final TableField<EBrandRecord, String> AREA_CATEGORY = createField(DSL.name("AREA_CATEGORY"), SQLDataType.VARCHAR(16), this, "「areaCategory」- 区域类别码");

    /**
     * The column <code>ZDB.E_BRAND.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<EBrandRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB(65535), this, "「metadata」- 附加配置");

    /**
     * The column <code>ZDB.E_BRAND.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<EBrandRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>ZDB.E_BRAND.SIGMA</code>. 「sigma」- 统一标识（公司所属应用）
     */
    public final TableField<EBrandRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识（公司所属应用）");

    /**
     * The column <code>ZDB.E_BRAND.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<EBrandRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");

    /**
     * The column <code>ZDB.E_BRAND.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<EBrandRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");

    /**
     * The column <code>ZDB.E_BRAND.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<EBrandRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");

    /**
     * The column <code>ZDB.E_BRAND.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<EBrandRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");

    /**
     * The column <code>ZDB.E_BRAND.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<EBrandRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private EBrand(Name alias, Table<EBrandRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private EBrand(Name alias, Table<EBrandRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ZDB.E_BRAND</code> table reference
     */
    public EBrand(String alias) {
        this(DSL.name(alias), E_BRAND);
    }

    /**
     * Create an aliased <code>ZDB.E_BRAND</code> table reference
     */
    public EBrand(Name alias) {
        this(alias, E_BRAND);
    }

    /**
     * Create a <code>ZDB.E_BRAND</code> table reference
     */
    public EBrand() {
        this(DSL.name("E_BRAND"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.E_BRAND_IDX_E_BRAND_SIGMA);
    }

    @Override
    public UniqueKey<EBrandRecord> getPrimaryKey() {
        return Keys.KEY_E_BRAND_PRIMARY;
    }

    @Override
    public List<UniqueKey<EBrandRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_E_BRAND_CODE);
    }

    @Override
    public EBrand as(String alias) {
        return new EBrand(DSL.name(alias), this);
    }

    @Override
    public EBrand as(Name alias) {
        return new EBrand(alias, this);
    }

    @Override
    public EBrand as(Table<?> alias) {
        return new EBrand(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public EBrand rename(String name) {
        return new EBrand(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EBrand rename(Name name) {
        return new EBrand(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public EBrand rename(Table<?> name) {
        return new EBrand(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EBrand where(Condition condition) {
        return new EBrand(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EBrand where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EBrand where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EBrand where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EBrand where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EBrand where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EBrand where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public EBrand where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EBrand whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public EBrand whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
