/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.erp.domain.tables.records;


import io.r2mo.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.erp.domain.tables.EBrand;
import io.zerows.extension.commerce.erp.domain.tables.interfaces.IEBrand;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


import static io.r2mo.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EBrandRecord extends UpdatableRecordImpl<EBrandRecord> implements VertxPojo, IEBrand {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ZDB.E_BRAND.KEY</code>. 「key」- 品牌ID
     */
    @Override
    public EBrandRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.KEY</code>. 「key」- 品牌ID
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.CODE</code>. 「code」- 品牌编码
     */
    @Override
    public EBrandRecord setCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.CODE</code>. 「code」- 品牌编码
     */
    @Override
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.NAME</code>. 「name」- 品牌名称
     */
    @Override
    public EBrandRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.NAME</code>. 「name」- 品牌名称
     */
    @Override
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.ALIAS</code>. 「alias」- 品牌别名
     */
    @Override
    public EBrandRecord setAlias(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.ALIAS</code>. 「alias」- 品牌别名
     */
    @Override
    public String getAlias() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.COMPANY_NAME</code>. 「companyName」- 品牌公司名
     */
    @Override
    public EBrandRecord setCompanyName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.COMPANY_NAME</code>. 「companyName」- 品牌公司名
     */
    @Override
    public String getCompanyName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.CATEGORY_CODE</code>. 「categoryCode」- 类别代码
     */
    @Override
    public EBrandRecord setCategoryCode(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.CATEGORY_CODE</code>. 「categoryCode」- 类别代码
     */
    @Override
    public String getCategoryCode() {
        return (String) get(5);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.CATEGORY_NAME</code>. 「categoryName」- 类别名称
     */
    @Override
    public EBrandRecord setCategoryName(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.CATEGORY_NAME</code>. 「categoryName」- 类别名称
     */
    @Override
    public String getCategoryName() {
        return (String) get(6);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.AREA</code>. 「area」- 区域码，如：GB/T2659-2000国际标准
     */
    @Override
    public EBrandRecord setArea(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.AREA</code>. 「area」- 区域码，如：GB/T2659-2000国际标准
     */
    @Override
    public String getArea() {
        return (String) get(7);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.AREA_NAME</code>. 「areaName」- 区域名称
     */
    @Override
    public EBrandRecord setAreaName(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.AREA_NAME</code>. 「areaName」- 区域名称
     */
    @Override
    public String getAreaName() {
        return (String) get(8);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.AREA_CATEGORY</code>. 「areaCategory」- 区域类别码
     */
    @Override
    public EBrandRecord setAreaCategory(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.AREA_CATEGORY</code>. 「areaCategory」- 区域类别码
     */
    @Override
    public String getAreaCategory() {
        return (String) get(9);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public EBrandRecord setMetadata(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return (String) get(10);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public EBrandRecord setActive(Boolean value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(11);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.SIGMA</code>. 「sigma」- 统一标识（公司所属应用）
     */
    @Override
    public EBrandRecord setSigma(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.SIGMA</code>. 「sigma」- 统一标识（公司所属应用）
     */
    @Override
    public String getSigma() {
        return (String) get(12);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public EBrandRecord setLanguage(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(13);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public EBrandRecord setCreatedAt(LocalDateTime value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(14);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public EBrandRecord setCreatedBy(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(15);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public EBrandRecord setUpdatedAt(LocalDateTime value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(16);
    }

    /**
     * Setter for <code>ZDB.E_BRAND.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public EBrandRecord setUpdatedBy(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_BRAND.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(17);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IEBrand from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setName(from.getName());
        setAlias(from.getAlias());
        setCompanyName(from.getCompanyName());
        setCategoryCode(from.getCategoryCode());
        setCategoryName(from.getCategoryName());
        setArea(from.getArea());
        setAreaName(from.getAreaName());
        setAreaCategory(from.getAreaCategory());
        setMetadata(from.getMetadata());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
        resetTouchedOnNotNull();
    }

    @Override
    public <E extends IEBrand> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EBrandRecord
     */
    public EBrandRecord() {
        super(EBrand.E_BRAND);
    }

    /**
     * Create a detached, initialised EBrandRecord
     */
    public EBrandRecord(String key, String code, String name, String alias, String companyName, String categoryCode, String categoryName, String area, String areaName, String areaCategory, String metadata, Boolean active, String sigma, String language, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(EBrand.E_BRAND);

        setKey(key);
        setCode(code);
        setName(name);
        setAlias(alias);
        setCompanyName(companyName);
        setCategoryCode(categoryCode);
        setCategoryName(categoryName);
        setArea(area);
        setAreaName(areaName);
        setAreaCategory(areaCategory);
        setMetadata(metadata);
        setActive(active);
        setSigma(sigma);
        setLanguage(language);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised EBrandRecord
     */
    public EBrandRecord(IEBrand value) {
        super(EBrand.E_BRAND);

        if (value != null) {
            setKey(value.getKey());
            setCode(value.getCode());
            setName(value.getName());
            setAlias(value.getAlias());
            setCompanyName(value.getCompanyName());
            setCategoryCode(value.getCategoryCode());
            setCategoryName(value.getCategoryName());
            setArea(value.getArea());
            setAreaName(value.getAreaName());
            setAreaCategory(value.getAreaCategory());
            setMetadata(value.getMetadata());
            setActive(value.getActive());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            resetTouchedOnNotNull();
        }
    }

        public EBrandRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
