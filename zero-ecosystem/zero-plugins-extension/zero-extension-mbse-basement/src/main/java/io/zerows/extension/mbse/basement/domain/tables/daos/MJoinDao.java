/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.basement.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.mbse.basement.domain.tables.MJoin;
import io.zerows.extension.mbse.basement.domain.tables.records.MJoinRecord;
import org.jooq.Configuration;
import org.jooq.Record4;

import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MJoinDao extends AbstractVertxDAO<MJoinRecord, io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin, Record4<String, String, String, String>, Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin>>, Future<io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin>, Future<Integer>, Future<Record4<String, String, String, String>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<MJoinRecord, io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin, Record4<String, String, String, String>> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public MJoinDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(MJoin.M_JOIN, io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin.class, new JDBCClassicQueryExecutor<MJoinRecord, io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin, Record4<String, String, String, String>>(configuration, io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin.class, vertx));
    }

    @Override
    protected Record4<String, String, String, String> getId(io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin object) {
        return compositeKeyRecord(object.getModel(), object.getEntity(), object.getEntityKey(), object.getNamespace());
    }

    /**
     * Find records that have <code>ENTITY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin>> findManyByEntity(Collection<String> values) {
        return findManyByCondition(MJoin.M_JOIN.ENTITY.in(values));
    }

    /**
     * Find records that have <code>ENTITY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin>> findManyByEntity(Collection<String> values, int limit) {
        return findManyByCondition(MJoin.M_JOIN.ENTITY.in(values), limit);
    }

    /**
     * Find records that have <code>ENTITY_KEY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin>> findManyByEntityKey(Collection<String> values) {
        return findManyByCondition(MJoin.M_JOIN.ENTITY_KEY.in(values));
    }

    /**
     * Find records that have <code>ENTITY_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin>> findManyByEntityKey(Collection<String> values, int limit) {
        return findManyByCondition(MJoin.M_JOIN.ENTITY_KEY.in(values), limit);
    }

    /**
     * Find records that have <code>PRIORITY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin>> findManyByPriority(Collection<Integer> values) {
        return findManyByCondition(MJoin.M_JOIN.PRIORITY.in(values));
    }

    /**
     * Find records that have <code>PRIORITY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin>> findManyByPriority(Collection<Integer> values, int limit) {
        return findManyByCondition(MJoin.M_JOIN.PRIORITY.in(values), limit);
    }

    /**
     * Find records that have <code>NAMESPACE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin>> findManyByNamespace(Collection<String> values) {
        return findManyByCondition(MJoin.M_JOIN.NAMESPACE.in(values));
    }

    /**
     * Find records that have <code>NAMESPACE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin>> findManyByNamespace(Collection<String> values, int limit) {
        return findManyByCondition(MJoin.M_JOIN.NAMESPACE.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<MJoinRecord, io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin, Record4<String, String, String, String>> queryExecutor() {
        return (JDBCClassicQueryExecutor<MJoinRecord, io.zerows.extension.mbse.basement.domain.tables.pojos.MJoin, Record4<String, String, String, String>>) super.queryExecutor();
    }
}
