/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.basement.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.mbse.basement.domain.tables.MModel;
import io.zerows.extension.mbse.basement.domain.tables.records.MModelRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MModelDao extends AbstractVertxDAO<MModelRecord, io.zerows.extension.mbse.basement.domain.tables.pojos.MModel, String, Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>>, Future<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<MModelRecord, io.zerows.extension.mbse.basement.domain.tables.pojos.MModel, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public MModelDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(MModel.M_MODEL, io.zerows.extension.mbse.basement.domain.tables.pojos.MModel.class, new JDBCClassicQueryExecutor<MModelRecord, io.zerows.extension.mbse.basement.domain.tables.pojos.MModel, String>(configuration, io.zerows.extension.mbse.basement.domain.tables.pojos.MModel.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.mbse.basement.domain.tables.pojos.MModel object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByIdentifier(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.IDENTIFIER.in(values));
    }

    /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByIdentifier(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.IDENTIFIER.in(values), limit);
    }

    /**
     * Find records that have <code>NAMESPACE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByNamespace(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.NAMESPACE.in(values));
    }

    /**
     * Find records that have <code>NAMESPACE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByNamespace(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.NAMESPACE.in(values), limit);
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByName(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>ALIAS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByAlias(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.ALIAS.in(values));
    }

    /**
     * Find records that have <code>ALIAS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByAlias(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.ALIAS.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByType(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>COMMENTS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByComments(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.COMMENTS.in(values));
    }

    /**
     * Find records that have <code>COMMENTS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByComments(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.COMMENTS.in(values), limit);
    }

    /**
     * Find records that have <code>CATEGORY_TREE IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByCategoryTree(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.CATEGORY_TREE.in(values));
    }

    /**
     * Find records that have <code>CATEGORY_TREE IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByCategoryTree(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.CATEGORY_TREE.in(values), limit);
    }

    /**
     * Find records that have <code>CATEGORY_ID IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByCategoryId(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.CATEGORY_ID.in(values));
    }

    /**
     * Find records that have <code>CATEGORY_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByCategoryId(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.CATEGORY_ID.in(values), limit);
    }

    /**
     * Find records that have <code>RULE_UNIQUE IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByRuleUnique(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.RULE_UNIQUE.in(values));
    }

    /**
     * Find records that have <code>RULE_UNIQUE IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByRuleUnique(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.RULE_UNIQUE.in(values), limit);
    }

    /**
     * Find records that have <code>IS_TRACK IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByIsTrack(final Collection<Boolean> values) {
        return findManyByCondition(MModel.M_MODEL.IS_TRACK.in(values));
    }

    /**
     * Find records that have <code>IS_TRACK IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByIsTrack(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.IS_TRACK.in(values), limit);
    }

    /**
     * Find records that have <code>SPIDER IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyBySpider(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.SPIDER.in(values));
    }

    /**
     * Find records that have <code>SPIDER IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyBySpider(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.SPIDER.in(values), limit);
    }

    /**
     * Find records that have <code>SPIDER_COMPONENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyBySpiderComponent(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.SPIDER_COMPONENT.in(values));
    }

    /**
     * Find records that have <code>SPIDER_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyBySpiderComponent(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.SPIDER_COMPONENT.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(MModel.M_MODEL.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(MModel.M_MODEL.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(MModel.M_MODEL.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(MModel.M_MODEL.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.basement.domain.tables.pojos.MModel>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(MModel.M_MODEL.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<MModelRecord, io.zerows.extension.mbse.basement.domain.tables.pojos.MModel, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<MModelRecord, io.zerows.extension.mbse.basement.domain.tables.pojos.MModel, String>) super.queryExecutor();
    }
}
