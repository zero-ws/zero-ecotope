/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.erp.domain.tables.records;


import io.r2mo.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.erp.domain.tables.EAsset;
import io.zerows.extension.commerce.erp.domain.tables.interfaces.IEAsset;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class EAssetRecord extends UpdatableRecordImpl<EAssetRecord> implements VertxPojo, IEAsset {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached EAssetRecord
     */
    public EAssetRecord() {
        super(EAsset.E_ASSET);
    }

    /**
     * Create a detached, initialised EAssetRecord
     */
    public EAssetRecord(final String key, final String name, final String code, final String type, final String status, final String modelNumber, final String unit, final Long num, final Long numDeprecating, final Long numDeprecated, final Long numUsing, final Long numUsed, final String wayChange, final String wayDeprecate, final String wayAccording, final LocalDateTime usedAt, final String usedBy, final String usedStatus, final BigDecimal vOriginal, final BigDecimal vTax, final BigDecimal vDeReady, final BigDecimal vNetJunk, final BigDecimal vNet, final BigDecimal vNetAmount, final BigDecimal vDeprecatedM, final BigDecimal vDeprecatedA, final String kFixed, final String kDeprecated, final String kAssignment, final String kTax, final String kDevalue, final String kChange, final String customerId, final LocalDateTime expiredAt, final String expiredComment, final String userId, final String storeId, final String deptId, final String companyId, final String parentId, final String comment, final String sigma, final String language, final Boolean active, final String metadata, final LocalDateTime enterAt, final String enterBy, final LocalDateTime accountAt, final String accountBy, final LocalDateTime scrapAt, final String scrapBy, final LocalDateTime createdAt, final String createdBy, final LocalDateTime updatedAt, final String updatedBy) {
        super(EAsset.E_ASSET);

        setKey(key);
        setName(name);
        setCode(code);
        setType(type);
        setStatus(status);
        setModelNumber(modelNumber);
        setUnit(unit);
        setNum(num);
        setNumDeprecating(numDeprecating);
        setNumDeprecated(numDeprecated);
        setNumUsing(numUsing);
        setNumUsed(numUsed);
        setWayChange(wayChange);
        setWayDeprecate(wayDeprecate);
        setWayAccording(wayAccording);
        setUsedAt(usedAt);
        setUsedBy(usedBy);
        setUsedStatus(usedStatus);
        setVOriginal(vOriginal);
        setVTax(vTax);
        setVDeReady(vDeReady);
        setVNetJunk(vNetJunk);
        setVNet(vNet);
        setVNetAmount(vNetAmount);
        setVDeprecatedM(vDeprecatedM);
        setVDeprecatedA(vDeprecatedA);
        setKFixed(kFixed);
        setKDeprecated(kDeprecated);
        setKAssignment(kAssignment);
        setKTax(kTax);
        setKDevalue(kDevalue);
        setKChange(kChange);
        setCustomerId(customerId);
        setExpiredAt(expiredAt);
        setExpiredComment(expiredComment);
        setUserId(userId);
        setStoreId(storeId);
        setDeptId(deptId);
        setCompanyId(companyId);
        setParentId(parentId);
        setComment(comment);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setEnterAt(enterAt);
        setEnterBy(enterBy);
        setAccountAt(accountAt);
        setAccountBy(accountBy);
        setScrapAt(scrapAt);
        setScrapBy(scrapBy);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised EAssetRecord
     */
    public EAssetRecord(final io.zerows.extension.commerce.erp.domain.tables.pojos.EAsset value) {
        super(EAsset.E_ASSET);

        if (value != null) {
            setKey(value.getKey());
            setName(value.getName());
            setCode(value.getCode());
            setType(value.getType());
            setStatus(value.getStatus());
            setModelNumber(value.getModelNumber());
            setUnit(value.getUnit());
            setNum(value.getNum());
            setNumDeprecating(value.getNumDeprecating());
            setNumDeprecated(value.getNumDeprecated());
            setNumUsing(value.getNumUsing());
            setNumUsed(value.getNumUsed());
            setWayChange(value.getWayChange());
            setWayDeprecate(value.getWayDeprecate());
            setWayAccording(value.getWayAccording());
            setUsedAt(value.getUsedAt());
            setUsedBy(value.getUsedBy());
            setUsedStatus(value.getUsedStatus());
            setVOriginal(value.getVOriginal());
            setVTax(value.getVTax());
            setVDeReady(value.getVDeReady());
            setVNetJunk(value.getVNetJunk());
            setVNet(value.getVNet());
            setVNetAmount(value.getVNetAmount());
            setVDeprecatedM(value.getVDeprecatedM());
            setVDeprecatedA(value.getVDeprecatedA());
            setKFixed(value.getKFixed());
            setKDeprecated(value.getKDeprecated());
            setKAssignment(value.getKAssignment());
            setKTax(value.getKTax());
            setKDevalue(value.getKDevalue());
            setKChange(value.getKChange());
            setCustomerId(value.getCustomerId());
            setExpiredAt(value.getExpiredAt());
            setExpiredComment(value.getExpiredComment());
            setUserId(value.getUserId());
            setStoreId(value.getStoreId());
            setDeptId(value.getDeptId());
            setCompanyId(value.getCompanyId());
            setParentId(value.getParentId());
            setComment(value.getComment());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setEnterAt(value.getEnterAt());
            setEnterBy(value.getEnterBy());
            setAccountAt(value.getAccountAt());
            setAccountBy(value.getAccountBy());
            setScrapAt(value.getScrapAt());
            setScrapBy(value.getScrapBy());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            resetChangedOnNotNull();
        }
    }

    public EAssetRecord(final io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.E_ASSET.KEY</code>. 「key」- 资产主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.KEY</code>. 「key」- 资产主键
     */
    @Override
    public EAssetRecord setKey(final String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.NAME</code>. 「name」- 资产名称
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.NAME</code>. 「name」- 资产名称
     */
    @Override
    public EAssetRecord setName(final String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.CODE</code>. 「code」- 资产编号
     */
    @Override
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.CODE</code>. 「code」- 资产编号
     */
    @Override
    public EAssetRecord setCode(final String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.TYPE</code>. 「type」- 资产类型
     */
    @Override
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.TYPE</code>. 「type」- 资产类型
     */
    @Override
    public EAssetRecord setType(final String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.STATUS</code>. 「status」- 资产状态
     */
    @Override
    public String getStatus() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.STATUS</code>. 「status」- 资产状态
     */
    @Override
    public EAssetRecord setStatus(final String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.MODEL_NUMBER</code>. 「modelNumber」- 规格型号
     */
    @Override
    public String getModelNumber() {
        return (String) get(5);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.MODEL_NUMBER</code>. 「modelNumber」- 规格型号
     */
    @Override
    public EAssetRecord setModelNumber(final String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.UNIT</code>. 「unit」- 计量单位
     */
    @Override
    public String getUnit() {
        return (String) get(6);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.UNIT</code>. 「unit」- 计量单位
     */
    @Override
    public EAssetRecord setUnit(final String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.NUM</code>. 「num」- 资产数量
     */
    @Override
    public Long getNum() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.NUM</code>. 「num」- 资产数量
     */
    @Override
    public EAssetRecord setNum(final Long value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.NUM_DEPRECATING</code>. 「numDeprecating」-
     * 预计折旧数量
     */
    @Override
    public Long getNumDeprecating() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.NUM_DEPRECATING</code>. 「numDeprecating」-
     * 预计折旧数量
     */
    @Override
    public EAssetRecord setNumDeprecating(final Long value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.NUM_DEPRECATED</code>. 「numDeprecated」-
     * 已折旧数量
     */
    @Override
    public Long getNumDeprecated() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.NUM_DEPRECATED</code>. 「numDeprecated」-
     * 已折旧数量
     */
    @Override
    public EAssetRecord setNumDeprecated(final Long value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.NUM_USING</code>. 「numUsing」- 预计使用数量
     */
    @Override
    public Long getNumUsing() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.NUM_USING</code>. 「numUsing」- 预计使用数量
     */
    @Override
    public EAssetRecord setNumUsing(final Long value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.NUM_USED</code>. 「numUsed」- 已使用数量
     */
    @Override
    public Long getNumUsed() {
        return (Long) get(11);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.NUM_USED</code>. 「numUsed」- 已使用数量
     */
    @Override
    public EAssetRecord setNumUsed(final Long value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.WAY_CHANGE</code>. 「wayChange」- 变动方式
     */
    @Override
    public String getWayChange() {
        return (String) get(12);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.WAY_CHANGE</code>. 「wayChange」- 变动方式
     */
    @Override
    public EAssetRecord setWayChange(final String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.WAY_DEPRECATE</code>. 「wayDeprecate」- 折旧方式
     */
    @Override
    public String getWayDeprecate() {
        return (String) get(13);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.WAY_DEPRECATE</code>. 「wayDeprecate」- 折旧方式
     */
    @Override
    public EAssetRecord setWayDeprecate(final String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.WAY_ACCORDING</code>. 「wayAccording」- 折旧依据
     */
    @Override
    public String getWayAccording() {
        return (String) get(14);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.WAY_ACCORDING</code>. 「wayAccording」- 折旧依据
     */
    @Override
    public EAssetRecord setWayAccording(final String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.USED_AT</code>. 「usedAt」- 开始使用时间
     */
    @Override
    public LocalDateTime getUsedAt() {
        return (LocalDateTime) get(15);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.USED_AT</code>. 「usedAt」- 开始使用时间
     */
    @Override
    public EAssetRecord setUsedAt(final LocalDateTime value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.USED_BY</code>. 「usedBy」- 使用者
     */
    @Override
    public String getUsedBy() {
        return (String) get(16);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.USED_BY</code>. 「usedBy」- 使用者
     */
    @Override
    public EAssetRecord setUsedBy(final String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.USED_STATUS</code>. 「usedStatus」- 使用状态
     */
    @Override
    public String getUsedStatus() {
        return (String) get(17);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.USED_STATUS</code>. 「usedStatus」- 使用状态
     */
    @Override
    public EAssetRecord setUsedStatus(final String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.V_ORIGINAL</code>. 「vOriginal」- 原价值
     */
    @Override
    public BigDecimal getVOriginal() {
        return (BigDecimal) get(18);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.V_ORIGINAL</code>. 「vOriginal」- 原价值
     */
    @Override
    public EAssetRecord setVOriginal(final BigDecimal value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.V_TAX</code>. 「vTax」- 税额
     */
    @Override
    public BigDecimal getVTax() {
        return (BigDecimal) get(19);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.V_TAX</code>. 「vTax」- 税额
     */
    @Override
    public EAssetRecord setVTax(final BigDecimal value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.V_DE_READY</code>. 「vDeReady」- 减值准备
     */
    @Override
    public BigDecimal getVDeReady() {
        return (BigDecimal) get(20);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.V_DE_READY</code>. 「vDeReady」- 减值准备
     */
    @Override
    public EAssetRecord setVDeReady(final BigDecimal value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.V_NET_JUNK</code>. 「vNetJunk」- 净残值
     */
    @Override
    public BigDecimal getVNetJunk() {
        return (BigDecimal) get(21);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.V_NET_JUNK</code>. 「vNetJunk」- 净残值
     */
    @Override
    public EAssetRecord setVNetJunk(final BigDecimal value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.V_NET</code>. 「vNet」- 净值
     */
    @Override
    public BigDecimal getVNet() {
        return (BigDecimal) get(22);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.V_NET</code>. 「vNet」- 净值
     */
    @Override
    public EAssetRecord setVNet(final BigDecimal value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.V_NET_AMOUNT</code>. 「vNetAmount」- 净额
     */
    @Override
    public BigDecimal getVNetAmount() {
        return (BigDecimal) get(23);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.V_NET_AMOUNT</code>. 「vNetAmount」- 净额
     */
    @Override
    public EAssetRecord setVNetAmount(final BigDecimal value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.V_DEPRECATED_M</code>. 「vDeprecatedM」- 月折旧
     */
    @Override
    public BigDecimal getVDeprecatedM() {
        return (BigDecimal) get(24);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.V_DEPRECATED_M</code>. 「vDeprecatedM」- 月折旧
     */
    @Override
    public EAssetRecord setVDeprecatedM(final BigDecimal value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.V_DEPRECATED_A</code>. 「vDeprecatedA」- 累积折旧
     */
    @Override
    public BigDecimal getVDeprecatedA() {
        return (BigDecimal) get(25);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.V_DEPRECATED_A</code>. 「vDeprecatedA」- 累积折旧
     */
    @Override
    public EAssetRecord setVDeprecatedA(final BigDecimal value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.K_FIXED</code>. 「kFixed」- 固定资产科目
     */
    @Override
    public String getKFixed() {
        return (String) get(26);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.K_FIXED</code>. 「kFixed」- 固定资产科目
     */
    @Override
    public EAssetRecord setKFixed(final String value) {
        set(26, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.K_DEPRECATED</code>. 「kDeprecated」- 累积折旧科目
     */
    @Override
    public String getKDeprecated() {
        return (String) get(27);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.K_DEPRECATED</code>. 「kDeprecated」- 累积折旧科目
     */
    @Override
    public EAssetRecord setKDeprecated(final String value) {
        set(27, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.K_ASSIGNMENT</code>. 「kAssignment」- 折旧费用分配科目
     */
    @Override
    public String getKAssignment() {
        return (String) get(28);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.K_ASSIGNMENT</code>. 「kAssignment」- 折旧费用分配科目
     */
    @Override
    public EAssetRecord setKAssignment(final String value) {
        set(28, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.K_TAX</code>. 「kTax」- 税金科目
     */
    @Override
    public String getKTax() {
        return (String) get(29);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.K_TAX</code>. 「kTax」- 税金科目
     */
    @Override
    public EAssetRecord setKTax(final String value) {
        set(29, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.K_DEVALUE</code>. 「kDevalue」- 减值准备科目
     */
    @Override
    public String getKDevalue() {
        return (String) get(30);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.K_DEVALUE</code>. 「kDevalue」- 减值准备科目
     */
    @Override
    public EAssetRecord setKDevalue(final String value) {
        set(30, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.K_CHANGE</code>. 「kChange」- 资产变动对方科目
     */
    @Override
    public String getKChange() {
        return (String) get(31);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.K_CHANGE</code>. 「kChange」- 资产变动对方科目
     */
    @Override
    public EAssetRecord setKChange(final String value) {
        set(31, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.CUSTOMER_ID</code>. 「customerId」- 供应商ID
     */
    @Override
    public String getCustomerId() {
        return (String) get(32);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.CUSTOMER_ID</code>. 「customerId」- 供应商ID
     */
    @Override
    public EAssetRecord setCustomerId(final String value) {
        set(32, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.EXPIRED_AT</code>. 「expiredAt」- 到期时间
     */
    @Override
    public LocalDateTime getExpiredAt() {
        return (LocalDateTime) get(33);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.EXPIRED_AT</code>. 「expiredAt」- 到期时间
     */
    @Override
    public EAssetRecord setExpiredAt(final LocalDateTime value) {
        set(33, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.EXPIRED_COMMENT</code>. 「expiredComment」-
     * 到期说明
     */
    @Override
    public String getExpiredComment() {
        return (String) get(34);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.EXPIRED_COMMENT</code>. 「expiredComment」-
     * 到期说明
     */
    @Override
    public EAssetRecord setExpiredComment(final String value) {
        set(34, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.USER_ID</code>. 「userId」- 资产管理者
     */
    @Override
    public String getUserId() {
        return (String) get(35);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.USER_ID</code>. 「userId」- 资产管理者
     */
    @Override
    public EAssetRecord setUserId(final String value) {
        set(35, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.STORE_ID</code>. 「storeId」- 所属仓库ID
     */
    @Override
    public String getStoreId() {
        return (String) get(36);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.STORE_ID</code>. 「storeId」- 所属仓库ID
     */
    @Override
    public EAssetRecord setStoreId(final String value) {
        set(36, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.DEPT_ID</code>. 「deptId」- 所属部门
     */
    @Override
    public String getDeptId() {
        return (String) get(37);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.DEPT_ID</code>. 「deptId」- 所属部门
     */
    @Override
    public EAssetRecord setDeptId(final String value) {
        set(37, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.COMPANY_ID</code>. 「companyId」- 所属公司
     */
    @Override
    public String getCompanyId() {
        return (String) get(38);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.COMPANY_ID</code>. 「companyId」- 所属公司
     */
    @Override
    public EAssetRecord setCompanyId(final String value) {
        set(38, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.PARENT_ID</code>. 「parentId」- 上级资产
     */
    @Override
    public String getParentId() {
        return (String) get(39);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.PARENT_ID</code>. 「parentId」- 上级资产
     */
    @Override
    public EAssetRecord setParentId(final String value) {
        set(39, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.COMMENT</code>. 「comment」- 资产备注
     */
    @Override
    public String getComment() {
        return (String) get(40);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.COMMENT</code>. 「comment」- 资产备注
     */
    @Override
    public EAssetRecord setComment(final String value) {
        set(40, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(41);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public EAssetRecord setSigma(final String value) {
        set(41, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(42);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public EAssetRecord setLanguage(final String value) {
        set(42, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(43);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public EAssetRecord setActive(final Boolean value) {
        set(43, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(44);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public EAssetRecord setMetadata(final String value) {
        set(44, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.ENTER_AT</code>. 「enterAt」- 入库时间
     */
    @Override
    public LocalDateTime getEnterAt() {
        return (LocalDateTime) get(45);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.ENTER_AT</code>. 「enterAt」- 入库时间
     */
    @Override
    public EAssetRecord setEnterAt(final LocalDateTime value) {
        set(45, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.ENTER_BY</code>. 「enterBy」- 入库人
     */
    @Override
    public String getEnterBy() {
        return (String) get(46);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.ENTER_BY</code>. 「enterBy」- 入库人
     */
    @Override
    public EAssetRecord setEnterBy(final String value) {
        set(46, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.ACCOUNT_AT</code>. 「accountAt」- 入账时间
     */
    @Override
    public LocalDateTime getAccountAt() {
        return (LocalDateTime) get(47);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.ACCOUNT_AT</code>. 「accountAt」- 入账时间
     */
    @Override
    public EAssetRecord setAccountAt(final LocalDateTime value) {
        set(47, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.ACCOUNT_BY</code>. 「accountBy」- 入账人
     */
    @Override
    public String getAccountBy() {
        return (String) get(48);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.ACCOUNT_BY</code>. 「accountBy」- 入账人
     */
    @Override
    public EAssetRecord setAccountBy(final String value) {
        set(48, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.SCRAP_AT</code>. 「scrapAt」- 报废时间
     */
    @Override
    public LocalDateTime getScrapAt() {
        return (LocalDateTime) get(49);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.SCRAP_AT</code>. 「scrapAt」- 报废时间
     */
    @Override
    public EAssetRecord setScrapAt(final LocalDateTime value) {
        set(49, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.SCRAP_BY</code>. 「scrapBy」- 报废人
     */
    @Override
    public String getScrapBy() {
        return (String) get(50);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.SCRAP_BY</code>. 「scrapBy」- 报废人
     */
    @Override
    public EAssetRecord setScrapBy(final String value) {
        set(50, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(51);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public EAssetRecord setCreatedAt(final LocalDateTime value) {
        set(51, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(52);
    }

    /**
     * Setter for <code>ZDB.E_ASSET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public EAssetRecord setCreatedBy(final String value) {
        set(52, value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>ZDB.E_ASSET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(53);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.E_ASSET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public EAssetRecord setUpdatedAt(final LocalDateTime value) {
        set(53, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.E_ASSET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(54);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.E_ASSET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public EAssetRecord setUpdatedBy(final String value) {
        set(54, value);
        return this;
    }

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    @Override
    public void from(final IEAsset from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setType(from.getType());
        setStatus(from.getStatus());
        setModelNumber(from.getModelNumber());
        setUnit(from.getUnit());
        setNum(from.getNum());
        setNumDeprecating(from.getNumDeprecating());
        setNumDeprecated(from.getNumDeprecated());
        setNumUsing(from.getNumUsing());
        setNumUsed(from.getNumUsed());
        setWayChange(from.getWayChange());
        setWayDeprecate(from.getWayDeprecate());
        setWayAccording(from.getWayAccording());
        setUsedAt(from.getUsedAt());
        setUsedBy(from.getUsedBy());
        setUsedStatus(from.getUsedStatus());
        setVOriginal(from.getVOriginal());
        setVTax(from.getVTax());
        setVDeReady(from.getVDeReady());
        setVNetJunk(from.getVNetJunk());
        setVNet(from.getVNet());
        setVNetAmount(from.getVNetAmount());
        setVDeprecatedM(from.getVDeprecatedM());
        setVDeprecatedA(from.getVDeprecatedA());
        setKFixed(from.getKFixed());
        setKDeprecated(from.getKDeprecated());
        setKAssignment(from.getKAssignment());
        setKTax(from.getKTax());
        setKDevalue(from.getKDevalue());
        setKChange(from.getKChange());
        setCustomerId(from.getCustomerId());
        setExpiredAt(from.getExpiredAt());
        setExpiredComment(from.getExpiredComment());
        setUserId(from.getUserId());
        setStoreId(from.getStoreId());
        setDeptId(from.getDeptId());
        setCompanyId(from.getCompanyId());
        setParentId(from.getParentId());
        setComment(from.getComment());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setEnterAt(from.getEnterAt());
        setEnterBy(from.getEnterBy());
        setAccountAt(from.getAccountAt());
        setAccountBy(from.getAccountBy());
        setScrapAt(from.getScrapAt());
        setScrapBy(from.getScrapBy());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IEAsset> E into(final E into) {
        into.from(this);
        return into;
    }
}
