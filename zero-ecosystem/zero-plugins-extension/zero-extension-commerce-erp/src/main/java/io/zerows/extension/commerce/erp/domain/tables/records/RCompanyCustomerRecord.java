/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.erp.domain.tables.records;


import io.r2mo.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.erp.domain.tables.RCompanyCustomer;
import io.zerows.extension.commerce.erp.domain.tables.interfaces.IRCompanyCustomer;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class RCompanyCustomerRecord extends UpdatableRecordImpl<RCompanyCustomerRecord> implements VertxPojo, Record4<String, String, String, String>, IRCompanyCustomer {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached RCompanyCustomerRecord
     */
    public RCompanyCustomerRecord() {
        super(RCompanyCustomer.R_COMPANY_CUSTOMER);
    }

    /**
     * Create a detached, initialised RCompanyCustomerRecord
     */
    public RCompanyCustomerRecord(final String companyId, final String customerId, final String linkComponent, final String comment) {
        super(RCompanyCustomer.R_COMPANY_CUSTOMER);

        setCompanyId(companyId);
        setCustomerId(customerId);
        setLinkComponent(linkComponent);
        setComment(comment);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised RCompanyCustomerRecord
     */
    public RCompanyCustomerRecord(final io.zerows.extension.commerce.erp.domain.tables.pojos.RCompanyCustomer value) {
        super(RCompanyCustomer.R_COMPANY_CUSTOMER);

        if (value != null) {
            setCompanyId(value.getCompanyId());
            setCustomerId(value.getCustomerId());
            setLinkComponent(value.getLinkComponent());
            setComment(value.getComment());
            resetChangedOnNotNull();
        }
    }

    public RCompanyCustomerRecord(final io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.R_COMPANY_CUSTOMER.COMPANY_ID</code>. 「companyId」-
     * 企业的ID
     */
    @Override
    public String getCompanyId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.R_COMPANY_CUSTOMER.COMPANY_ID</code>. 「companyId」-
     * 企业的ID
     */
    @Override
    public RCompanyCustomerRecord setCompanyId(final String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.R_COMPANY_CUSTOMER.CUSTOMER_ID</code>. 「customerId」-
     * 客户信息的ID
     */
    @Override
    public String getCustomerId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.R_COMPANY_CUSTOMER.CUSTOMER_ID</code>. 「customerId」-
     * 客户信息的ID
     */
    @Override
    public RCompanyCustomerRecord setCustomerId(final String value) {
        set(1, value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>ZDB.R_COMPANY_CUSTOMER.LINK_COMPONENT</code>.
     * 「linkComponent」- 关联执行组件（扩展用）
     */
    @Override
    public String getLinkComponent() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.R_COMPANY_CUSTOMER.LINK_COMPONENT</code>.
     * 「linkComponent」- 关联执行组件（扩展用）
     */
    @Override
    public RCompanyCustomerRecord setLinkComponent(final String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.R_COMPANY_CUSTOMER.COMMENT</code>. 「comment」- 关系备注
     */
    @Override
    public String getComment() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.R_COMPANY_CUSTOMER.COMMENT</code>. 「comment」- 关系备注
     */
    @Override
    public RCompanyCustomerRecord setComment(final String value) {
        set(3, value);
        return this;
    }

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return RCompanyCustomer.R_COMPANY_CUSTOMER.COMPANY_ID;
    }

    @Override
    public Field<String> field2() {
        return RCompanyCustomer.R_COMPANY_CUSTOMER.CUSTOMER_ID;
    }

    @Override
    public Field<String> field3() {
        return RCompanyCustomer.R_COMPANY_CUSTOMER.LINK_COMPONENT;
    }

    @Override
    public Field<String> field4() {
        return RCompanyCustomer.R_COMPANY_CUSTOMER.COMMENT;
    }

    @Override
    public String component1() {
        return getCompanyId();
    }

    @Override
    public String component2() {
        return getCustomerId();
    }

    @Override
    public String component3() {
        return getLinkComponent();
    }

    @Override
    public String component4() {
        return getComment();
    }

    @Override
    public String value1() {
        return getCompanyId();
    }

    @Override
    public String value2() {
        return getCustomerId();
    }

    @Override
    public String value3() {
        return getLinkComponent();
    }

    @Override
    public String value4() {
        return getComment();
    }

    @Override
    public RCompanyCustomerRecord value1(final String value) {
        setCompanyId(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public RCompanyCustomerRecord value2(final String value) {
        setCustomerId(value);
        return this;
    }

    @Override
    public RCompanyCustomerRecord value3(final String value) {
        setLinkComponent(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    @Override
    public RCompanyCustomerRecord value4(final String value) {
        setComment(value);
        return this;
    }

    @Override
    public RCompanyCustomerRecord values(final String value1, final String value2, final String value3, final String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    @Override
    public void from(final IRCompanyCustomer from) {
        setCompanyId(from.getCompanyId());
        setCustomerId(from.getCustomerId());
        setLinkComponent(from.getLinkComponent());
        setComment(from.getComment());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IRCompanyCustomer> E into(final E into) {
        into.from(this);
        return into;
    }
}
