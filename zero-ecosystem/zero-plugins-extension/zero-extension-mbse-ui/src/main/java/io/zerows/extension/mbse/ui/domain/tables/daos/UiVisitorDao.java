/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.ui.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.mbse.ui.domain.tables.UiVisitor;
import io.zerows.extension.mbse.ui.domain.tables.records.UiVisitorRecord;
import org.jooq.Configuration;
import org.jooq.Record5;

import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiVisitorDao extends AbstractVertxDAO<UiVisitorRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor, Record5<String, String, String, String, String>, Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>>, Future<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>, Future<Integer>, Future<Record5<String, String, String, String, String>>> implements io.r2mo.vertx.jooq.classic.VertxDAO<UiVisitorRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor, Record5<String, String, String, String, String>> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public UiVisitorDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(UiVisitor.UI_VISITOR, io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor.class, new JDBCClassicQueryExecutor<UiVisitorRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor, Record5<String, String, String, String, String>>(configuration, io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor.class, vertx));
    }

    @Override
    protected Record5<String, String, String, String, String> getId(final io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor object) {
        return compositeKeyRecord(object.getIdentifier(), object.getPage(), object.getPath(), object.getType(), object.getSigma());
    }

    /**
     * Find records that have <code>PAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByPage(final Collection<String> values) {
        return findManyByCondition(UiVisitor.UI_VISITOR.PAGE.in(values));
    }

    /**
     * Find records that have <code>PAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByPage(final Collection<String> values, final int limit) {
        return findManyByCondition(UiVisitor.UI_VISITOR.PAGE.in(values), limit);
    }

    /**
     * Find records that have <code>PATH IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByPath(final Collection<String> values) {
        return findManyByCondition(UiVisitor.UI_VISITOR.PATH.in(values));
    }

    /**
     * Find records that have <code>PATH IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByPath(final Collection<String> values, final int limit) {
        return findManyByCondition(UiVisitor.UI_VISITOR.PATH.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByType(final Collection<String> values) {
        return findManyByCondition(UiVisitor.UI_VISITOR.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(UiVisitor.UI_VISITOR.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>CONTROL_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByControlId(final Collection<String> values) {
        return findManyByCondition(UiVisitor.UI_VISITOR.CONTROL_ID.in(values));
    }

    /**
     * Find records that have <code>CONTROL_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByControlId(final Collection<String> values, final int limit) {
        return findManyByCondition(UiVisitor.UI_VISITOR.CONTROL_ID.in(values), limit);
    }

    /**
     * Find records that have <code>RESOURCE_ID IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByResourceId(final Collection<String> values) {
        return findManyByCondition(UiVisitor.UI_VISITOR.RESOURCE_ID.in(values));
    }

    /**
     * Find records that have <code>RESOURCE_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByResourceId(final Collection<String> values, final int limit) {
        return findManyByCondition(UiVisitor.UI_VISITOR.RESOURCE_ID.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(UiVisitor.UI_VISITOR.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(UiVisitor.UI_VISITOR.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(UiVisitor.UI_VISITOR.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(UiVisitor.UI_VISITOR.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>RUN_COMPONENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByRunComponent(final Collection<String> values) {
        return findManyByCondition(UiVisitor.UI_VISITOR.RUN_COMPONENT.in(values));
    }

    /**
     * Find records that have <code>RUN_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor>> findManyByRunComponent(final Collection<String> values, final int limit) {
        return findManyByCondition(UiVisitor.UI_VISITOR.RUN_COMPONENT.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<UiVisitorRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor, Record5<String, String, String, String, String>> queryExecutor() {
        return (JDBCClassicQueryExecutor<UiVisitorRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiVisitor, Record5<String, String, String, String, String>>) super.queryExecutor();
    }
}
