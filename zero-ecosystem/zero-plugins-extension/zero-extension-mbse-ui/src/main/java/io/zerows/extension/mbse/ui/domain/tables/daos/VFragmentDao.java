/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.ui.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.mbse.ui.domain.tables.VFragment;
import io.zerows.extension.mbse.ui.domain.tables.records.VFragmentRecord;
import org.jooq.Configuration;

import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class VFragmentDao extends AbstractVertxDAO<VFragmentRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment, String, Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>>, Future<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<VFragmentRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public VFragmentDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(VFragment.V_FRAGMENT, io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment.class, new JDBCClassicQueryExecutor<VFragmentRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment, String>(configuration, io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment.class, vertx));
    }

    @Override
    protected String getId(io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>CONTAINER IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByContainer(Collection<String> values) {
        return findManyByCondition(VFragment.V_FRAGMENT.CONTAINER.in(values));
    }

    /**
     * Find records that have <code>CONTAINER IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByContainer(Collection<String> values, int limit) {
        return findManyByCondition(VFragment.V_FRAGMENT.CONTAINER.in(values), limit);
    }

    /**
     * Find records that have <code>NOTICE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByNotice(Collection<String> values) {
        return findManyByCondition(VFragment.V_FRAGMENT.NOTICE.in(values));
    }

    /**
     * Find records that have <code>NOTICE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByNotice(Collection<String> values, int limit) {
        return findManyByCondition(VFragment.V_FRAGMENT.NOTICE.in(values), limit);
    }

    /**
     * Find records that have <code>BUTTON_CONNECT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByButtonConnect(Collection<String> values) {
        return findManyByCondition(VFragment.V_FRAGMENT.BUTTON_CONNECT.in(values));
    }

    /**
     * Find records that have <code>BUTTON_CONNECT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByButtonConnect(Collection<String> values, int limit) {
        return findManyByCondition(VFragment.V_FRAGMENT.BUTTON_CONNECT.in(values), limit);
    }

    /**
     * Find records that have <code>BUTTON_GROUP IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByButtonGroup(Collection<String> values) {
        return findManyByCondition(VFragment.V_FRAGMENT.BUTTON_GROUP.in(values));
    }

    /**
     * Find records that have <code>BUTTON_GROUP IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByButtonGroup(Collection<String> values, int limit) {
        return findManyByCondition(VFragment.V_FRAGMENT.BUTTON_GROUP.in(values), limit);
    }

    /**
     * Find records that have <code>MODAL IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByModal(Collection<String> values) {
        return findManyByCondition(VFragment.V_FRAGMENT.MODAL.in(values));
    }

    /**
     * Find records that have <code>MODAL IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByModal(Collection<String> values, int limit) {
        return findManyByCondition(VFragment.V_FRAGMENT.MODAL.in(values), limit);
    }

    /**
     * Find records that have <code>GRID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByGrid(Collection<Integer> values) {
        return findManyByCondition(VFragment.V_FRAGMENT.GRID.in(values));
    }

    /**
     * Find records that have <code>GRID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByGrid(Collection<Integer> values, int limit) {
        return findManyByCondition(VFragment.V_FRAGMENT.GRID.in(values), limit);
    }

    /**
     * Find records that have <code>CONFIG IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByConfig(Collection<String> values) {
        return findManyByCondition(VFragment.V_FRAGMENT.CONFIG.in(values));
    }

    /**
     * Find records that have <code>CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment>> findManyByConfig(Collection<String> values, int limit) {
        return findManyByCondition(VFragment.V_FRAGMENT.CONFIG.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<VFragmentRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<VFragmentRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.VFragment, String>) super.queryExecutor();
    }
}
