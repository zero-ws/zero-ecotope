/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.ui.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.mbse.ui.domain.tables.VQuery;
import io.zerows.extension.mbse.ui.domain.tables.records.VQueryRecord;
import org.jooq.Configuration;

import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class VQueryDao extends AbstractVertxDAO<VQueryRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery, String, Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery>>, Future<io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<VQueryRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public VQueryDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(VQuery.V_QUERY, io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery.class, new JDBCClassicQueryExecutor<VQueryRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery, String>(configuration, io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>PROJECTION IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery>> findManyByProjection(final Collection<String> values) {
        return findManyByCondition(VQuery.V_QUERY.PROJECTION.in(values));
    }

    /**
     * Find records that have <code>PROJECTION IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery>> findManyByProjection(final Collection<String> values, final int limit) {
        return findManyByCondition(VQuery.V_QUERY.PROJECTION.in(values), limit);
    }

    /**
     * Find records that have <code>PAGER IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery>> findManyByPager(final Collection<String> values) {
        return findManyByCondition(VQuery.V_QUERY.PAGER.in(values));
    }

    /**
     * Find records that have <code>PAGER IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery>> findManyByPager(final Collection<String> values, final int limit) {
        return findManyByCondition(VQuery.V_QUERY.PAGER.in(values), limit);
    }

    /**
     * Find records that have <code>SORTER IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery>> findManyBySorter(final Collection<String> values) {
        return findManyByCondition(VQuery.V_QUERY.SORTER.in(values));
    }

    /**
     * Find records that have <code>SORTER IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery>> findManyBySorter(final Collection<String> values, final int limit) {
        return findManyByCondition(VQuery.V_QUERY.SORTER.in(values), limit);
    }

    /**
     * Find records that have <code>CRITERIA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery>> findManyByCriteria(final Collection<String> values) {
        return findManyByCondition(VQuery.V_QUERY.CRITERIA.in(values));
    }

    /**
     * Find records that have <code>CRITERIA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery>> findManyByCriteria(final Collection<String> values, final int limit) {
        return findManyByCondition(VQuery.V_QUERY.CRITERIA.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<VQueryRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<VQueryRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.VQuery, String>) super.queryExecutor();
    }
}
