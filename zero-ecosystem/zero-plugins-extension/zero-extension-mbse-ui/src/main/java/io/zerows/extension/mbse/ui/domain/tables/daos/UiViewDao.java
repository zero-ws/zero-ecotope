/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.ui.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.mbse.ui.domain.tables.UiView;
import io.zerows.extension.mbse.ui.domain.tables.records.UiViewRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiViewDao extends AbstractVertxDAO<UiViewRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiView, String, Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>>, Future<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<UiViewRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiView, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public UiViewDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(UiView.UI_VIEW, io.zerows.extension.mbse.ui.domain.tables.pojos.UiView.class, new JDBCClassicQueryExecutor<UiViewRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiView, String>(configuration, io.zerows.extension.mbse.ui.domain.tables.pojos.UiView.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.mbse.ui.domain.tables.pojos.UiView object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByName(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>SORT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyBySort(final Collection<Integer> values) {
        return findManyByCondition(UiView.UI_VIEW.SORT.in(values));
    }

    /**
     * Find records that have <code>SORT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyBySort(final Collection<Integer> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.SORT.in(values), limit);
    }

    /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByIdentifier(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.IDENTIFIER.in(values));
    }

    /**
     * Find records that have <code>IDENTIFIER IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByIdentifier(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.IDENTIFIER.in(values), limit);
    }

    /**
     * Find records that have <code>WORKFLOW IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByWorkflow(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.WORKFLOW.in(values));
    }

    /**
     * Find records that have <code>WORKFLOW IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByWorkflow(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.WORKFLOW.in(values), limit);
    }

    /**
     * Find records that have <code>VIEW IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByView(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.VIEW.in(values));
    }

    /**
     * Find records that have <code>VIEW IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByView(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.VIEW.in(values), limit);
    }

    /**
     * Find records that have <code>POSITION IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByPosition(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.POSITION.in(values));
    }

    /**
     * Find records that have <code>POSITION IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByPosition(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.POSITION.in(values), limit);
    }

    /**
     * Find records that have <code>TITLE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByTitle(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.TITLE.in(values));
    }

    /**
     * Find records that have <code>TITLE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByTitle(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.TITLE.in(values), limit);
    }

    /**
     * Find records that have <code>PROJECTION IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByProjection(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.PROJECTION.in(values));
    }

    /**
     * Find records that have <code>PROJECTION IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByProjection(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.PROJECTION.in(values), limit);
    }

    /**
     * Find records that have <code>CRITERIA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByCriteria(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.CRITERIA.in(values));
    }

    /**
     * Find records that have <code>CRITERIA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByCriteria(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.CRITERIA.in(values), limit);
    }

    /**
     * Find records that have <code>ROWS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByRows(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.ROWS.in(values));
    }

    /**
     * Find records that have <code>ROWS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByRows(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.ROWS.in(values), limit);
    }

    /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByUiConfig(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.UI_CONFIG.in(values));
    }

    /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByUiConfig(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.UI_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>QR_COMPONENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByQrComponent(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.QR_COMPONENT.in(values));
    }

    /**
     * Find records that have <code>QR_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByQrComponent(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.QR_COMPONENT.in(values), limit);
    }

    /**
     * Find records that have <code>QR_CONFIG IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByQrConfig(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.QR_CONFIG.in(values));
    }

    /**
     * Find records that have <code>QR_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByQrConfig(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.QR_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(UiView.UI_VIEW.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(UiView.UI_VIEW.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(UiView.UI_VIEW.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(UiView.UI_VIEW.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiView>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(UiView.UI_VIEW.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<UiViewRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiView, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<UiViewRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiView, String>) super.queryExecutor();
    }
}
