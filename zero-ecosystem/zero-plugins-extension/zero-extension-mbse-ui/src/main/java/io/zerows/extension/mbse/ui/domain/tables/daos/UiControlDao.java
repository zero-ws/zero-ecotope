/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.ui.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.mbse.ui.domain.tables.UiControl;
import io.zerows.extension.mbse.ui.domain.tables.records.UiControlRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiControlDao extends AbstractVertxDAO<UiControlRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl, String, Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>>, Future<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<UiControlRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public UiControlDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(UiControl.UI_CONTROL, io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl.class, new JDBCClassicQueryExecutor<UiControlRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl, String>(configuration, io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>SIGN IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyBySign(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.SIGN.in(values));
    }

    /**
     * Find records that have <code>SIGN IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyBySign(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.SIGN.in(values), limit);
    }

    /**
     * Find records that have <code>PAGE_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByPageId(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.PAGE_ID.in(values));
    }

    /**
     * Find records that have <code>PAGE_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByPageId(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.PAGE_ID.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByType(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>CONTAINER_NAME IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByContainerName(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.CONTAINER_NAME.in(values));
    }

    /**
     * Find records that have <code>CONTAINER_NAME IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByContainerName(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.CONTAINER_NAME.in(values), limit);
    }

    /**
     * Find records that have <code>CONTAINER_CONFIG IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByContainerConfig(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.CONTAINER_CONFIG.in(values));
    }

    /**
     * Find records that have <code>CONTAINER_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByContainerConfig(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.CONTAINER_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>ASSIST IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByAssist(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.ASSIST.in(values));
    }

    /**
     * Find records that have <code>ASSIST IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByAssist(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.ASSIST.in(values), limit);
    }

    /**
     * Find records that have <code>GRID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByGrid(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.GRID.in(values));
    }

    /**
     * Find records that have <code>GRID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByGrid(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.GRID.in(values), limit);
    }

    /**
     * Find records that have <code>COMPONENT_NAME IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByComponentName(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.COMPONENT_NAME.in(values));
    }

    /**
     * Find records that have <code>COMPONENT_NAME IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByComponentName(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.COMPONENT_NAME.in(values), limit);
    }

    /**
     * Find records that have <code>COMPONENT_CONFIG IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByComponentConfig(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.COMPONENT_CONFIG.in(values));
    }

    /**
     * Find records that have <code>COMPONENT_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByComponentConfig(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.COMPONENT_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>COMPONENT_DATA IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByComponentData(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.COMPONENT_DATA.in(values));
    }

    /**
     * Find records that have <code>COMPONENT_DATA IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByComponentData(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.COMPONENT_DATA.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(UiControl.UI_CONTROL.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(UiControl.UI_CONTROL.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(UiControl.UI_CONTROL.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(UiControl.UI_CONTROL.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(UiControl.UI_CONTROL.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<UiControlRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<UiControlRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiControl, String>) super.queryExecutor();
    }
}
