/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.ui.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.mbse.ui.domain.tables.UiOp;
import io.zerows.extension.mbse.ui.domain.tables.records.UiOpRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class UiOpDao extends AbstractVertxDAO<UiOpRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp, String, Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>>, Future<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<UiOpRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public UiOpDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(UiOp.UI_OP, io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp.class, new JDBCClassicQueryExecutor<UiOpRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp, String>(configuration, io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp.class, vertx));
    }

    @Override
    protected String getId(io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>ACTION IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByAction(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.ACTION.in(values));
    }

    /**
     * Find records that have <code>ACTION IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByAction(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.ACTION.in(values), limit);
    }

    /**
     * Find records that have <code>TEXT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByText(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.TEXT.in(values));
    }

    /**
     * Find records that have <code>TEXT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByText(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.TEXT.in(values), limit);
    }

    /**
     * Find records that have <code>EVENT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByEvent(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.EVENT.in(values));
    }

    /**
     * Find records that have <code>EVENT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByEvent(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.EVENT.in(values), limit);
    }

    /**
     * Find records that have <code>CLIENT_KEY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByClientKey(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.CLIENT_KEY.in(values));
    }

    /**
     * Find records that have <code>CLIENT_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByClientKey(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.CLIENT_KEY.in(values), limit);
    }

    /**
     * Find records that have <code>CLIENT_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByClientId(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.CLIENT_ID.in(values));
    }

    /**
     * Find records that have <code>CLIENT_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByClientId(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.CLIENT_ID.in(values), limit);
    }

    /**
     * Find records that have <code>CONFIG IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByConfig(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.CONFIG.in(values));
    }

    /**
     * Find records that have <code>CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByConfig(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>PLUGIN IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByPlugin(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.PLUGIN.in(values));
    }

    /**
     * Find records that have <code>PLUGIN IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByPlugin(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.PLUGIN.in(values), limit);
    }

    /**
     * Find records that have <code>UI_SORT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByUiSort(Collection<Integer> values) {
        return findManyByCondition(UiOp.UI_OP.UI_SORT.in(values));
    }

    /**
     * Find records that have <code>UI_SORT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByUiSort(Collection<Integer> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.UI_SORT.in(values), limit);
    }

    /**
     * Find records that have <code>CONTROL_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByControlId(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.CONTROL_ID.in(values));
    }

    /**
     * Find records that have <code>CONTROL_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByControlId(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.CONTROL_ID.in(values), limit);
    }

    /**
     * Find records that have <code>CONTROL_TYPE IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByControlType(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.CONTROL_TYPE.in(values));
    }

    /**
     * Find records that have <code>CONTROL_TYPE IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByControlType(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.CONTROL_TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByActive(Collection<Boolean> values) {
        return findManyByCondition(UiOp.UI_OP.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByActive(Collection<Boolean> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyBySigma(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyBySigma(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByMetadata(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByMetadata(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByLanguage(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByLanguage(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByCreatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(UiOp.UI_OP.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByCreatedBy(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByCreatedBy(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(UiOp.UI_OP.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByUpdatedBy(Collection<String> values) {
        return findManyByCondition(UiOp.UI_OP.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp>> findManyByUpdatedBy(Collection<String> values, int limit) {
        return findManyByCondition(UiOp.UI_OP.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<UiOpRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<UiOpRecord, io.zerows.extension.mbse.ui.domain.tables.pojos.UiOp, String>) super.queryExecutor();
    }
}
