/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.integration.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.runtime.integration.domain.tables.IPortfolio;
import io.zerows.extension.runtime.integration.domain.tables.records.IPortfolioRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class IPortfolioDao extends AbstractVertxDAO<IPortfolioRecord, io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio, String, Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>>, Future<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<IPortfolioRecord, io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public IPortfolioDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(IPortfolio.I_PORTFOLIO, io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio.class, new JDBCClassicQueryExecutor<IPortfolioRecord, io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio, String>(configuration, io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByName(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByStatus(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.STATUS.in(values));
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByStatus(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.STATUS.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByType(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>INTEGRATION_ID IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByIntegrationId(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.INTEGRATION_ID.in(values));
    }

    /**
     * Find records that have <code>INTEGRATION_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByIntegrationId(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.INTEGRATION_ID.in(values), limit);
    }

    /**
     * Find records that have <code>OWNER_TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByOwnerType(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.OWNER_TYPE.in(values));
    }

    /**
     * Find records that have <code>OWNER_TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByOwnerType(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.OWNER_TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>OWNER IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByOwner(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.OWNER.in(values));
    }

    /**
     * Find records that have <code>OWNER IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByOwner(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.OWNER.in(values), limit);
    }

    /**
     * Find records that have <code>RUN_COMPONENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByRunComponent(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.RUN_COMPONENT.in(values));
    }

    /**
     * Find records that have <code>RUN_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByRunComponent(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.RUN_COMPONENT.in(values), limit);
    }

    /**
     * Find records that have <code>RUN_CONFIG IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByRunConfig(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.RUN_CONFIG.in(values));
    }

    /**
     * Find records that have <code>RUN_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByRunConfig(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.RUN_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>DATA_KEY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByDataKey(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.DATA_KEY.in(values));
    }

    /**
     * Find records that have <code>DATA_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByDataKey(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.DATA_KEY.in(values), limit);
    }

    /**
     * Find records that have <code>DATA_CONFIG IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByDataConfig(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.DATA_CONFIG.in(values));
    }

    /**
     * Find records that have <code>DATA_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByDataConfig(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.DATA_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>DATA_SECURE IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByDataSecure(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.DATA_SECURE.in(values));
    }

    /**
     * Find records that have <code>DATA_SECURE IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByDataSecure(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.DATA_SECURE.in(values), limit);
    }

    /**
     * Find records that have <code>DATA_INTEGRATION IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByDataIntegration(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.DATA_INTEGRATION.in(values));
    }

    /**
     * Find records that have <code>DATA_INTEGRATION IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByDataIntegration(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.DATA_INTEGRATION.in(values), limit);
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByAppId(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.APP_ID.in(values));
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByAppId(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.APP_ID.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(IPortfolio.I_PORTFOLIO.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<IPortfolioRecord, io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<IPortfolioRecord, io.zerows.extension.runtime.integration.domain.tables.pojos.IPortfolio, String>) super.queryExecutor();
    }
}
