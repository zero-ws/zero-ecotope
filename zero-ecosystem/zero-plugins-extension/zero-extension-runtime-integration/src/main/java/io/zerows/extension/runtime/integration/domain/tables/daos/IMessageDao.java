/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.integration.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.runtime.integration.domain.tables.IMessage;
import io.zerows.extension.runtime.integration.domain.tables.records.IMessageRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class IMessageDao extends AbstractVertxDAO<IMessageRecord, io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage, String, Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>>, Future<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<IMessageRecord, io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public IMessageDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(IMessage.I_MESSAGE, io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage.class, new JDBCClassicQueryExecutor<IMessageRecord, io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage, String>(configuration, io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByName(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByType(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByStatus(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.STATUS.in(values));
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByStatus(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.STATUS.in(values), limit);
    }

    /**
     * Find records that have <code>SUBJECT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyBySubject(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.SUBJECT.in(values));
    }

    /**
     * Find records that have <code>SUBJECT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyBySubject(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.SUBJECT.in(values), limit);
    }

    /**
     * Find records that have <code>CONTENT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByContent(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.CONTENT.in(values));
    }

    /**
     * Find records that have <code>CONTENT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByContent(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.CONTENT.in(values), limit);
    }

    /**
     * Find records that have <code>SEND_FROM IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyBySendFrom(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.SEND_FROM.in(values));
    }

    /**
     * Find records that have <code>SEND_FROM IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyBySendFrom(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.SEND_FROM.in(values), limit);
    }

    /**
     * Find records that have <code>SEND_TO IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyBySendTo(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.SEND_TO.in(values));
    }

    /**
     * Find records that have <code>SEND_TO IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyBySendTo(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.SEND_TO.in(values), limit);
    }

    /**
     * Find records that have <code>SEND_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyBySendBy(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.SEND_BY.in(values));
    }

    /**
     * Find records that have <code>SEND_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyBySendBy(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.SEND_BY.in(values), limit);
    }

    /**
     * Find records that have <code>SEND_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyBySendAt(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.SEND_AT.in(values));
    }

    /**
     * Find records that have <code>SEND_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyBySendAt(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.SEND_AT.in(values), limit);
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByAppId(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.APP_ID.in(values));
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByAppId(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.APP_ID.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(IMessage.I_MESSAGE.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(IMessage.I_MESSAGE.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(IMessage.I_MESSAGE.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(IMessage.I_MESSAGE.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(IMessage.I_MESSAGE.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<IMessageRecord, io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<IMessageRecord, io.zerows.extension.runtime.integration.domain.tables.pojos.IMessage, String>) super.queryExecutor();
    }
}
