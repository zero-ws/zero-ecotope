/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.modulat.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.mbse.modulat.domain.tables.BBlock;
import io.zerows.extension.mbse.modulat.domain.tables.records.BBlockRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class BBlockDao extends AbstractVertxDAO<BBlockRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock, String, Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>>, Future<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<BBlockRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public BBlockDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(BBlock.B_BLOCK, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock.class, new JDBCClassicQueryExecutor<BBlockRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock, String>(configuration, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByName(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>VERSION IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByVersion(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.VERSION.in(values));
    }

    /**
     * Find records that have <code>VERSION IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByVersion(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.VERSION.in(values), limit);
    }

    /**
     * Find records that have <code>AUTHORIZED IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByAuthorized(final Collection<Boolean> values) {
        return findManyByCondition(BBlock.B_BLOCK.AUTHORIZED.in(values));
    }

    /**
     * Find records that have <code>AUTHORIZED IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByAuthorized(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.AUTHORIZED.in(values), limit);
    }

    /**
     * Find records that have <code>UI_ICON IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUiIcon(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.UI_ICON.in(values));
    }

    /**
     * Find records that have <code>UI_ICON IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUiIcon(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.UI_ICON.in(values), limit);
    }

    /**
     * Find records that have <code>UI_STYLE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUiStyle(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.UI_STYLE.in(values));
    }

    /**
     * Find records that have <code>UI_STYLE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUiStyle(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.UI_STYLE.in(values), limit);
    }

    /**
     * Find records that have <code>UI_SORT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUiSort(final Collection<Long> values) {
        return findManyByCondition(BBlock.B_BLOCK.UI_SORT.in(values));
    }

    /**
     * Find records that have <code>UI_SORT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUiSort(final Collection<Long> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.UI_SORT.in(values), limit);
    }

    /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUiConfig(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.UI_CONFIG.in(values));
    }

    /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUiConfig(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.UI_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>UI_CONTENT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUiContent(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.UI_CONTENT.in(values));
    }

    /**
     * Find records that have <code>UI_CONTENT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUiContent(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.UI_CONTENT.in(values), limit);
    }

    /**
     * Find records that have <code>SIGN_ISSUER IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignIssuer(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_ISSUER.in(values));
    }

    /**
     * Find records that have <code>SIGN_ISSUER IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignIssuer(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_ISSUER.in(values), limit);
    }

    /**
     * Find records that have <code>SIGN_NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignName(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_NAME.in(values));
    }

    /**
     * Find records that have <code>SIGN_NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignName(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_NAME.in(values), limit);
    }

    /**
     * Find records that have <code>SIGN_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_AT.in(values));
    }

    /**
     * Find records that have <code>SIGN_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_AT.in(values), limit);
    }

    /**
     * Find records that have <code>SIGN_SECRET IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignSecret(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_SECRET.in(values));
    }

    /**
     * Find records that have <code>SIGN_SECRET IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignSecret(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_SECRET.in(values), limit);
    }

    /**
     * Find records that have <code>SIGN_LIC IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignLic(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_LIC.in(values));
    }

    /**
     * Find records that have <code>SIGN_LIC IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignLic(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_LIC.in(values), limit);
    }

    /**
     * Find records that have <code>SIGN_END IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignEnd(final Collection<LocalDateTime> values) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_END.in(values));
    }

    /**
     * Find records that have <code>SIGN_END IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignEnd(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_END.in(values), limit);
    }

    /**
     * Find records that have <code>SIGN_START IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignStart(final Collection<LocalDateTime> values) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_START.in(values));
    }

    /**
     * Find records that have <code>SIGN_START IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySignStart(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.SIGN_START.in(values), limit);
    }

    /**
     * Find records that have <code>LIC_IDENTIFIER IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByLicIdentifier(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.LIC_IDENTIFIER.in(values));
    }

    /**
     * Find records that have <code>LIC_IDENTIFIER IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByLicIdentifier(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.LIC_IDENTIFIER.in(values), limit);
    }

    /**
     * Find records that have <code>LIC_MENU IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByLicMenu(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.LIC_MENU.in(values));
    }

    /**
     * Find records that have <code>LIC_MENU IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByLicMenu(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.LIC_MENU.in(values), limit);
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByAppId(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.APP_ID.in(values));
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByAppId(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.APP_ID.in(values), limit);
    }

    /**
     * Find records that have <code>BAG_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByBagId(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.BAG_ID.in(values));
    }

    /**
     * Find records that have <code>BAG_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByBagId(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.BAG_ID.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(BBlock.B_BLOCK.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(BBlock.B_BLOCK.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(BBlock.B_BLOCK.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(BBlock.B_BLOCK.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(BBlock.B_BLOCK.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<BBlockRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<BBlockRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBlock, String>) super.queryExecutor();
    }
}
