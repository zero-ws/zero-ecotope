/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.modulat.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.mbse.modulat.domain.tables.BWeb;
import io.zerows.extension.mbse.modulat.domain.tables.records.BWebRecord;
import org.jooq.Configuration;

import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class BWebDao extends AbstractVertxDAO<BWebRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb, String, Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>>, Future<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<BWebRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public BWebDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(BWeb.B_WEB, io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb.class, new JDBCClassicQueryExecutor<BWebRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb, String>(configuration, io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(BWeb.B_WEB.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(BWeb.B_WEB.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>BLOCK_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByBlockId(final Collection<String> values) {
        return findManyByCondition(BWeb.B_WEB.BLOCK_ID.in(values));
    }

    /**
     * Find records that have <code>BLOCK_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByBlockId(final Collection<String> values, final int limit) {
        return findManyByCondition(BWeb.B_WEB.BLOCK_ID.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByType(final Collection<String> values) {
        return findManyByCondition(BWeb.B_WEB.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(BWeb.B_WEB.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>LIC_CONTENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByLicContent(final Collection<String> values) {
        return findManyByCondition(BWeb.B_WEB.LIC_CONTENT.in(values));
    }

    /**
     * Find records that have <code>LIC_CONTENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByLicContent(final Collection<String> values, final int limit) {
        return findManyByCondition(BWeb.B_WEB.LIC_CONTENT.in(values), limit);
    }

    /**
     * Find records that have <code>LIC_OP IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByLicOp(final Collection<String> values) {
        return findManyByCondition(BWeb.B_WEB.LIC_OP.in(values));
    }

    /**
     * Find records that have <code>LIC_OP IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByLicOp(final Collection<String> values, final int limit) {
        return findManyByCondition(BWeb.B_WEB.LIC_OP.in(values), limit);
    }

    /**
     * Find records that have <code>LIC_MODULE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByLicModule(final Collection<String> values) {
        return findManyByCondition(BWeb.B_WEB.LIC_MODULE.in(values));
    }

    /**
     * Find records that have <code>LIC_MODULE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByLicModule(final Collection<String> values, final int limit) {
        return findManyByCondition(BWeb.B_WEB.LIC_MODULE.in(values), limit);
    }

    /**
     * Find records that have <code>LIC_TPL IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByLicTpl(final Collection<String> values) {
        return findManyByCondition(BWeb.B_WEB.LIC_TPL.in(values));
    }

    /**
     * Find records that have <code>LIC_TPL IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByLicTpl(final Collection<String> values, final int limit) {
        return findManyByCondition(BWeb.B_WEB.LIC_TPL.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(BWeb.B_WEB.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(BWeb.B_WEB.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(BWeb.B_WEB.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(BWeb.B_WEB.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(BWeb.B_WEB.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(BWeb.B_WEB.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(BWeb.B_WEB.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(BWeb.B_WEB.LANGUAGE.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<BWebRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<BWebRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BWeb, String>) super.queryExecutor();
    }
}
