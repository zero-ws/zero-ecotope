/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.modulat.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.mbse.modulat.domain.tables.BAuthority;
import io.zerows.extension.mbse.modulat.domain.tables.records.BAuthorityRecord;
import org.jooq.Configuration;

import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class BAuthorityDao extends AbstractVertxDAO<BAuthorityRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority, String, Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>>, Future<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<BAuthorityRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public BAuthorityDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(BAuthority.B_AUTHORITY, io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority.class, new JDBCClassicQueryExecutor<BAuthorityRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority, String>(configuration, io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(BAuthority.B_AUTHORITY.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(BAuthority.B_AUTHORITY.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>BLOCK_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByBlockId(final Collection<String> values) {
        return findManyByCondition(BAuthority.B_AUTHORITY.BLOCK_ID.in(values));
    }

    /**
     * Find records that have <code>BLOCK_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByBlockId(final Collection<String> values, final int limit) {
        return findManyByCondition(BAuthority.B_AUTHORITY.BLOCK_ID.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByType(final Collection<String> values) {
        return findManyByCondition(BAuthority.B_AUTHORITY.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(BAuthority.B_AUTHORITY.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>LIC_RESOURCE IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByLicResource(final Collection<String> values) {
        return findManyByCondition(BAuthority.B_AUTHORITY.LIC_RESOURCE.in(values));
    }

    /**
     * Find records that have <code>LIC_RESOURCE IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByLicResource(final Collection<String> values, final int limit) {
        return findManyByCondition(BAuthority.B_AUTHORITY.LIC_RESOURCE.in(values), limit);
    }

    /**
     * Find records that have <code>LIC_ACTION IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByLicAction(final Collection<String> values) {
        return findManyByCondition(BAuthority.B_AUTHORITY.LIC_ACTION.in(values));
    }

    /**
     * Find records that have <code>LIC_ACTION IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByLicAction(final Collection<String> values, final int limit) {
        return findManyByCondition(BAuthority.B_AUTHORITY.LIC_ACTION.in(values), limit);
    }

    /**
     * Find records that have <code>LIC_PERMISSION IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByLicPermission(final Collection<String> values) {
        return findManyByCondition(BAuthority.B_AUTHORITY.LIC_PERMISSION.in(values));
    }

    /**
     * Find records that have <code>LIC_PERMISSION IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByLicPermission(final Collection<String> values, final int limit) {
        return findManyByCondition(BAuthority.B_AUTHORITY.LIC_PERMISSION.in(values), limit);
    }

    /**
     * Find records that have <code>LIC_VIEW IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByLicView(final Collection<String> values) {
        return findManyByCondition(BAuthority.B_AUTHORITY.LIC_VIEW.in(values));
    }

    /**
     * Find records that have <code>LIC_VIEW IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByLicView(final Collection<String> values, final int limit) {
        return findManyByCondition(BAuthority.B_AUTHORITY.LIC_VIEW.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(BAuthority.B_AUTHORITY.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(BAuthority.B_AUTHORITY.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(BAuthority.B_AUTHORITY.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(BAuthority.B_AUTHORITY.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(BAuthority.B_AUTHORITY.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(BAuthority.B_AUTHORITY.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(BAuthority.B_AUTHORITY.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(BAuthority.B_AUTHORITY.LANGUAGE.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<BAuthorityRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<BAuthorityRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BAuthority, String>) super.queryExecutor();
    }
}
