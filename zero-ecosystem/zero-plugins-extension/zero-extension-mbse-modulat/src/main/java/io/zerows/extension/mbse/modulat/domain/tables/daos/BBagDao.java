/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.modulat.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.mbse.modulat.domain.tables.BBag;
import io.zerows.extension.mbse.modulat.domain.tables.records.BBagRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class BBagDao extends AbstractVertxDAO<BBagRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag, String, Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>>, Future<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<BBagRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public BBagDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(BBag.B_BAG, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag.class, new JDBCClassicQueryExecutor<BBagRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag, String>(configuration, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByName(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>NAME_ABBR IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByNameAbbr(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.NAME_ABBR.in(values));
    }

    /**
     * Find records that have <code>NAME_ABBR IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByNameAbbr(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.NAME_ABBR.in(values), limit);
    }

    /**
     * Find records that have <code>NAME_FULL IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByNameFull(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.NAME_FULL.in(values));
    }

    /**
     * Find records that have <code>NAME_FULL IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByNameFull(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.NAME_FULL.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByType(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>UI_ICON IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByUiIcon(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.UI_ICON.in(values));
    }

    /**
     * Find records that have <code>UI_ICON IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByUiIcon(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.UI_ICON.in(values), limit);
    }

    /**
     * Find records that have <code>UI_STYLE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByUiStyle(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.UI_STYLE.in(values));
    }

    /**
     * Find records that have <code>UI_STYLE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByUiStyle(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.UI_STYLE.in(values), limit);
    }

    /**
     * Find records that have <code>UI_SORT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByUiSort(final Collection<Long> values) {
        return findManyByCondition(BBag.B_BAG.UI_SORT.in(values));
    }

    /**
     * Find records that have <code>UI_SORT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByUiSort(final Collection<Long> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.UI_SORT.in(values), limit);
    }

    /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByUiConfig(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.UI_CONFIG.in(values));
    }

    /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByUiConfig(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.UI_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>ENTRY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByEntry(final Collection<Boolean> values) {
        return findManyByCondition(BBag.B_BAG.ENTRY.in(values));
    }

    /**
     * Find records that have <code>ENTRY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByEntry(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.ENTRY.in(values), limit);
    }

    /**
     * Find records that have <code>ENTRY_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByEntryId(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.ENTRY_ID.in(values));
    }

    /**
     * Find records that have <code>ENTRY_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByEntryId(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.ENTRY_ID.in(values), limit);
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByAppId(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.APP_ID.in(values));
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByAppId(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.APP_ID.in(values), limit);
    }

    /**
     * Find records that have <code>PARENT_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByParentId(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.PARENT_ID.in(values));
    }

    /**
     * Find records that have <code>PARENT_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByParentId(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.PARENT_ID.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(BBag.B_BAG.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(BBag.B_BAG.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(BBag.B_BAG.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(BBag.B_BAG.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(BBag.B_BAG.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<BBagRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<BBagRecord, io.zerows.extension.mbse.modulat.domain.tables.pojos.BBag, String>) super.queryExecutor();
    }
}
