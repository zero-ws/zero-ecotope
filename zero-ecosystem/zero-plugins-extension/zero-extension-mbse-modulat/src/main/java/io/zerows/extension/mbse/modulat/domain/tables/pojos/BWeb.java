/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.modulat.domain.tables.pojos;


import io.r2mo.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.mbse.modulat.domain.tables.interfaces.IBWeb;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class BWeb implements VertxPojo, IBWeb {

    private static final long serialVersionUID = 1L;

    private String key;
    private String code;
    private String blockId;
    private String type;
    private String licContent;
    private String licOp;
    private String licModule;
    private String licTpl;
    private Boolean active;
    private String sigma;
    private String metadata;
    private String language;

    public BWeb() {
    }

    public BWeb(final IBWeb value) {
        this.key = value.getKey();
        this.code = value.getCode();
        this.blockId = value.getBlockId();
        this.type = value.getType();
        this.licContent = value.getLicContent();
        this.licOp = value.getLicOp();
        this.licModule = value.getLicModule();
        this.licTpl = value.getLicTpl();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
    }

    public BWeb(
        final String key,
        final String code,
        final String blockId,
        final String type,
        final String licContent,
        final String licOp,
        final String licModule,
        final String licTpl,
        final Boolean active,
        final String sigma,
        final String metadata,
        final String language
    ) {
        this.key = key;
        this.code = code;
        this.blockId = blockId;
        this.type = type;
        this.licContent = licContent;
        this.licOp = licOp;
        this.licModule = licModule;
        this.licTpl = licTpl;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
    }

    public BWeb(final io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.B_WEB.KEY</code>. 「key」- 主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>ZDB.B_WEB.KEY</code>. 「key」- 主键
     */
    @Override
    public BWeb setKey(final String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>ZDB.B_WEB.CODE</code>. 「code」- 系统内部编码
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>ZDB.B_WEB.CODE</code>. 「code」- 系统内部编码
     */
    @Override
    public BWeb setCode(final String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>ZDB.B_WEB.BLOCK_ID</code>. 「blockId」- 所属模块ID
     */
    @Override
    public String getBlockId() {
        return this.blockId;
    }

    /**
     * Setter for <code>ZDB.B_WEB.BLOCK_ID</code>. 「blockId」- 所属模块ID
     */
    @Override
    public BWeb setBlockId(final String blockId) {
        this.blockId = blockId;
        return this;
    }

    /**
     * Getter for <code>ZDB.B_WEB.TYPE</code>. 「type」- 类型保留，单独区分
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>ZDB.B_WEB.TYPE</code>. 「type」- 类型保留，单独区分
     */
    @Override
    public BWeb setType(final String type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>ZDB.B_WEB.LIC_CONTENT</code>. 「licContent」- 内容编码
     */
    @Override
    public String getLicContent() {
        return this.licContent;
    }

    /**
     * Setter for <code>ZDB.B_WEB.LIC_CONTENT</code>. 「licContent」- 内容编码
     */
    @Override
    public BWeb setLicContent(final String licContent) {
        this.licContent = licContent;
        return this;
    }

    /**
     * Getter for <code>ZDB.B_WEB.LIC_OP</code>. 「licOp」- 界面操作
     */
    @Override
    public String getLicOp() {
        return this.licOp;
    }

    /**
     * Setter for <code>ZDB.B_WEB.LIC_OP</code>. 「licOp」- 界面操作
     */
    @Override
    public BWeb setLicOp(final String licOp) {
        this.licOp = licOp;
        return this;
    }

    /**
     * Getter for <code>ZDB.B_WEB.LIC_MODULE</code>. 「licModule」- 单独指定 X_MODULE
     * 中的记录
     */
    @Override
    public String getLicModule() {
        return this.licModule;
    }

    /**
     * Setter for <code>ZDB.B_WEB.LIC_MODULE</code>. 「licModule」- 单独指定 X_MODULE
     * 中的记录
     */
    @Override
    public BWeb setLicModule(final String licModule) {
        this.licModule = licModule;
        return this;
    }

    /**
     * Getter for <code>ZDB.B_WEB.LIC_TPL</code>. 「licTpl」- PAGE, LAYOUT,
     * CONTROL 等记录
     */
    @Override
    public String getLicTpl() {
        return this.licTpl;
    }

    /**
     * Setter for <code>ZDB.B_WEB.LIC_TPL</code>. 「licTpl」- PAGE, LAYOUT,
     * CONTROL 等记录
     */
    @Override
    public BWeb setLicTpl(final String licTpl) {
        this.licTpl = licTpl;
        return this;
    }

    /**
     * Getter for <code>ZDB.B_WEB.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>ZDB.B_WEB.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public BWeb setActive(final Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>ZDB.B_WEB.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>ZDB.B_WEB.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public BWeb setSigma(final String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>ZDB.B_WEB.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>ZDB.B_WEB.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public BWeb setMetadata(final String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>ZDB.B_WEB.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>ZDB.B_WEB.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public BWeb setLanguage(final String language) {
        this.language = language;
        return this;
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final BWeb other = (BWeb) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        } else if (!this.key.equals(other.key))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        } else if (!this.code.equals(other.code))
            return false;
        if (this.blockId == null) {
            if (other.blockId != null)
                return false;
        } else if (!this.blockId.equals(other.blockId))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        } else if (!this.type.equals(other.type))
            return false;
        if (this.licContent == null) {
            if (other.licContent != null)
                return false;
        } else if (!this.licContent.equals(other.licContent))
            return false;
        if (this.licOp == null) {
            if (other.licOp != null)
                return false;
        } else if (!this.licOp.equals(other.licOp))
            return false;
        if (this.licModule == null) {
            if (other.licModule != null)
                return false;
        } else if (!this.licModule.equals(other.licModule))
            return false;
        if (this.licTpl == null) {
            if (other.licTpl != null)
                return false;
        } else if (!this.licTpl.equals(other.licTpl))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        } else if (!this.active.equals(other.active))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        } else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        } else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        } else if (!this.language.equals(other.language))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.blockId == null) ? 0 : this.blockId.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.licContent == null) ? 0 : this.licContent.hashCode());
        result = prime * result + ((this.licOp == null) ? 0 : this.licOp.hashCode());
        result = prime * result + ((this.licModule == null) ? 0 : this.licModule.hashCode());
        result = prime * result + ((this.licTpl == null) ? 0 : this.licTpl.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        return result;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("BWeb (");

        sb.append(key);
        sb.append(", ").append(code);
        sb.append(", ").append(blockId);
        sb.append(", ").append(type);
        sb.append(", ").append(licContent);
        sb.append(", ").append(licOp);
        sb.append(", ").append(licModule);
        sb.append(", ").append(licTpl);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(final IBWeb from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setBlockId(from.getBlockId());
        setType(from.getType());
        setLicContent(from.getLicContent());
        setLicOp(from.getLicOp());
        setLicModule(from.getLicModule());
        setLicTpl(from.getLicTpl());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
    }

    @Override
    public <E extends IBWeb> E into(final E into) {
        into.from(this);
        return into;
    }
}
