/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.mbse.action.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.mbse.action.domain.tables.IJob;
import io.zerows.extension.mbse.action.domain.tables.records.IJobRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class IJobDao extends AbstractVertxDAO<IJobRecord, io.zerows.extension.mbse.action.domain.tables.pojos.IJob, String, Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>>, Future<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<IJobRecord, io.zerows.extension.mbse.action.domain.tables.pojos.IJob, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public IJobDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(IJob.I_JOB, io.zerows.extension.mbse.action.domain.tables.pojos.IJob.class, new JDBCClassicQueryExecutor<IJobRecord, io.zerows.extension.mbse.action.domain.tables.pojos.IJob, String>(configuration, io.zerows.extension.mbse.action.domain.tables.pojos.IJob.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.mbse.action.domain.tables.pojos.IJob object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>NAMESPACE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByNamespace(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.NAMESPACE.in(values));
    }

    /**
     * Find records that have <code>NAMESPACE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByNamespace(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.NAMESPACE.in(values), limit);
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByName(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>GROUP IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByGroup(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.GROUP.in(values));
    }

    /**
     * Find records that have <code>GROUP IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByGroup(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.GROUP.in(values), limit);
    }

    /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByComment(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.COMMENT.in(values));
    }

    /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByComment(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.COMMENT.in(values), limit);
    }

    /**
     * Find records that have <code>ADDITIONAL IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByAdditional(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.ADDITIONAL.in(values));
    }

    /**
     * Find records that have <code>ADDITIONAL IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByAdditional(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.ADDITIONAL.in(values), limit);
    }

    /**
     * Find records that have <code>PROXY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByProxy(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.PROXY.in(values));
    }

    /**
     * Find records that have <code>PROXY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByProxy(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.PROXY.in(values), limit);
    }

    /**
     * Find records that have <code>THRESHOLD IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByThreshold(final Collection<Integer> values) {
        return findManyByCondition(IJob.I_JOB.THRESHOLD.in(values));
    }

    /**
     * Find records that have <code>THRESHOLD IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByThreshold(final Collection<Integer> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.THRESHOLD.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByType(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>RUN_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByRunAt(final Collection<LocalTime> values) {
        return findManyByCondition(IJob.I_JOB.RUN_AT.in(values));
    }

    /**
     * Find records that have <code>RUN_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByRunAt(final Collection<LocalTime> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.RUN_AT.in(values), limit);
    }

    /**
     * Find records that have <code>RUN_FORMULA IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByRunFormula(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.RUN_FORMULA.in(values));
    }

    /**
     * Find records that have <code>RUN_FORMULA IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByRunFormula(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.RUN_FORMULA.in(values), limit);
    }

    /**
     * Find records that have <code>DURATION IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByDuration(final Collection<Long> values) {
        return findManyByCondition(IJob.I_JOB.DURATION.in(values));
    }

    /**
     * Find records that have <code>DURATION IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByDuration(final Collection<Long> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.DURATION.in(values), limit);
    }

    /**
     * Find records that have <code>DURATION_COMPONENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByDurationComponent(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.DURATION_COMPONENT.in(values));
    }

    /**
     * Find records that have <code>DURATION_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByDurationComponent(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.DURATION_COMPONENT.in(values), limit);
    }

    /**
     * Find records that have <code>DURATION_CONFIG IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByDurationConfig(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.DURATION_CONFIG.in(values));
    }

    /**
     * Find records that have <code>DURATION_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByDurationConfig(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.DURATION_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>INCOME_COMPONENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByIncomeComponent(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.INCOME_COMPONENT.in(values));
    }

    /**
     * Find records that have <code>INCOME_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByIncomeComponent(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.INCOME_COMPONENT.in(values), limit);
    }

    /**
     * Find records that have <code>INCOME_ADDRESS IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByIncomeAddress(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.INCOME_ADDRESS.in(values));
    }

    /**
     * Find records that have <code>INCOME_ADDRESS IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByIncomeAddress(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.INCOME_ADDRESS.in(values), limit);
    }

    /**
     * Find records that have <code>OUTCOME_COMPONENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByOutcomeComponent(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.OUTCOME_COMPONENT.in(values));
    }

    /**
     * Find records that have <code>OUTCOME_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByOutcomeComponent(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.OUTCOME_COMPONENT.in(values), limit);
    }

    /**
     * Find records that have <code>OUTCOME_ADDRESS IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByOutcomeAddress(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.OUTCOME_ADDRESS.in(values));
    }

    /**
     * Find records that have <code>OUTCOME_ADDRESS IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByOutcomeAddress(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.OUTCOME_ADDRESS.in(values), limit);
    }

    /**
     * Find records that have <code>SERVICE_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByServiceId(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.SERVICE_ID.in(values));
    }

    /**
     * Find records that have <code>SERVICE_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByServiceId(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.SERVICE_ID.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(IJob.I_JOB.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(IJob.I_JOB.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(IJob.I_JOB.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(IJob.I_JOB.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.mbse.action.domain.tables.pojos.IJob>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(IJob.I_JOB.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<IJobRecord, io.zerows.extension.mbse.action.domain.tables.pojos.IJob, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<IJobRecord, io.zerows.extension.mbse.action.domain.tables.pojos.IJob, String>) super.queryExecutor();
    }
}
