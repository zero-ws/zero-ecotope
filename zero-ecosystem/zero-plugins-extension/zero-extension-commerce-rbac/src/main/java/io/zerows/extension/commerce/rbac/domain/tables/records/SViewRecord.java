/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.rbac.domain.tables.records;


import io.r2mo.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.rbac.domain.tables.SView;
import io.zerows.extension.commerce.rbac.domain.tables.interfaces.ISView;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record19;
import org.jooq.Row19;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SViewRecord extends UpdatableRecordImpl<SViewRecord> implements VertxPojo, Record19<String, String, String, String, String, String, String, String, String, String, Boolean, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String>, ISView {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ZDB.S_VIEW.KEY</code>. 「key」- 限定记录ID
     */
    @Override
    public SViewRecord setKey(final String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.KEY</code>. 「key」- 限定记录ID
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.NAME</code>. 「name」- 视图名称，每个 MATRIX 对应一个视图
     */
    @Override
    public SViewRecord setName(final String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.NAME</code>. 「name」- 视图名称，每个 MATRIX 对应一个视图
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.TITLE</code>. 「title」- 视图标题，用户输入，可选择
     */
    @Override
    public SViewRecord setTitle(final String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.TITLE</code>. 「title」- 视图标题，用户输入，可选择
     */
    @Override
    public String getTitle() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.OWNER</code>. 「owner」- 用户 / 角色ID
     */
    @Override
    public SViewRecord setOwner(final String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.OWNER</code>. 「owner」- 用户 / 角色ID
     */
    @Override
    public String getOwner() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.OWNER_TYPE</code>. 「ownerType」- ROLE 角色，USER
     * 用户
     */
    @Override
    public SViewRecord setOwnerType(final String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.OWNER_TYPE</code>. 「ownerType」- ROLE 角色，USER
     * 用户
     */
    @Override
    public String getOwnerType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.RESOURCE_ID</code>. 「resourceId」- 关联资源ID
     */
    @Override
    public SViewRecord setResourceId(final String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.RESOURCE_ID</code>. 「resourceId」- 关联资源ID
     */
    @Override
    public String getResourceId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.PROJECTION</code>. 「projection」-
     * 该资源的列定义（单用户处理）
     */
    @Override
    public SViewRecord setProjection(final String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.PROJECTION</code>. 「projection」-
     * 该资源的列定义（单用户处理）
     */
    @Override
    public String getProjection() {
        return (String) get(6);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.CRITERIA</code>. 「criteria」- 该资源的行查询（单用户处理）
     */
    @Override
    public SViewRecord setCriteria(final String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.CRITERIA</code>. 「criteria」- 该资源的行查询（单用户处理）
     */
    @Override
    public String getCriteria() {
        return (String) get(7);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.ROWS</code>. 「rows」- 该资源针对保存的行进行过滤
     */
    @Override
    public SViewRecord setRows(final String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.ROWS</code>. 「rows」- 该资源针对保存的行进行过滤
     */
    @Override
    public String getRows() {
        return (String) get(8);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.POSITION</code>. 「position」-
     * 当前视图的模块位置，比页面低一个维度
     */
    @Override
    public SViewRecord setPosition(final String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.POSITION</code>. 「position」-
     * 当前视图的模块位置，比页面低一个维度
     */
    @Override
    public String getPosition() {
        return (String) get(9);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.VISITANT</code>. 「visitant」- 是否包含了视图访问者
     */
    @Override
    public SViewRecord setVisitant(final Boolean value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.VISITANT</code>. 「visitant」- 是否包含了视图访问者
     */
    @Override
    public Boolean getVisitant() {
        return (Boolean) get(10);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    @Override
    public SViewRecord setSigma(final String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.SIGMA</code>. 「sigma」- 用户组绑定的统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(11);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public SViewRecord setLanguage(final String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(12);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public SViewRecord setActive(final Boolean value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(13);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public SViewRecord setMetadata(final String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(14);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public SViewRecord setCreatedAt(final LocalDateTime value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(15);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public SViewRecord setCreatedBy(final String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(16);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public SViewRecord setUpdatedAt(final LocalDateTime value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(17);
    }

    /**
     * Setter for <code>ZDB.S_VIEW.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public SViewRecord setUpdatedBy(final String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.S_VIEW.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(18);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record19 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row19<String, String, String, String, String, String, String, String, String, String, Boolean, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    @Override
    public Row19<String, String, String, String, String, String, String, String, String, String, Boolean, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row19) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return SView.S_VIEW.KEY;
    }

    @Override
    public Field<String> field2() {
        return SView.S_VIEW.NAME;
    }

    @Override
    public Field<String> field3() {
        return SView.S_VIEW.TITLE;
    }

    @Override
    public Field<String> field4() {
        return SView.S_VIEW.OWNER;
    }

    @Override
    public Field<String> field5() {
        return SView.S_VIEW.OWNER_TYPE;
    }

    @Override
    public Field<String> field6() {
        return SView.S_VIEW.RESOURCE_ID;
    }

    @Override
    public Field<String> field7() {
        return SView.S_VIEW.PROJECTION;
    }

    @Override
    public Field<String> field8() {
        return SView.S_VIEW.CRITERIA;
    }

    @Override
    public Field<String> field9() {
        return SView.S_VIEW.ROWS;
    }

    @Override
    public Field<String> field10() {
        return SView.S_VIEW.POSITION;
    }

    @Override
    public Field<Boolean> field11() {
        return SView.S_VIEW.VISITANT;
    }

    @Override
    public Field<String> field12() {
        return SView.S_VIEW.SIGMA;
    }

    @Override
    public Field<String> field13() {
        return SView.S_VIEW.LANGUAGE;
    }

    @Override
    public Field<Boolean> field14() {
        return SView.S_VIEW.ACTIVE;
    }

    @Override
    public Field<String> field15() {
        return SView.S_VIEW.METADATA;
    }

    @Override
    public Field<LocalDateTime> field16() {
        return SView.S_VIEW.CREATED_AT;
    }

    @Override
    public Field<String> field17() {
        return SView.S_VIEW.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field18() {
        return SView.S_VIEW.UPDATED_AT;
    }

    @Override
    public Field<String> field19() {
        return SView.S_VIEW.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getTitle();
    }

    @Override
    public String component4() {
        return getOwner();
    }

    @Override
    public String component5() {
        return getOwnerType();
    }

    @Override
    public String component6() {
        return getResourceId();
    }

    @Override
    public String component7() {
        return getProjection();
    }

    @Override
    public String component8() {
        return getCriteria();
    }

    @Override
    public String component9() {
        return getRows();
    }

    @Override
    public String component10() {
        return getPosition();
    }

    @Override
    public Boolean component11() {
        return getVisitant();
    }

    @Override
    public String component12() {
        return getSigma();
    }

    @Override
    public String component13() {
        return getLanguage();
    }

    @Override
    public Boolean component14() {
        return getActive();
    }

    @Override
    public String component15() {
        return getMetadata();
    }

    @Override
    public LocalDateTime component16() {
        return getCreatedAt();
    }

    @Override
    public String component17() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component18() {
        return getUpdatedAt();
    }

    @Override
    public String component19() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getTitle();
    }

    @Override
    public String value4() {
        return getOwner();
    }

    @Override
    public String value5() {
        return getOwnerType();
    }

    @Override
    public String value6() {
        return getResourceId();
    }

    @Override
    public String value7() {
        return getProjection();
    }

    @Override
    public String value8() {
        return getCriteria();
    }

    @Override
    public String value9() {
        return getRows();
    }

    @Override
    public String value10() {
        return getPosition();
    }

    @Override
    public Boolean value11() {
        return getVisitant();
    }

    @Override
    public String value12() {
        return getSigma();
    }

    @Override
    public String value13() {
        return getLanguage();
    }

    @Override
    public Boolean value14() {
        return getActive();
    }

    @Override
    public String value15() {
        return getMetadata();
    }

    @Override
    public LocalDateTime value16() {
        return getCreatedAt();
    }

    @Override
    public String value17() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value18() {
        return getUpdatedAt();
    }

    @Override
    public String value19() {
        return getUpdatedBy();
    }

    @Override
    public SViewRecord value1(final String value) {
        setKey(value);
        return this;
    }

    @Override
    public SViewRecord value2(final String value) {
        setName(value);
        return this;
    }

    @Override
    public SViewRecord value3(final String value) {
        setTitle(value);
        return this;
    }

    @Override
    public SViewRecord value4(final String value) {
        setOwner(value);
        return this;
    }

    @Override
    public SViewRecord value5(final String value) {
        setOwnerType(value);
        return this;
    }

    @Override
    public SViewRecord value6(final String value) {
        setResourceId(value);
        return this;
    }

    @Override
    public SViewRecord value7(final String value) {
        setProjection(value);
        return this;
    }

    @Override
    public SViewRecord value8(final String value) {
        setCriteria(value);
        return this;
    }

    @Override
    public SViewRecord value9(final String value) {
        setRows(value);
        return this;
    }

    @Override
    public SViewRecord value10(final String value) {
        setPosition(value);
        return this;
    }

    @Override
    public SViewRecord value11(final Boolean value) {
        setVisitant(value);
        return this;
    }

    @Override
    public SViewRecord value12(final String value) {
        setSigma(value);
        return this;
    }

    @Override
    public SViewRecord value13(final String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public SViewRecord value14(final Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public SViewRecord value15(final String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public SViewRecord value16(final LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public SViewRecord value17(final String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public SViewRecord value18(final LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public SViewRecord value19(final String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public SViewRecord values(final String value1, final String value2, final String value3, final String value4, final String value5, final String value6, final String value7, final String value8, final String value9, final String value10, final Boolean value11, final String value12, final String value13, final Boolean value14, final String value15, final LocalDateTime value16, final String value17, final LocalDateTime value18, final String value19) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(final ISView from) {
        setKey(from.getKey());
        setName(from.getName());
        setTitle(from.getTitle());
        setOwner(from.getOwner());
        setOwnerType(from.getOwnerType());
        setResourceId(from.getResourceId());
        setProjection(from.getProjection());
        setCriteria(from.getCriteria());
        setRows(from.getRows());
        setPosition(from.getPosition());
        setVisitant(from.getVisitant());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends ISView> E into(final E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SViewRecord
     */
    public SViewRecord() {
        super(SView.S_VIEW);
    }

    /**
     * Create a detached, initialised SViewRecord
     */
    public SViewRecord(final String key, final String name, final String title, final String owner, final String ownerType, final String resourceId, final String projection, final String criteria, final String rows, final String position, final Boolean visitant, final String sigma, final String language, final Boolean active, final String metadata, final LocalDateTime createdAt, final String createdBy, final LocalDateTime updatedAt, final String updatedBy) {
        super(SView.S_VIEW);

        setKey(key);
        setName(name);
        setTitle(title);
        setOwner(owner);
        setOwnerType(ownerType);
        setResourceId(resourceId);
        setProjection(projection);
        setCriteria(criteria);
        setRows(rows);
        setPosition(position);
        setVisitant(visitant);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SViewRecord
     */
    public SViewRecord(final io.zerows.extension.commerce.rbac.domain.tables.pojos.SView value) {
        super(SView.S_VIEW);

        if (value != null) {
            setKey(value.getKey());
            setName(value.getName());
            setTitle(value.getTitle());
            setOwner(value.getOwner());
            setOwnerType(value.getOwnerType());
            setResourceId(value.getResourceId());
            setProjection(value.getProjection());
            setCriteria(value.getCriteria());
            setRows(value.getRows());
            setPosition(value.getPosition());
            setVisitant(value.getVisitant());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            resetChangedOnNotNull();
        }
    }

    public SViewRecord(final io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
