/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.records;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.documentation.domain.tables.DPaperRef;
import io.zerows.extension.commerce.documentation.domain.tables.interfaces.IDPaperRef;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DPaperRefRecord extends UpdatableRecordImpl<DPaperRefRecord> implements VertxPojo, Record5<String, String, Integer, Boolean, String>, IDPaperRef {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached DPaperRefRecord
     */
    public DPaperRefRecord() {
        super(DPaperRef.D_PAPER_REF);
    }

    /**
     * Create a detached, initialised DPaperRefRecord
     */
    public DPaperRefRecord(String paperId, String questionId, Integer sort, Boolean required, String ruleComponent) {
        super(DPaperRef.D_PAPER_REF);

        setPaperId(paperId);
        setQuestionId(questionId);
        setSort(sort);
        setRequired(required);
        setRuleComponent(ruleComponent);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DPaperRefRecord
     */
    public DPaperRefRecord(io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaperRef value) {
        super(DPaperRef.D_PAPER_REF);

        if (value != null) {
            setPaperId(value.getPaperId());
            setQuestionId(value.getQuestionId());
            setSort(value.getSort());
            setRequired(value.getRequired());
            setRuleComponent(value.getRuleComponent());
            resetChangedOnNotNull();
        }
    }

    public DPaperRefRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.D_PAPER_REF.PAPER_ID</code>. 「paperId」- 考卷ID
     */
    @Override
    public String getPaperId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.D_PAPER_REF.PAPER_ID</code>. 「paperId」- 考卷ID
     */
    @Override
    public DPaperRefRecord setPaperId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER_REF.QUESTION_ID</code>. 「questionId」- 问题ID
     */
    @Override
    public String getQuestionId() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.D_PAPER_REF.QUESTION_ID</code>. 「questionId」- 问题ID
     */
    @Override
    public DPaperRefRecord setQuestionId(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER_REF.SORT</code>. 「sort」- 问题排序
     */
    @Override
    public Integer getSort() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>ZDB.D_PAPER_REF.SORT</code>. 「sort」- 问题排序
     */
    @Override
    public DPaperRefRecord setSort(Integer value) {
        set(2, value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>ZDB.D_PAPER_REF.REQUIRED</code>. 「required」- 必答题
     */
    @Override
    public Boolean getRequired() {
        return (Boolean) get(3);
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.D_PAPER_REF.REQUIRED</code>. 「required」- 必答题
     */
    @Override
    public DPaperRefRecord setRequired(Boolean value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER_REF.RULE_COMPONENT</code>. 「ruleComponent」-
     * 关联执行组件（扩展用）
     */
    @Override
    public String getRuleComponent() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.D_PAPER_REF.RULE_COMPONENT</code>. 「ruleComponent」-
     * 关联执行组件（扩展用）
     */
    @Override
    public DPaperRefRecord setRuleComponent(String value) {
        set(4, value);
        return this;
    }

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    @Override
    public Row5<String, String, Integer, Boolean, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, String, Integer, Boolean, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return DPaperRef.D_PAPER_REF.PAPER_ID;
    }

    @Override
    public Field<String> field2() {
        return DPaperRef.D_PAPER_REF.QUESTION_ID;
    }

    @Override
    public Field<Integer> field3() {
        return DPaperRef.D_PAPER_REF.SORT;
    }

    @Override
    public Field<Boolean> field4() {
        return DPaperRef.D_PAPER_REF.REQUIRED;
    }

    @Override
    public Field<String> field5() {
        return DPaperRef.D_PAPER_REF.RULE_COMPONENT;
    }

    @Override
    public String component1() {
        return getPaperId();
    }

    @Override
    public String component2() {
        return getQuestionId();
    }

    @Override
    public Integer component3() {
        return getSort();
    }

    @Override
    public Boolean component4() {
        return getRequired();
    }

    @Override
    public String component5() {
        return getRuleComponent();
    }

    @Override
    public String value1() {
        return getPaperId();
    }

    @Override
    public String value2() {
        return getQuestionId();
    }

    @Override
    public Integer value3() {
        return getSort();
    }

    @Override
    public Boolean value4() {
        return getRequired();
    }

    @Override
    public String value5() {
        return getRuleComponent();
    }

    @Override
    public DPaperRefRecord value1(String value) {
        setPaperId(value);
        return this;
    }

    @Override
    public DPaperRefRecord value2(String value) {
        setQuestionId(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public DPaperRefRecord value3(Integer value) {
        setSort(value);
        return this;
    }

    @Override
    public DPaperRefRecord value4(Boolean value) {
        setRequired(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    @Override
    public DPaperRefRecord value5(String value) {
        setRuleComponent(value);
        return this;
    }

    @Override
    public DPaperRefRecord values(String value1, String value2, Integer value3, Boolean value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    @Override
    public void from(IDPaperRef from) {
        setPaperId(from.getPaperId());
        setQuestionId(from.getQuestionId());
        setSort(from.getSort());
        setRequired(from.getRequired());
        setRuleComponent(from.getRuleComponent());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IDPaperRef> E into(E into) {
        into.from(this);
        return into;
    }
}
