/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;

import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.setOrThrow;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public interface IDExam extends VertxPojo, Serializable {

    /**
     * Getter for <code>ZDB.D_EXAM.KEY</code>. 「key」- 考试主键
     */
    public String getKey();

    /**
     * Setter for <code>ZDB.D_EXAM.KEY</code>. 「key」- 考试主键
     */
    public IDExam setKey(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.CODE</code>. 「code」- 考试编号
     */
    public String getCode();

    /**
     * Setter for <code>ZDB.D_EXAM.CODE</code>. 「code」- 考试编号
     */
    public IDExam setCode(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.NAME</code>. 「name」- 考试名称
     */
    public String getName();

    /**
     * Setter for <code>ZDB.D_EXAM.NAME</code>. 「name」- 考试名称
     */
    public IDExam setName(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.SUBJECT</code>. 「subject」- 考试科目
     */
    public String getSubject();

    /**
     * Setter for <code>ZDB.D_EXAM.SUBJECT</code>. 「subject」- 考试科目
     */
    public IDExam setSubject(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.BRIEF</code>. 「brief」- 考试简介
     */
    public String getBrief();

    /**
     * Setter for <code>ZDB.D_EXAM.BRIEF</code>. 「brief」- 考试简介
     */
    public IDExam setBrief(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.SN</code>. 「sn」- 考试代码，如SCJP、SCWCD
     * 1.5等专业考试专用代码
     */
    public String getSn();

    /**
     * Setter for <code>ZDB.D_EXAM.SN</code>. 「sn」- 考试代码，如SCJP、SCWCD
     * 1.5等专业考试专用代码
     */
    public IDExam setSn(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.DURATION</code>. 「duration」- 时长，单位：分钟
     */
    public Integer getDuration();

    /**
     * Setter for <code>ZDB.D_EXAM.DURATION</code>. 「duration」- 时长，单位：分钟
     */
    public IDExam setDuration(Integer value);

    /**
     * Getter for <code>ZDB.D_EXAM.TYPE</code>. 「type」- 考试类型
     */
    public String getType();

    /**
     * Setter for <code>ZDB.D_EXAM.TYPE</code>. 「type」- 考试类型
     */
    public IDExam setType(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.STATUS</code>. 「status」- 状态
     */
    public String getStatus();

    /**
     * Setter for <code>ZDB.D_EXAM.STATUS</code>. 「status」- 状态
     */
    public IDExam setStatus(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.ONLINE</code>. 「online」- 是否线上考试
     */
    public Boolean getOnline();

    /**
     * Setter for <code>ZDB.D_EXAM.ONLINE</code>. 「online」- 是否线上考试
     */
    public IDExam setOnline(Boolean value);

    /**
     * Getter for <code>ZDB.D_EXAM.ADDR_URL</code>. 「addrUrl」- 线上考试地址
     */
    public String getAddrUrl();

    /**
     * Setter for <code>ZDB.D_EXAM.ADDR_URL</code>. 「addrUrl」- 线上考试地址
     */
    public IDExam setAddrUrl(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.ADDR_LOCATION</code>. 「addrLocation」-
     * 线下考试的考试地址
     */
    public String getAddrLocation();

    /**
     * Setter for <code>ZDB.D_EXAM.ADDR_LOCATION</code>. 「addrLocation」-
     * 线下考试的考试地址
     */
    public IDExam setAddrLocation(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.ADDR_CONTENT</code>. 「addrContent」-
     * 线下考试地址详细描述
     */
    public String getAddrContent();

    /**
     * Setter for <code>ZDB.D_EXAM.ADDR_CONTENT</code>. 「addrContent」-
     * 线下考试地址详细描述
     */
    public IDExam setAddrContent(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    public String getModelId();

    /**
     * Setter for <code>ZDB.D_EXAM.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    public IDExam setModelId(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public String getModelKey();

    /**
     * Setter for <code>ZDB.D_EXAM.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public IDExam setModelKey(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.ISSUER</code>. 「issuer」- 发布者
     */
    public String getIssuer();

    /**
     * Setter for <code>ZDB.D_EXAM.ISSUER</code>. 「issuer」- 发布者
     */
    public IDExam setIssuer(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.ISSUER_AT</code>. 「issuerAt」- 发布时间
     */
    public LocalDateTime getIssuerAt();

    /**
     * Setter for <code>ZDB.D_EXAM.ISSUER_AT</code>. 「issuerAt」- 发布时间
     */
    public IDExam setIssuerAt(LocalDateTime value);

    /**
     * Getter for <code>ZDB.D_EXAM.START_AT</code>. 「startAt」- 考试开始时间
     */
    public LocalDateTime getStartAt();

    /**
     * Setter for <code>ZDB.D_EXAM.START_AT</code>. 「startAt」- 考试开始时间
     */
    public IDExam setStartAt(LocalDateTime value);

    /**
     * Getter for <code>ZDB.D_EXAM.END_AT</code>. 「endAt」- 考试结束时间
     */
    public LocalDateTime getEndAt();

    /**
     * Setter for <code>ZDB.D_EXAM.END_AT</code>. 「endAt」- 考试结束时间
     */
    public IDExam setEndAt(LocalDateTime value);

    /**
     * Getter for <code>ZDB.D_EXAM.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>ZDB.D_EXAM.SIGMA</code>. 「sigma」- 统一标识
     */
    public IDExam setSigma(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>ZDB.D_EXAM.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IDExam setLanguage(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>ZDB.D_EXAM.ACTIVE</code>. 「active」- 是否启用
     */
    public IDExam setActive(Boolean value);

    /**
     * Getter for <code>ZDB.D_EXAM.METADATA</code>. 「metadata」- 附加配置数据
     */
    public String getMetadata();

    /**
     * Setter for <code>ZDB.D_EXAM.METADATA</code>. 「metadata」- 附加配置数据
     */
    public IDExam setMetadata(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>ZDB.D_EXAM.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IDExam setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>ZDB.D_EXAM.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>ZDB.D_EXAM.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IDExam setCreatedBy(String value);

    /**
     * Getter for <code>ZDB.D_EXAM.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>ZDB.D_EXAM.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IDExam setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>ZDB.D_EXAM.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    /**
     * Setter for <code>ZDB.D_EXAM.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IDExam setUpdatedBy(String value);

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IDExam
     */
    public void from(IDExam from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IDExam
     */
    public <E extends IDExam> E into(E into);

    @Override
    public default IDExam fromJson(io.vertx.core.json.JsonObject json) {
        setOrThrow(this::setKey, json::getString, "KEY", "java.lang.String");
        setOrThrow(this::setCode, json::getString, "CODE", "java.lang.String");
        setOrThrow(this::setName, json::getString, "NAME", "java.lang.String");
        setOrThrow(this::setSubject, json::getString, "SUBJECT", "java.lang.String");
        setOrThrow(this::setBrief, json::getString, "BRIEF", "java.lang.String");
        setOrThrow(this::setSn, json::getString, "SN", "java.lang.String");
        setOrThrow(this::setDuration, json::getInteger, "DURATION", "java.lang.Integer");
        setOrThrow(this::setType, json::getString, "TYPE", "java.lang.String");
        setOrThrow(this::setStatus, json::getString, "STATUS", "java.lang.String");
        setOrThrow(this::setOnline, json::getBoolean, "ONLINE", "java.lang.Boolean");
        setOrThrow(this::setAddrUrl, json::getString, "ADDR_URL", "java.lang.String");
        setOrThrow(this::setAddrLocation, json::getString, "ADDR_LOCATION", "java.lang.String");
        setOrThrow(this::setAddrContent, json::getString, "ADDR_CONTENT", "java.lang.String");
        setOrThrow(this::setModelId, json::getString, "MODEL_ID", "java.lang.String");
        setOrThrow(this::setModelKey, json::getString, "MODEL_KEY", "java.lang.String");
        setOrThrow(this::setIssuer, json::getString, "ISSUER", "java.lang.String");
        setOrThrow(this::setIssuerAt, key -> {
            String s = json.getString(key);
            return s == null ? null : java.time.LocalDateTime.parse(s);
        }, "ISSUER_AT", "java.time.LocalDateTime");
        setOrThrow(this::setStartAt, key -> {
            String s = json.getString(key);
            return s == null ? null : java.time.LocalDateTime.parse(s);
        }, "START_AT", "java.time.LocalDateTime");
        setOrThrow(this::setEndAt, key -> {
            String s = json.getString(key);
            return s == null ? null : java.time.LocalDateTime.parse(s);
        }, "END_AT", "java.time.LocalDateTime");
        setOrThrow(this::setSigma, json::getString, "SIGMA", "java.lang.String");
        setOrThrow(this::setLanguage, json::getString, "LANGUAGE", "java.lang.String");
        setOrThrow(this::setActive, json::getBoolean, "ACTIVE", "java.lang.Boolean");
        setOrThrow(this::setMetadata, json::getString, "METADATA", "java.lang.String");
        setOrThrow(this::setCreatedAt, key -> {
            String s = json.getString(key);
            return s == null ? null : java.time.LocalDateTime.parse(s);
        }, "CREATED_AT", "java.time.LocalDateTime");
        setOrThrow(this::setCreatedBy, json::getString, "CREATED_BY", "java.lang.String");
        setOrThrow(this::setUpdatedAt, key -> {
            String s = json.getString(key);
            return s == null ? null : java.time.LocalDateTime.parse(s);
        }, "UPDATED_AT", "java.time.LocalDateTime");
        setOrThrow(this::setUpdatedBy, json::getString, "UPDATED_BY", "java.lang.String");
        return this;
    }


    @Override
    public default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY", getKey());
        json.put("CODE", getCode());
        json.put("NAME", getName());
        json.put("SUBJECT", getSubject());
        json.put("BRIEF", getBrief());
        json.put("SN", getSn());
        json.put("DURATION", getDuration());
        json.put("TYPE", getType());
        json.put("STATUS", getStatus());
        json.put("ONLINE", getOnline());
        json.put("ADDR_URL", getAddrUrl());
        json.put("ADDR_LOCATION", getAddrLocation());
        json.put("ADDR_CONTENT", getAddrContent());
        json.put("MODEL_ID", getModelId());
        json.put("MODEL_KEY", getModelKey());
        json.put("ISSUER", getIssuer());
        json.put("ISSUER_AT", getIssuerAt() == null ? null : getIssuerAt().toString());
        json.put("START_AT", getStartAt() == null ? null : getStartAt().toString());
        json.put("END_AT", getEndAt() == null ? null : getEndAt().toString());
        json.put("SIGMA", getSigma());
        json.put("LANGUAGE", getLanguage());
        json.put("ACTIVE", getActive());
        json.put("METADATA", getMetadata());
        json.put("CREATED_AT", getCreatedAt() == null ? null : getCreatedAt().toString());
        json.put("CREATED_BY", getCreatedBy());
        json.put("UPDATED_AT", getUpdatedAt() == null ? null : getUpdatedAt().toString());
        json.put("UPDATED_BY", getUpdatedBy());
        return json;
    }

}
