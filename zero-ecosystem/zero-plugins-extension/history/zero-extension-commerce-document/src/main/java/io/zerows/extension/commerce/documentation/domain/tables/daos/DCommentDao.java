/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.commerce.documentation.domain.tables.DComment;
import io.zerows.extension.commerce.documentation.domain.tables.records.DCommentRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DCommentDao extends AbstractVertxDAO<DCommentRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment, String, Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>>, Future<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DCommentRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public DCommentDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(DComment.D_COMMENT, io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment.class, new JDBCClassicQueryExecutor<DCommentRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment, String>(configuration, io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment.class, vertx));
    }

    @Override
    protected String getId(io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByCode(Collection<String> values) {
        return findManyByCondition(DComment.D_COMMENT.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByCode(Collection<String> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByName(Collection<String> values) {
        return findManyByCondition(DComment.D_COMMENT.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByName(Collection<String> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>CONTENT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByContent(Collection<String> values) {
        return findManyByCondition(DComment.D_COMMENT.CONTENT.in(values));
    }

    /**
     * Find records that have <code>CONTENT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByContent(Collection<String> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.CONTENT.in(values), limit);
    }

    /**
     * Find records that have <code>MADE_NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByMadeName(Collection<String> values) {
        return findManyByCondition(DComment.D_COMMENT.MADE_NAME.in(values));
    }

    /**
     * Find records that have <code>MADE_NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByMadeName(Collection<String> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.MADE_NAME.in(values), limit);
    }

    /**
     * Find records that have <code>MADE_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByMadeAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DComment.D_COMMENT.MADE_AT.in(values));
    }

    /**
     * Find records that have <code>MADE_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByMadeAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.MADE_AT.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByType(Collection<String> values) {
        return findManyByCondition(DComment.D_COMMENT.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByType(Collection<String> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>SORT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyBySort(Collection<Integer> values) {
        return findManyByCondition(DComment.D_COMMENT.SORT.in(values));
    }

    /**
     * Find records that have <code>SORT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyBySort(Collection<Integer> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.SORT.in(values), limit);
    }

    /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByModelId(Collection<String> values) {
        return findManyByCondition(DComment.D_COMMENT.MODEL_ID.in(values));
    }

    /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByModelId(Collection<String> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.MODEL_ID.in(values), limit);
    }

    /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByModelKey(Collection<String> values) {
        return findManyByCondition(DComment.D_COMMENT.MODEL_KEY.in(values));
    }

    /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByModelKey(Collection<String> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.MODEL_KEY.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyBySigma(Collection<String> values) {
        return findManyByCondition(DComment.D_COMMENT.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyBySigma(Collection<String> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByLanguage(Collection<String> values) {
        return findManyByCondition(DComment.D_COMMENT.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByLanguage(Collection<String> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByActive(Collection<Boolean> values) {
        return findManyByCondition(DComment.D_COMMENT.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByActive(Collection<Boolean> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByMetadata(Collection<String> values) {
        return findManyByCondition(DComment.D_COMMENT.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByMetadata(Collection<String> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByCreatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DComment.D_COMMENT.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByCreatedBy(Collection<String> values) {
        return findManyByCondition(DComment.D_COMMENT.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByCreatedBy(Collection<String> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DComment.D_COMMENT.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByUpdatedBy(Collection<String> values) {
        return findManyByCondition(DComment.D_COMMENT.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment>> findManyByUpdatedBy(Collection<String> values, int limit) {
        return findManyByCondition(DComment.D_COMMENT.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<DCommentRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<DCommentRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DComment, String>) super.queryExecutor();
    }
}
