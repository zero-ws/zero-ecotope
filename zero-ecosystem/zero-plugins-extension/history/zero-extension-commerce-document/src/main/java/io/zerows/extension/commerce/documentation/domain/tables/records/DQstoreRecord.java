/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.records;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.documentation.domain.tables.DQstore;
import io.zerows.extension.commerce.documentation.domain.tables.interfaces.IDQstore;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record19;
import org.jooq.Row19;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DQstoreRecord extends UpdatableRecordImpl<DQstoreRecord> implements VertxPojo, Record19<String, String, String, String, String, String, String, String, Integer, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String>, IDQstore {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached DQstoreRecord
     */
    public DQstoreRecord() {
        super(DQstore.D_QSTORE);
    }

    /**
     * Create a detached, initialised DQstoreRecord
     */
    public DQstoreRecord(String key, String code, String type, String status, String category, String name, String brief, String version, Integer questions, String modelId, String modelKey, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(DQstore.D_QSTORE);

        setKey(key);
        setCode(code);
        setType(type);
        setStatus(status);
        setCategory(category);
        setName(name);
        setBrief(brief);
        setVersion(version);
        setQuestions(questions);
        setModelId(modelId);
        setModelKey(modelKey);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DQstoreRecord
     */
    public DQstoreRecord(io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore value) {
        super(DQstore.D_QSTORE);

        if (value != null) {
            setKey(value.getKey());
            setCode(value.getCode());
            setType(value.getType());
            setStatus(value.getStatus());
            setCategory(value.getCategory());
            setName(value.getName());
            setBrief(value.getBrief());
            setVersion(value.getVersion());
            setQuestions(value.getQuestions());
            setModelId(value.getModelId());
            setModelKey(value.getModelKey());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            resetChangedOnNotNull();
        }
    }

    public DQstoreRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.KEY</code>. 「key」- 题库主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.KEY</code>. 「key」- 题库主键
     */
    @Override
    public DQstoreRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.CODE</code>. 「code」-  题库编号
     */
    @Override
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.CODE</code>. 「code」-  题库编号
     */
    @Override
    public DQstoreRecord setCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.TYPE</code>. 「type」-  题库类型
     */
    @Override
    public String getType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.TYPE</code>. 「type」-  题库类型
     */
    @Override
    public DQstoreRecord setType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.STATUS</code>. 「status」- 状态
     */
    @Override
    public String getStatus() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.STATUS</code>. 「status」- 状态
     */
    @Override
    public DQstoreRecord setStatus(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.CATEGORY</code>. 「category」- 题库类型、树型模型
     */
    @Override
    public String getCategory() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.CATEGORY</code>. 「category」- 题库类型、树型模型
     */
    @Override
    public DQstoreRecord setCategory(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.NAME</code>. 「name」-  题库标题
     */
    @Override
    public String getName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.NAME</code>. 「name」-  题库标题
     */
    @Override
    public DQstoreRecord setName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.BRIEF</code>. 「brief」- 题库简介
     */
    @Override
    public String getBrief() {
        return (String) get(6);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.BRIEF</code>. 「brief」- 题库简介
     */
    @Override
    public DQstoreRecord setBrief(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.VERSION</code>. 「version」- 题库版本, N.N
     */
    @Override
    public String getVersion() {
        return (String) get(7);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.VERSION</code>. 「version」- 题库版本, N.N
     */
    @Override
    public DQstoreRecord setVersion(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.QUESTIONS</code>. 「questions」- 题目数量
     */
    @Override
    public Integer getQuestions() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.QUESTIONS</code>. 「questions」- 题目数量
     */
    @Override
    public DQstoreRecord setQuestions(Integer value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public String getModelId() {
        return (String) get(9);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public DQstoreRecord setModelId(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public String getModelKey() {
        return (String) get(10);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public DQstoreRecord setModelKey(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(11);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public DQstoreRecord setSigma(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(12);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public DQstoreRecord setLanguage(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(13);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public DQstoreRecord setActive(Boolean value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(14);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public DQstoreRecord setMetadata(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(15);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public DQstoreRecord setCreatedAt(LocalDateTime value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(16);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public DQstoreRecord setCreatedBy(String value) {
        set(16, value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>ZDB.D_QSTORE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(17);
    }

    // -------------------------------------------------------------------------
    // Record19 type implementation
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.D_QSTORE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public DQstoreRecord setUpdatedAt(LocalDateTime value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_QSTORE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(18);
    }

    /**
     * Setter for <code>ZDB.D_QSTORE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public DQstoreRecord setUpdatedBy(String value) {
        set(18, value);
        return this;
    }

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    @Override
    public Row19<String, String, String, String, String, String, String, String, Integer, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row19) super.fieldsRow();
    }

    @Override
    public Row19<String, String, String, String, String, String, String, String, Integer, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row19) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return DQstore.D_QSTORE.KEY;
    }

    @Override
    public Field<String> field2() {
        return DQstore.D_QSTORE.CODE;
    }

    @Override
    public Field<String> field3() {
        return DQstore.D_QSTORE.TYPE;
    }

    @Override
    public Field<String> field4() {
        return DQstore.D_QSTORE.STATUS;
    }

    @Override
    public Field<String> field5() {
        return DQstore.D_QSTORE.CATEGORY;
    }

    @Override
    public Field<String> field6() {
        return DQstore.D_QSTORE.NAME;
    }

    @Override
    public Field<String> field7() {
        return DQstore.D_QSTORE.BRIEF;
    }

    @Override
    public Field<String> field8() {
        return DQstore.D_QSTORE.VERSION;
    }

    @Override
    public Field<Integer> field9() {
        return DQstore.D_QSTORE.QUESTIONS;
    }

    @Override
    public Field<String> field10() {
        return DQstore.D_QSTORE.MODEL_ID;
    }

    @Override
    public Field<String> field11() {
        return DQstore.D_QSTORE.MODEL_KEY;
    }

    @Override
    public Field<String> field12() {
        return DQstore.D_QSTORE.SIGMA;
    }

    @Override
    public Field<String> field13() {
        return DQstore.D_QSTORE.LANGUAGE;
    }

    @Override
    public Field<Boolean> field14() {
        return DQstore.D_QSTORE.ACTIVE;
    }

    @Override
    public Field<String> field15() {
        return DQstore.D_QSTORE.METADATA;
    }

    @Override
    public Field<LocalDateTime> field16() {
        return DQstore.D_QSTORE.CREATED_AT;
    }

    @Override
    public Field<String> field17() {
        return DQstore.D_QSTORE.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field18() {
        return DQstore.D_QSTORE.UPDATED_AT;
    }

    @Override
    public Field<String> field19() {
        return DQstore.D_QSTORE.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getCode();
    }

    @Override
    public String component3() {
        return getType();
    }

    @Override
    public String component4() {
        return getStatus();
    }

    @Override
    public String component5() {
        return getCategory();
    }

    @Override
    public String component6() {
        return getName();
    }

    @Override
    public String component7() {
        return getBrief();
    }

    @Override
    public String component8() {
        return getVersion();
    }

    @Override
    public Integer component9() {
        return getQuestions();
    }

    @Override
    public String component10() {
        return getModelId();
    }

    @Override
    public String component11() {
        return getModelKey();
    }

    @Override
    public String component12() {
        return getSigma();
    }

    @Override
    public String component13() {
        return getLanguage();
    }

    @Override
    public Boolean component14() {
        return getActive();
    }

    @Override
    public String component15() {
        return getMetadata();
    }

    @Override
    public LocalDateTime component16() {
        return getCreatedAt();
    }

    @Override
    public String component17() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component18() {
        return getUpdatedAt();
    }

    @Override
    public String component19() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getCode();
    }

    @Override
    public String value3() {
        return getType();
    }

    @Override
    public String value4() {
        return getStatus();
    }

    @Override
    public String value5() {
        return getCategory();
    }

    @Override
    public String value6() {
        return getName();
    }

    @Override
    public String value7() {
        return getBrief();
    }

    @Override
    public String value8() {
        return getVersion();
    }

    @Override
    public Integer value9() {
        return getQuestions();
    }

    @Override
    public String value10() {
        return getModelId();
    }

    @Override
    public String value11() {
        return getModelKey();
    }

    @Override
    public String value12() {
        return getSigma();
    }

    @Override
    public String value13() {
        return getLanguage();
    }

    @Override
    public Boolean value14() {
        return getActive();
    }

    @Override
    public String value15() {
        return getMetadata();
    }

    @Override
    public LocalDateTime value16() {
        return getCreatedAt();
    }

    @Override
    public String value17() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value18() {
        return getUpdatedAt();
    }

    @Override
    public String value19() {
        return getUpdatedBy();
    }

    @Override
    public DQstoreRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public DQstoreRecord value2(String value) {
        setCode(value);
        return this;
    }

    @Override
    public DQstoreRecord value3(String value) {
        setType(value);
        return this;
    }

    @Override
    public DQstoreRecord value4(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public DQstoreRecord value5(String value) {
        setCategory(value);
        return this;
    }

    @Override
    public DQstoreRecord value6(String value) {
        setName(value);
        return this;
    }

    @Override
    public DQstoreRecord value7(String value) {
        setBrief(value);
        return this;
    }

    @Override
    public DQstoreRecord value8(String value) {
        setVersion(value);
        return this;
    }

    @Override
    public DQstoreRecord value9(Integer value) {
        setQuestions(value);
        return this;
    }

    @Override
    public DQstoreRecord value10(String value) {
        setModelId(value);
        return this;
    }

    @Override
    public DQstoreRecord value11(String value) {
        setModelKey(value);
        return this;
    }

    @Override
    public DQstoreRecord value12(String value) {
        setSigma(value);
        return this;
    }

    @Override
    public DQstoreRecord value13(String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public DQstoreRecord value14(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public DQstoreRecord value15(String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public DQstoreRecord value16(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public DQstoreRecord value17(String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public DQstoreRecord value18(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    @Override
    public DQstoreRecord value19(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public DQstoreRecord values(String value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, Integer value9, String value10, String value11, String value12, String value13, Boolean value14, String value15, LocalDateTime value16, String value17, LocalDateTime value18, String value19) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        value19(value19);
        return this;
    }

    @Override
    public void from(IDQstore from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setType(from.getType());
        setStatus(from.getStatus());
        setCategory(from.getCategory());
        setName(from.getName());
        setBrief(from.getBrief());
        setVersion(from.getVersion());
        setQuestions(from.getQuestions());
        setModelId(from.getModelId());
        setModelKey(from.getModelKey());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IDQstore> E into(E into) {
        into.from(this);
        return into;
    }
}
