/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.records;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.documentation.domain.tables.DPaper;
import io.zerows.extension.commerce.documentation.domain.tables.interfaces.IDPaper;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DPaperRecord extends UpdatableRecordImpl<DPaperRecord> implements VertxPojo, IDPaper {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached DPaperRecord
     */
    public DPaperRecord() {
        super(DPaper.D_PAPER);
    }

    /**
     * Create a detached, initialised DPaperRecord
     */
    public DPaperRecord(String key, String code, String name, String type, String status, String brief, String version, Boolean simulate, BigDecimal score, String uiCover, String uiBg, String uiConfig, String uiComponent, String examId, String modelId, String modelKey, Boolean copy, String copyTo, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(DPaper.D_PAPER);

        setKey(key);
        setCode(code);
        setName(name);
        setType(type);
        setStatus(status);
        setBrief(brief);
        setVersion(version);
        setSimulate(simulate);
        setScore(score);
        setUiCover(uiCover);
        setUiBg(uiBg);
        setUiConfig(uiConfig);
        setUiComponent(uiComponent);
        setExamId(examId);
        setModelId(modelId);
        setModelKey(modelKey);
        setCopy(copy);
        setCopyTo(copyTo);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DPaperRecord
     */
    public DPaperRecord(io.zerows.extension.commerce.documentation.domain.tables.pojos.DPaper value) {
        super(DPaper.D_PAPER);

        if (value != null) {
            setKey(value.getKey());
            setCode(value.getCode());
            setName(value.getName());
            setType(value.getType());
            setStatus(value.getStatus());
            setBrief(value.getBrief());
            setVersion(value.getVersion());
            setSimulate(value.getSimulate());
            setScore(value.getScore());
            setUiCover(value.getUiCover());
            setUiBg(value.getUiBg());
            setUiConfig(value.getUiConfig());
            setUiComponent(value.getUiComponent());
            setExamId(value.getExamId());
            setModelId(value.getModelId());
            setModelKey(value.getModelKey());
            setCopy(value.getCopy());
            setCopyTo(value.getCopyTo());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            resetChangedOnNotNull();
        }
    }

    public DPaperRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.D_PAPER.KEY</code>. 「key」- 问卷主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.KEY</code>. 「key」- 问卷主键
     */
    @Override
    public DPaperRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.CODE</code>. 「code」- 问卷编号
     */
    @Override
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.CODE</code>. 「code」- 问卷编号
     */
    @Override
    public DPaperRecord setCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.NAME</code>. 「name」- 问卷标题
     */
    @Override
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.NAME</code>. 「name」- 问卷标题
     */
    @Override
    public DPaperRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.TYPE</code>. 「type」- 问卷类型
     */
    @Override
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.TYPE</code>. 「type」- 问卷类型
     */
    @Override
    public DPaperRecord setType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.STATUS</code>. 「status」- 状态
     */
    @Override
    public String getStatus() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.STATUS</code>. 「status」- 状态
     */
    @Override
    public DPaperRecord setStatus(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.BRIEF</code>. 「brief」- 问卷简介
     */
    @Override
    public String getBrief() {
        return (String) get(5);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.BRIEF</code>. 「brief」- 问卷简介
     */
    @Override
    public DPaperRecord setBrief(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.VERSION</code>. 「version」- 问卷版本, N.N
     */
    @Override
    public String getVersion() {
        return (String) get(6);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.VERSION</code>. 「version」- 问卷版本, N.N
     */
    @Override
    public DPaperRecord setVersion(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.SIMULATE</code>. 「simulate」- 是否模拟卷
     */
    @Override
    public Boolean getSimulate() {
        return (Boolean) get(7);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.SIMULATE</code>. 「simulate」- 是否模拟卷
     */
    @Override
    public DPaperRecord setSimulate(Boolean value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.SCORE</code>. 「score」- 当前考卷总体分数
     */
    @Override
    public BigDecimal getScore() {
        return (BigDecimal) get(8);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.SCORE</code>. 「score」- 当前考卷总体分数
     */
    @Override
    public DPaperRecord setScore(BigDecimal value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.UI_COVER</code>. 「uiCover」- 封面图片
     */
    @Override
    public String getUiCover() {
        return (String) get(9);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.UI_COVER</code>. 「uiCover」- 封面图片
     */
    @Override
    public DPaperRecord setUiCover(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.UI_BG</code>. 「uiBg」- 问卷背景图
     */
    @Override
    public String getUiBg() {
        return (String) get(10);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.UI_BG</code>. 「uiBg」- 问卷背景图
     */
    @Override
    public DPaperRecord setUiBg(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.UI_CONFIG</code>. 「uiConfig」- 问卷配置
     */
    @Override
    public String getUiConfig() {
        return (String) get(11);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.UI_CONFIG</code>. 「uiConfig」- 问卷配置
     */
    @Override
    public DPaperRecord setUiConfig(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.UI_COMPONENT</code>. 「uiComponent」-
     * 问卷呈现专用配置（扩展用）
     */
    @Override
    public String getUiComponent() {
        return (String) get(12);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.UI_COMPONENT</code>. 「uiComponent」-
     * 问卷呈现专用配置（扩展用）
     */
    @Override
    public DPaperRecord setUiComponent(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.EXAM_ID</code>. 「examId」- 关联的考试ID
     */
    @Override
    public String getExamId() {
        return (String) get(13);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.EXAM_ID</code>. 「examId」- 关联的考试ID
     */
    @Override
    public DPaperRecord setExamId(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public String getModelId() {
        return (String) get(14);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public DPaperRecord setModelId(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public String getModelKey() {
        return (String) get(15);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public DPaperRecord setModelKey(String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.COPY</code>. 「copy」- 是否副本
     */
    @Override
    public Boolean getCopy() {
        return (Boolean) get(16);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.COPY</code>. 「copy」- 是否副本
     */
    @Override
    public DPaperRecord setCopy(Boolean value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.COPY_TO</code>. 「copy」- 若是副本，则标注是哪份文档的副本
     */
    @Override
    public String getCopyTo() {
        return (String) get(17);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.COPY_TO</code>. 「copy」- 若是副本，则标注是哪份文档的副本
     */
    @Override
    public DPaperRecord setCopyTo(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(18);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public DPaperRecord setSigma(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(19);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public DPaperRecord setLanguage(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(20);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public DPaperRecord setActive(Boolean value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(21);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public DPaperRecord setMetadata(String value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(22);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public DPaperRecord setCreatedAt(LocalDateTime value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(23);
    }

    /**
     * Setter for <code>ZDB.D_PAPER.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public DPaperRecord setCreatedBy(String value) {
        set(23, value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>ZDB.D_PAPER.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(24);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.D_PAPER.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public DPaperRecord setUpdatedAt(LocalDateTime value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(25);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.D_PAPER.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public DPaperRecord setUpdatedBy(String value) {
        set(25, value);
        return this;
    }

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    @Override
    public void from(IDPaper from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setName(from.getName());
        setType(from.getType());
        setStatus(from.getStatus());
        setBrief(from.getBrief());
        setVersion(from.getVersion());
        setSimulate(from.getSimulate());
        setScore(from.getScore());
        setUiCover(from.getUiCover());
        setUiBg(from.getUiBg());
        setUiConfig(from.getUiConfig());
        setUiComponent(from.getUiComponent());
        setExamId(from.getExamId());
        setModelId(from.getModelId());
        setModelKey(from.getModelKey());
        setCopy(from.getCopy());
        setCopyTo(from.getCopyTo());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IDPaper> E into(E into) {
        into.from(this);
        return into;
    }
}
