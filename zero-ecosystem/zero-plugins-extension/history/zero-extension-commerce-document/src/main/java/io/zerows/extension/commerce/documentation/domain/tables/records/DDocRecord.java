/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.records;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.documentation.domain.tables.DDoc;
import io.zerows.extension.commerce.documentation.domain.tables.interfaces.IDDoc;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DDocRecord extends UpdatableRecordImpl<DDocRecord> implements VertxPojo, IDDoc {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached DDocRecord
     */
    public DDocRecord() {
        super(DDoc.D_DOC);
    }

    /**
     * Create a detached, initialised DDocRecord
     */
    public DDocRecord(String key, String code, String status, String type, String category, String name, String sn, String prefix, String brief, String description, String scope, String version, String author, String authorOr, String publisher, LocalDateTime publishAt, String modelId, String modelKey, Boolean copy, String copyTo, String fileName, String fileKey, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(DDoc.D_DOC);

        setKey(key);
        setCode(code);
        setStatus(status);
        setType(type);
        setCategory(category);
        setName(name);
        setSn(sn);
        setPrefix(prefix);
        setBrief(brief);
        setDescription(description);
        setScope(scope);
        setVersion(version);
        setAuthor(author);
        setAuthorOr(authorOr);
        setPublisher(publisher);
        setPublishAt(publishAt);
        setModelId(modelId);
        setModelKey(modelKey);
        setCopy(copy);
        setCopyTo(copyTo);
        setFileName(fileName);
        setFileKey(fileKey);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DDocRecord
     */
    public DDocRecord(io.zerows.extension.commerce.documentation.domain.tables.pojos.DDoc value) {
        super(DDoc.D_DOC);

        if (value != null) {
            setKey(value.getKey());
            setCode(value.getCode());
            setStatus(value.getStatus());
            setType(value.getType());
            setCategory(value.getCategory());
            setName(value.getName());
            setSn(value.getSn());
            setPrefix(value.getPrefix());
            setBrief(value.getBrief());
            setDescription(value.getDescription());
            setScope(value.getScope());
            setVersion(value.getVersion());
            setAuthor(value.getAuthor());
            setAuthorOr(value.getAuthorOr());
            setPublisher(value.getPublisher());
            setPublishAt(value.getPublishAt());
            setModelId(value.getModelId());
            setModelKey(value.getModelKey());
            setCopy(value.getCopy());
            setCopyTo(value.getCopyTo());
            setFileName(value.getFileName());
            setFileKey(value.getFileKey());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            resetChangedOnNotNull();
        }
    }

    public DDocRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.D_DOC.KEY</code>. 「key」- 文档主键，唯一标识
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.D_DOC.KEY</code>. 「key」- 文档主键，唯一标识
     */
    @Override
    public DDocRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.CODE</code>. 「code」- 文档系统编号
     */
    @Override
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.D_DOC.CODE</code>. 「code」- 文档系统编号
     */
    @Override
    public DDocRecord setCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.STATUS</code>. 「status」- 状态
     */
    @Override
    public String getStatus() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.D_DOC.STATUS</code>. 「status」- 状态
     */
    @Override
    public DDocRecord setStatus(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.TYPE</code>. 「type」- 文档类型，用于指定子表信息
     */
    @Override
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.D_DOC.TYPE</code>. 「type」- 文档类型，用于指定子表信息
     */
    @Override
    public DDocRecord setType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.CATEGORY</code>. 「category」- 文档类别, 关联对应的分类
     */
    @Override
    public String getCategory() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.D_DOC.CATEGORY</code>. 「category」- 文档类别, 关联对应的分类
     */
    @Override
    public DDocRecord setCategory(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.NAME</code>. 「name」- 文档名称
     */
    @Override
    public String getName() {
        return (String) get(5);
    }

    /**
     * Setter for <code>ZDB.D_DOC.NAME</code>. 「name」- 文档名称
     */
    @Override
    public DDocRecord setName(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.SN</code>. 「sn」- 文档编号
     */
    @Override
    public String getSn() {
        return (String) get(6);
    }

    /**
     * Setter for <code>ZDB.D_DOC.SN</code>. 「sn」- 文档编号
     */
    @Override
    public DDocRecord setSn(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.PREFIX</code>. 「prefix」- 文档前缀
     */
    @Override
    public String getPrefix() {
        return (String) get(7);
    }

    /**
     * Setter for <code>ZDB.D_DOC.PREFIX</code>. 「prefix」- 文档前缀
     */
    @Override
    public DDocRecord setPrefix(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.BRIEF</code>. 「brief」- 文档简介
     */
    @Override
    public String getBrief() {
        return (String) get(8);
    }

    /**
     * Setter for <code>ZDB.D_DOC.BRIEF</code>. 「brief」- 文档简介
     */
    @Override
    public DDocRecord setBrief(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.DESCRIPTION</code>. 「description」- 文档描述
     */
    @Override
    public String getDescription() {
        return (String) get(9);
    }

    /**
     * Setter for <code>ZDB.D_DOC.DESCRIPTION</code>. 「description」- 文档描述
     */
    @Override
    public DDocRecord setDescription(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.SCOPE</code>. 「scope」- 作用范围描述
     */
    @Override
    public String getScope() {
        return (String) get(10);
    }

    /**
     * Setter for <code>ZDB.D_DOC.SCOPE</code>. 「scope」- 作用范围描述
     */
    @Override
    public DDocRecord setScope(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.VERSION</code>. 「version」- 文档版本, N.N
     */
    @Override
    public String getVersion() {
        return (String) get(11);
    }

    /**
     * Setter for <code>ZDB.D_DOC.VERSION</code>. 「version」- 文档版本, N.N
     */
    @Override
    public DDocRecord setVersion(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.AUTHOR</code>. 「author」- 文档作者
     */
    @Override
    public String getAuthor() {
        return (String) get(12);
    }

    /**
     * Setter for <code>ZDB.D_DOC.AUTHOR</code>. 「author」- 文档作者
     */
    @Override
    public DDocRecord setAuthor(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.AUTHOR_OR</code>. 「authorOr」- 第二作者、第三作者
     */
    @Override
    public String getAuthorOr() {
        return (String) get(13);
    }

    /**
     * Setter for <code>ZDB.D_DOC.AUTHOR_OR</code>. 「authorOr」- 第二作者、第三作者
     */
    @Override
    public DDocRecord setAuthorOr(String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.PUBLISHER</code>. 「publisher」- 发布者信息
     */
    @Override
    public String getPublisher() {
        return (String) get(14);
    }

    /**
     * Setter for <code>ZDB.D_DOC.PUBLISHER</code>. 「publisher」- 发布者信息
     */
    @Override
    public DDocRecord setPublisher(String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.PUBLISH_AT</code>. 「publishAt」- 发布时间或日期
     */
    @Override
    public LocalDateTime getPublishAt() {
        return (LocalDateTime) get(15);
    }

    /**
     * Setter for <code>ZDB.D_DOC.PUBLISH_AT</code>. 「publishAt」- 发布时间或日期
     */
    @Override
    public DDocRecord setPublishAt(LocalDateTime value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public String getModelId() {
        return (String) get(16);
    }

    /**
     * Setter for <code>ZDB.D_DOC.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public DDocRecord setModelId(String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public String getModelKey() {
        return (String) get(17);
    }

    /**
     * Setter for <code>ZDB.D_DOC.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public DDocRecord setModelKey(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.COPY</code>. 「copy」- 是否副本
     */
    @Override
    public Boolean getCopy() {
        return (Boolean) get(18);
    }

    /**
     * Setter for <code>ZDB.D_DOC.COPY</code>. 「copy」- 是否副本
     */
    @Override
    public DDocRecord setCopy(Boolean value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.COPY_TO</code>. 「copy」- 若是副本，则标注是哪份文档的副本
     */
    @Override
    public String getCopyTo() {
        return (String) get(19);
    }

    /**
     * Setter for <code>ZDB.D_DOC.COPY_TO</code>. 「copy」- 若是副本，则标注是哪份文档的副本
     */
    @Override
    public DDocRecord setCopyTo(String value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.FILE_NAME</code>. 「fileName」- 原始文件名，带扩展名
     */
    @Override
    public String getFileName() {
        return (String) get(20);
    }

    /**
     * Setter for <code>ZDB.D_DOC.FILE_NAME</code>. 「fileName」- 原始文件名，带扩展名
     */
    @Override
    public DDocRecord setFileName(String value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.FILE_KEY</code>. 「fileKey」-
     * TPL模式中的文件唯一的key（全局唯一）
     */
    @Override
    public String getFileKey() {
        return (String) get(21);
    }

    /**
     * Setter for <code>ZDB.D_DOC.FILE_KEY</code>. 「fileKey」-
     * TPL模式中的文件唯一的key（全局唯一）
     */
    @Override
    public DDocRecord setFileKey(String value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(22);
    }

    /**
     * Setter for <code>ZDB.D_DOC.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public DDocRecord setSigma(String value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(23);
    }

    /**
     * Setter for <code>ZDB.D_DOC.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public DDocRecord setLanguage(String value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(24);
    }

    /**
     * Setter for <code>ZDB.D_DOC.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public DDocRecord setActive(Boolean value) {
        set(24, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(25);
    }

    /**
     * Setter for <code>ZDB.D_DOC.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public DDocRecord setMetadata(String value) {
        set(25, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(26);
    }

    /**
     * Setter for <code>ZDB.D_DOC.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public DDocRecord setCreatedAt(LocalDateTime value) {
        set(26, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(27);
    }

    /**
     * Setter for <code>ZDB.D_DOC.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public DDocRecord setCreatedBy(String value) {
        set(27, value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>ZDB.D_DOC.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(28);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.D_DOC.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public DDocRecord setUpdatedAt(LocalDateTime value) {
        set(28, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(29);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.D_DOC.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public DDocRecord setUpdatedBy(String value) {
        set(29, value);
        return this;
    }

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    @Override
    public void from(IDDoc from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setStatus(from.getStatus());
        setType(from.getType());
        setCategory(from.getCategory());
        setName(from.getName());
        setSn(from.getSn());
        setPrefix(from.getPrefix());
        setBrief(from.getBrief());
        setDescription(from.getDescription());
        setScope(from.getScope());
        setVersion(from.getVersion());
        setAuthor(from.getAuthor());
        setAuthorOr(from.getAuthorOr());
        setPublisher(from.getPublisher());
        setPublishAt(from.getPublishAt());
        setModelId(from.getModelId());
        setModelKey(from.getModelKey());
        setCopy(from.getCopy());
        setCopyTo(from.getCopyTo());
        setFileName(from.getFileName());
        setFileKey(from.getFileKey());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IDDoc> E into(E into) {
        into.from(this);
        return into;
    }
}
