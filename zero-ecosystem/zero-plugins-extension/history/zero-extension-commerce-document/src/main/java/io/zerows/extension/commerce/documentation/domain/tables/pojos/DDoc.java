/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.pojos;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.documentation.domain.tables.interfaces.IDDoc;

import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DDoc implements VertxPojo, IDDoc {

    private static final long serialVersionUID = 1L;

    private String key;
    private String code;
    private String status;
    private String type;
    private String category;
    private String name;
    private String sn;
    private String prefix;
    private String brief;
    private String description;
    private String scope;
    private String version;
    private String author;
    private String authorOr;
    private String publisher;
    private LocalDateTime publishAt;
    private String modelId;
    private String modelKey;
    private Boolean copy;
    private String copyTo;
    private String fileName;
    private String fileKey;
    private String sigma;
    private String language;
    private Boolean active;
    private String metadata;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public DDoc() {
    }

    public DDoc(IDDoc value) {
        this.key = value.getKey();
        this.code = value.getCode();
        this.status = value.getStatus();
        this.type = value.getType();
        this.category = value.getCategory();
        this.name = value.getName();
        this.sn = value.getSn();
        this.prefix = value.getPrefix();
        this.brief = value.getBrief();
        this.description = value.getDescription();
        this.scope = value.getScope();
        this.version = value.getVersion();
        this.author = value.getAuthor();
        this.authorOr = value.getAuthorOr();
        this.publisher = value.getPublisher();
        this.publishAt = value.getPublishAt();
        this.modelId = value.getModelId();
        this.modelKey = value.getModelKey();
        this.copy = value.getCopy();
        this.copyTo = value.getCopyTo();
        this.fileName = value.getFileName();
        this.fileKey = value.getFileKey();
        this.sigma = value.getSigma();
        this.language = value.getLanguage();
        this.active = value.getActive();
        this.metadata = value.getMetadata();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public DDoc(
        String key,
        String code,
        String status,
        String type,
        String category,
        String name,
        String sn,
        String prefix,
        String brief,
        String description,
        String scope,
        String version,
        String author,
        String authorOr,
        String publisher,
        LocalDateTime publishAt,
        String modelId,
        String modelKey,
        Boolean copy,
        String copyTo,
        String fileName,
        String fileKey,
        String sigma,
        String language,
        Boolean active,
        String metadata,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.code = code;
        this.status = status;
        this.type = type;
        this.category = category;
        this.name = name;
        this.sn = sn;
        this.prefix = prefix;
        this.brief = brief;
        this.description = description;
        this.scope = scope;
        this.version = version;
        this.author = author;
        this.authorOr = authorOr;
        this.publisher = publisher;
        this.publishAt = publishAt;
        this.modelId = modelId;
        this.modelKey = modelKey;
        this.copy = copy;
        this.copyTo = copyTo;
        this.fileName = fileName;
        this.fileKey = fileKey;
        this.sigma = sigma;
        this.language = language;
        this.active = active;
        this.metadata = metadata;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

    public DDoc(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.D_DOC.KEY</code>. 「key」- 文档主键，唯一标识
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>ZDB.D_DOC.KEY</code>. 「key」- 文档主键，唯一标识
     */
    @Override
    public DDoc setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.CODE</code>. 「code」- 文档系统编号
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>ZDB.D_DOC.CODE</code>. 「code」- 文档系统编号
     */
    @Override
    public DDoc setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.STATUS</code>. 「status」- 状态
     */
    @Override
    public String getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>ZDB.D_DOC.STATUS</code>. 「status」- 状态
     */
    @Override
    public DDoc setStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.TYPE</code>. 「type」- 文档类型，用于指定子表信息
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>ZDB.D_DOC.TYPE</code>. 「type」- 文档类型，用于指定子表信息
     */
    @Override
    public DDoc setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.CATEGORY</code>. 「category」- 文档类别, 关联对应的分类
     */
    @Override
    public String getCategory() {
        return this.category;
    }

    /**
     * Setter for <code>ZDB.D_DOC.CATEGORY</code>. 「category」- 文档类别, 关联对应的分类
     */
    @Override
    public DDoc setCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.NAME</code>. 「name」- 文档名称
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>ZDB.D_DOC.NAME</code>. 「name」- 文档名称
     */
    @Override
    public DDoc setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.SN</code>. 「sn」- 文档编号
     */
    @Override
    public String getSn() {
        return this.sn;
    }

    /**
     * Setter for <code>ZDB.D_DOC.SN</code>. 「sn」- 文档编号
     */
    @Override
    public DDoc setSn(String sn) {
        this.sn = sn;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.PREFIX</code>. 「prefix」- 文档前缀
     */
    @Override
    public String getPrefix() {
        return this.prefix;
    }

    /**
     * Setter for <code>ZDB.D_DOC.PREFIX</code>. 「prefix」- 文档前缀
     */
    @Override
    public DDoc setPrefix(String prefix) {
        this.prefix = prefix;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.BRIEF</code>. 「brief」- 文档简介
     */
    @Override
    public String getBrief() {
        return this.brief;
    }

    /**
     * Setter for <code>ZDB.D_DOC.BRIEF</code>. 「brief」- 文档简介
     */
    @Override
    public DDoc setBrief(String brief) {
        this.brief = brief;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.DESCRIPTION</code>. 「description」- 文档描述
     */
    @Override
    public String getDescription() {
        return this.description;
    }

    /**
     * Setter for <code>ZDB.D_DOC.DESCRIPTION</code>. 「description」- 文档描述
     */
    @Override
    public DDoc setDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.SCOPE</code>. 「scope」- 作用范围描述
     */
    @Override
    public String getScope() {
        return this.scope;
    }

    /**
     * Setter for <code>ZDB.D_DOC.SCOPE</code>. 「scope」- 作用范围描述
     */
    @Override
    public DDoc setScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.VERSION</code>. 「version」- 文档版本, N.N
     */
    @Override
    public String getVersion() {
        return this.version;
    }

    /**
     * Setter for <code>ZDB.D_DOC.VERSION</code>. 「version」- 文档版本, N.N
     */
    @Override
    public DDoc setVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.AUTHOR</code>. 「author」- 文档作者
     */
    @Override
    public String getAuthor() {
        return this.author;
    }

    /**
     * Setter for <code>ZDB.D_DOC.AUTHOR</code>. 「author」- 文档作者
     */
    @Override
    public DDoc setAuthor(String author) {
        this.author = author;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.AUTHOR_OR</code>. 「authorOr」- 第二作者、第三作者
     */
    @Override
    public String getAuthorOr() {
        return this.authorOr;
    }

    /**
     * Setter for <code>ZDB.D_DOC.AUTHOR_OR</code>. 「authorOr」- 第二作者、第三作者
     */
    @Override
    public DDoc setAuthorOr(String authorOr) {
        this.authorOr = authorOr;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.PUBLISHER</code>. 「publisher」- 发布者信息
     */
    @Override
    public String getPublisher() {
        return this.publisher;
    }

    /**
     * Setter for <code>ZDB.D_DOC.PUBLISHER</code>. 「publisher」- 发布者信息
     */
    @Override
    public DDoc setPublisher(String publisher) {
        this.publisher = publisher;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.PUBLISH_AT</code>. 「publishAt」- 发布时间或日期
     */
    @Override
    public LocalDateTime getPublishAt() {
        return this.publishAt;
    }

    /**
     * Setter for <code>ZDB.D_DOC.PUBLISH_AT</code>. 「publishAt」- 发布时间或日期
     */
    @Override
    public DDoc setPublishAt(LocalDateTime publishAt) {
        this.publishAt = publishAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public String getModelId() {
        return this.modelId;
    }

    /**
     * Setter for <code>ZDB.D_DOC.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public DDoc setModelId(String modelId) {
        this.modelId = modelId;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public String getModelKey() {
        return this.modelKey;
    }

    /**
     * Setter for <code>ZDB.D_DOC.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public DDoc setModelKey(String modelKey) {
        this.modelKey = modelKey;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.COPY</code>. 「copy」- 是否副本
     */
    @Override
    public Boolean getCopy() {
        return this.copy;
    }

    /**
     * Setter for <code>ZDB.D_DOC.COPY</code>. 「copy」- 是否副本
     */
    @Override
    public DDoc setCopy(Boolean copy) {
        this.copy = copy;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.COPY_TO</code>. 「copy」- 若是副本，则标注是哪份文档的副本
     */
    @Override
    public String getCopyTo() {
        return this.copyTo;
    }

    /**
     * Setter for <code>ZDB.D_DOC.COPY_TO</code>. 「copy」- 若是副本，则标注是哪份文档的副本
     */
    @Override
    public DDoc setCopyTo(String copyTo) {
        this.copyTo = copyTo;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.FILE_NAME</code>. 「fileName」- 原始文件名，带扩展名
     */
    @Override
    public String getFileName() {
        return this.fileName;
    }

    /**
     * Setter for <code>ZDB.D_DOC.FILE_NAME</code>. 「fileName」- 原始文件名，带扩展名
     */
    @Override
    public DDoc setFileName(String fileName) {
        this.fileName = fileName;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.FILE_KEY</code>. 「fileKey」-
     * TPL模式中的文件唯一的key（全局唯一）
     */
    @Override
    public String getFileKey() {
        return this.fileKey;
    }

    /**
     * Setter for <code>ZDB.D_DOC.FILE_KEY</code>. 「fileKey」-
     * TPL模式中的文件唯一的key（全局唯一）
     */
    @Override
    public DDoc setFileKey(String fileKey) {
        this.fileKey = fileKey;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>ZDB.D_DOC.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public DDoc setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>ZDB.D_DOC.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public DDoc setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>ZDB.D_DOC.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public DDoc setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>ZDB.D_DOC.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public DDoc setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>ZDB.D_DOC.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public DDoc setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>ZDB.D_DOC.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public DDoc setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>ZDB.D_DOC.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public DDoc setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_DOC.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>ZDB.D_DOC.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public DDoc setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final DDoc other = (DDoc) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        } else if (!this.key.equals(other.key))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        } else if (!this.code.equals(other.code))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        } else if (!this.status.equals(other.status))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        } else if (!this.type.equals(other.type))
            return false;
        if (this.category == null) {
            if (other.category != null)
                return false;
        } else if (!this.category.equals(other.category))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        } else if (!this.name.equals(other.name))
            return false;
        if (this.sn == null) {
            if (other.sn != null)
                return false;
        } else if (!this.sn.equals(other.sn))
            return false;
        if (this.prefix == null) {
            if (other.prefix != null)
                return false;
        } else if (!this.prefix.equals(other.prefix))
            return false;
        if (this.brief == null) {
            if (other.brief != null)
                return false;
        } else if (!this.brief.equals(other.brief))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        } else if (!this.description.equals(other.description))
            return false;
        if (this.scope == null) {
            if (other.scope != null)
                return false;
        } else if (!this.scope.equals(other.scope))
            return false;
        if (this.version == null) {
            if (other.version != null)
                return false;
        } else if (!this.version.equals(other.version))
            return false;
        if (this.author == null) {
            if (other.author != null)
                return false;
        } else if (!this.author.equals(other.author))
            return false;
        if (this.authorOr == null) {
            if (other.authorOr != null)
                return false;
        } else if (!this.authorOr.equals(other.authorOr))
            return false;
        if (this.publisher == null) {
            if (other.publisher != null)
                return false;
        } else if (!this.publisher.equals(other.publisher))
            return false;
        if (this.publishAt == null) {
            if (other.publishAt != null)
                return false;
        } else if (!this.publishAt.equals(other.publishAt))
            return false;
        if (this.modelId == null) {
            if (other.modelId != null)
                return false;
        } else if (!this.modelId.equals(other.modelId))
            return false;
        if (this.modelKey == null) {
            if (other.modelKey != null)
                return false;
        } else if (!this.modelKey.equals(other.modelKey))
            return false;
        if (this.copy == null) {
            if (other.copy != null)
                return false;
        } else if (!this.copy.equals(other.copy))
            return false;
        if (this.copyTo == null) {
            if (other.copyTo != null)
                return false;
        } else if (!this.copyTo.equals(other.copyTo))
            return false;
        if (this.fileName == null) {
            if (other.fileName != null)
                return false;
        } else if (!this.fileName.equals(other.fileName))
            return false;
        if (this.fileKey == null) {
            if (other.fileKey != null)
                return false;
        } else if (!this.fileKey.equals(other.fileKey))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        } else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        } else if (!this.language.equals(other.language))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        } else if (!this.active.equals(other.active))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        } else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        } else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        } else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        } else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        } else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.category == null) ? 0 : this.category.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.sn == null) ? 0 : this.sn.hashCode());
        result = prime * result + ((this.prefix == null) ? 0 : this.prefix.hashCode());
        result = prime * result + ((this.brief == null) ? 0 : this.brief.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.scope == null) ? 0 : this.scope.hashCode());
        result = prime * result + ((this.version == null) ? 0 : this.version.hashCode());
        result = prime * result + ((this.author == null) ? 0 : this.author.hashCode());
        result = prime * result + ((this.authorOr == null) ? 0 : this.authorOr.hashCode());
        result = prime * result + ((this.publisher == null) ? 0 : this.publisher.hashCode());
        result = prime * result + ((this.publishAt == null) ? 0 : this.publishAt.hashCode());
        result = prime * result + ((this.modelId == null) ? 0 : this.modelId.hashCode());
        result = prime * result + ((this.modelKey == null) ? 0 : this.modelKey.hashCode());
        result = prime * result + ((this.copy == null) ? 0 : this.copy.hashCode());
        result = prime * result + ((this.copyTo == null) ? 0 : this.copyTo.hashCode());
        result = prime * result + ((this.fileName == null) ? 0 : this.fileName.hashCode());
        result = prime * result + ((this.fileKey == null) ? 0 : this.fileKey.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DDoc (");

        sb.append(key);
        sb.append(", ").append(code);
        sb.append(", ").append(status);
        sb.append(", ").append(type);
        sb.append(", ").append(category);
        sb.append(", ").append(name);
        sb.append(", ").append(sn);
        sb.append(", ").append(prefix);
        sb.append(", ").append(brief);
        sb.append(", ").append(description);
        sb.append(", ").append(scope);
        sb.append(", ").append(version);
        sb.append(", ").append(author);
        sb.append(", ").append(authorOr);
        sb.append(", ").append(publisher);
        sb.append(", ").append(publishAt);
        sb.append(", ").append(modelId);
        sb.append(", ").append(modelKey);
        sb.append(", ").append(copy);
        sb.append(", ").append(copyTo);
        sb.append(", ").append(fileName);
        sb.append(", ").append(fileKey);
        sb.append(", ").append(sigma);
        sb.append(", ").append(language);
        sb.append(", ").append(active);
        sb.append(", ").append(metadata);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDDoc from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setStatus(from.getStatus());
        setType(from.getType());
        setCategory(from.getCategory());
        setName(from.getName());
        setSn(from.getSn());
        setPrefix(from.getPrefix());
        setBrief(from.getBrief());
        setDescription(from.getDescription());
        setScope(from.getScope());
        setVersion(from.getVersion());
        setAuthor(from.getAuthor());
        setAuthorOr(from.getAuthorOr());
        setPublisher(from.getPublisher());
        setPublishAt(from.getPublishAt());
        setModelId(from.getModelId());
        setModelKey(from.getModelKey());
        setCopy(from.getCopy());
        setCopyTo(from.getCopyTo());
        setFileName(from.getFileName());
        setFileKey(from.getFileKey());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IDDoc> E into(E into) {
        into.from(this);
        return into;
    }
}
