/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.pojos;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.documentation.domain.tables.interfaces.IDPaperRef;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DPaperRef implements VertxPojo, IDPaperRef {

    private static final long serialVersionUID = 1L;

    private String paperId;
    private String questionId;
    private Integer sort;
    private Boolean required;
    private String ruleComponent;

    public DPaperRef() {
    }

    public DPaperRef(IDPaperRef value) {
        this.paperId = value.getPaperId();
        this.questionId = value.getQuestionId();
        this.sort = value.getSort();
        this.required = value.getRequired();
        this.ruleComponent = value.getRuleComponent();
    }

    public DPaperRef(
        String paperId,
        String questionId,
        Integer sort,
        Boolean required,
        String ruleComponent
    ) {
        this.paperId = paperId;
        this.questionId = questionId;
        this.sort = sort;
        this.required = required;
        this.ruleComponent = ruleComponent;
    }

    public DPaperRef(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.D_PAPER_REF.PAPER_ID</code>. 「paperId」- 考卷ID
     */
    @Override
    public String getPaperId() {
        return this.paperId;
    }

    /**
     * Setter for <code>ZDB.D_PAPER_REF.PAPER_ID</code>. 「paperId」- 考卷ID
     */
    @Override
    public DPaperRef setPaperId(String paperId) {
        this.paperId = paperId;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER_REF.QUESTION_ID</code>. 「questionId」- 问题ID
     */
    @Override
    public String getQuestionId() {
        return this.questionId;
    }

    /**
     * Setter for <code>ZDB.D_PAPER_REF.QUESTION_ID</code>. 「questionId」- 问题ID
     */
    @Override
    public DPaperRef setQuestionId(String questionId) {
        this.questionId = questionId;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER_REF.SORT</code>. 「sort」- 问题排序
     */
    @Override
    public Integer getSort() {
        return this.sort;
    }

    /**
     * Setter for <code>ZDB.D_PAPER_REF.SORT</code>. 「sort」- 问题排序
     */
    @Override
    public DPaperRef setSort(Integer sort) {
        this.sort = sort;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER_REF.REQUIRED</code>. 「required」- 必答题
     */
    @Override
    public Boolean getRequired() {
        return this.required;
    }

    /**
     * Setter for <code>ZDB.D_PAPER_REF.REQUIRED</code>. 「required」- 必答题
     */
    @Override
    public DPaperRef setRequired(Boolean required) {
        this.required = required;
        return this;
    }

    /**
     * Getter for <code>ZDB.D_PAPER_REF.RULE_COMPONENT</code>. 「ruleComponent」-
     * 关联执行组件（扩展用）
     */
    @Override
    public String getRuleComponent() {
        return this.ruleComponent;
    }

    /**
     * Setter for <code>ZDB.D_PAPER_REF.RULE_COMPONENT</code>. 「ruleComponent」-
     * 关联执行组件（扩展用）
     */
    @Override
    public DPaperRef setRuleComponent(String ruleComponent) {
        this.ruleComponent = ruleComponent;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final DPaperRef other = (DPaperRef) obj;
        if (this.paperId == null) {
            if (other.paperId != null)
                return false;
        } else if (!this.paperId.equals(other.paperId))
            return false;
        if (this.questionId == null) {
            if (other.questionId != null)
                return false;
        } else if (!this.questionId.equals(other.questionId))
            return false;
        if (this.sort == null) {
            if (other.sort != null)
                return false;
        } else if (!this.sort.equals(other.sort))
            return false;
        if (this.required == null) {
            if (other.required != null)
                return false;
        } else if (!this.required.equals(other.required))
            return false;
        if (this.ruleComponent == null) {
            if (other.ruleComponent != null)
                return false;
        } else if (!this.ruleComponent.equals(other.ruleComponent))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.paperId == null) ? 0 : this.paperId.hashCode());
        result = prime * result + ((this.questionId == null) ? 0 : this.questionId.hashCode());
        result = prime * result + ((this.sort == null) ? 0 : this.sort.hashCode());
        result = prime * result + ((this.required == null) ? 0 : this.required.hashCode());
        result = prime * result + ((this.ruleComponent == null) ? 0 : this.ruleComponent.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("DPaperRef (");

        sb.append(paperId);
        sb.append(", ").append(questionId);
        sb.append(", ").append(sort);
        sb.append(", ").append(required);
        sb.append(", ").append(ruleComponent);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDPaperRef from) {
        setPaperId(from.getPaperId());
        setQuestionId(from.getQuestionId());
        setSort(from.getSort());
        setRequired(from.getRequired());
        setRuleComponent(from.getRuleComponent());
    }

    @Override
    public <E extends IDPaperRef> E into(E into) {
        into.from(this);
        return into;
    }
}
