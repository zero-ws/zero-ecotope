/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;

import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.setOrThrow;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public interface IDReplyItem extends VertxPojo, Serializable {

    /**
     * Getter for <code>ZDB.D_REPLY_ITEM.REPLY_ID</code>. 「replyId」- 答题卡ID
     */
    public String getReplyId();

    /**
     * Setter for <code>ZDB.D_REPLY_ITEM.REPLY_ID</code>. 「replyId」- 答题卡ID
     */
    public IDReplyItem setReplyId(String value);

    /**
     * Getter for <code>ZDB.D_REPLY_ITEM.QUESTION_CODE</code>. 「questionCode」-
     * 问题编号
     */
    public String getQuestionCode();

    /**
     * Setter for <code>ZDB.D_REPLY_ITEM.QUESTION_CODE</code>. 「questionCode」-
     * 问题编号
     */
    public IDReplyItem setQuestionCode(String value);

    /**
     * Getter for <code>ZDB.D_REPLY_ITEM.ANSWER_CONTENT</code>. 「answerContent」-
     * 答题内容
     */
    public String getAnswerContent();

    /**
     * Setter for <code>ZDB.D_REPLY_ITEM.ANSWER_CONTENT</code>. 「answerContent」-
     * 答题内容
     */
    public IDReplyItem setAnswerContent(String value);

    /**
     * Getter for <code>ZDB.D_REPLY_ITEM.ANSWER_FILES</code>. 「answerFiles」-
     * 答题文件
     */
    public String getAnswerFiles();

    /**
     * Setter for <code>ZDB.D_REPLY_ITEM.ANSWER_FILES</code>. 「answerFiles」-
     * 答题文件
     */
    public IDReplyItem setAnswerFiles(String value);

    /**
     * Getter for <code>ZDB.D_REPLY_ITEM.ANSWER_PROOF</code>. 「answerProof」-
     * 答题证明
     */
    public String getAnswerProof();

    /**
     * Setter for <code>ZDB.D_REPLY_ITEM.ANSWER_PROOF</code>. 「answerProof」-
     * 答题证明
     */
    public IDReplyItem setAnswerProof(String value);

    /**
     * Getter for <code>ZDB.D_REPLY_ITEM.SORT</code>. 「sort」- 问题排序
     */
    public Integer getSort();

    /**
     * Setter for <code>ZDB.D_REPLY_ITEM.SORT</code>. 「sort」- 问题排序
     */
    public IDReplyItem setSort(Integer value);

    /**
     * Getter for <code>ZDB.D_REPLY_ITEM.ANSWER_COMPONENT</code>.
     * 「answerComponent」- 关联执行组件（扩展用）
     */
    public String getAnswerComponent();

    /**
     * Setter for <code>ZDB.D_REPLY_ITEM.ANSWER_COMPONENT</code>.
     * 「answerComponent」- 关联执行组件（扩展用）
     */
    public IDReplyItem setAnswerComponent(String value);

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IDReplyItem
     */
    public void from(IDReplyItem from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IDReplyItem
     */
    public <E extends IDReplyItem> E into(E into);

    @Override
    public default IDReplyItem fromJson(io.vertx.core.json.JsonObject json) {
        setOrThrow(this::setReplyId, json::getString, "REPLY_ID", "java.lang.String");
        setOrThrow(this::setQuestionCode, json::getString, "QUESTION_CODE", "java.lang.String");
        setOrThrow(this::setAnswerContent, json::getString, "ANSWER_CONTENT", "java.lang.String");
        setOrThrow(this::setAnswerFiles, json::getString, "ANSWER_FILES", "java.lang.String");
        setOrThrow(this::setAnswerProof, json::getString, "ANSWER_PROOF", "java.lang.String");
        setOrThrow(this::setSort, json::getInteger, "SORT", "java.lang.Integer");
        setOrThrow(this::setAnswerComponent, json::getString, "ANSWER_COMPONENT", "java.lang.String");
        return this;
    }


    @Override
    public default io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("REPLY_ID", getReplyId());
        json.put("QUESTION_CODE", getQuestionCode());
        json.put("ANSWER_CONTENT", getAnswerContent());
        json.put("ANSWER_FILES", getAnswerFiles());
        json.put("ANSWER_PROOF", getAnswerProof());
        json.put("SORT", getSort());
        json.put("ANSWER_COMPONENT", getAnswerComponent());
        return json;
    }

}
