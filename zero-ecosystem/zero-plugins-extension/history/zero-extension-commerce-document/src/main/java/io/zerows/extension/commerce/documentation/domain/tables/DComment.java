/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables;


import io.zerows.extension.commerce.documentation.domain.Keys;
import io.zerows.extension.commerce.documentation.domain.Zdb;
import io.zerows.extension.commerce.documentation.domain.tables.records.DCommentRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DComment extends TableImpl<DCommentRecord> {

    /**
     * The reference instance of <code>ZDB.D_COMMENT</code>
     */
    public static final DComment D_COMMENT = new DComment();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>ZDB.D_COMMENT.KEY</code>. 「key」- 解读主键
     */
    public final TableField<DCommentRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 解读主键");
    /**
     * The column <code>ZDB.D_COMMENT.CODE</code>. 「code」- 备注编号
     */
    public final TableField<DCommentRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 备注编号");
    /**
     * The column <code>ZDB.D_COMMENT.NAME</code>. 「name」- 备注标题
     */
    public final TableField<DCommentRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 备注标题");
    /**
     * The column <code>ZDB.D_COMMENT.CONTENT</code>. 「content」- 备注内容、解读内容
     */
    public final TableField<DCommentRecord, String> CONTENT = createField(DSL.name("CONTENT"), SQLDataType.CLOB, this, "「content」- 备注内容、解读内容");
    /**
     * The column <code>ZDB.D_COMMENT.MADE_NAME</code>. 「madeName」- 备注人姓名
     */
    public final TableField<DCommentRecord, String> MADE_NAME = createField(DSL.name("MADE_NAME"), SQLDataType.VARCHAR(123), this, "「madeName」- 备注人姓名");
    /**
     * The column <code>ZDB.D_COMMENT.MADE_AT</code>. 「madeAt」- 备注时间
     */
    public final TableField<DCommentRecord, LocalDateTime> MADE_AT = createField(DSL.name("MADE_AT"), SQLDataType.LOCALDATETIME(0), this, "「madeAt」- 备注时间");
    /**
     * The column <code>ZDB.D_COMMENT.TYPE</code>. 「type」- 备注类型
     */
    public final TableField<DCommentRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(128), this, "「type」- 备注类型");
    /**
     * The column <code>ZDB.D_COMMENT.SORT</code>. 「sort」- 备注排序
     */
    public final TableField<DCommentRecord, Integer> SORT = createField(DSL.name("SORT"), SQLDataType.INTEGER, this, "「sort」- 备注排序");
    /**
     * The column <code>ZDB.D_COMMENT.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    public final TableField<DCommentRecord, String> MODEL_ID = createField(DSL.name("MODEL_ID"), SQLDataType.VARCHAR(255), this, "「modelId」- 关联的模型identifier，用于描述");
    /**
     * The column <code>ZDB.D_COMMENT.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public final TableField<DCommentRecord, String> MODEL_KEY = createField(DSL.name("MODEL_KEY"), SQLDataType.VARCHAR(36), this, "「modelKey」- 关联的模型记录ID，用于描述哪一个Model中的记录");
    /**
     * The column <code>ZDB.D_COMMENT.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<DCommentRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>ZDB.D_COMMENT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<DCommentRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>ZDB.D_COMMENT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<DCommentRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>ZDB.D_COMMENT.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<DCommentRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>ZDB.D_COMMENT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<DCommentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>ZDB.D_COMMENT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<DCommentRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>ZDB.D_COMMENT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<DCommentRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>ZDB.D_COMMENT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<DCommentRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private DComment(Name alias, Table<DCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private DComment(Name alias, Table<DCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.D_COMMENT</code> table reference
     */
    public DComment(String alias) {
        this(DSL.name(alias), D_COMMENT);
    }

    /**
     * Create an aliased <code>ZDB.D_COMMENT</code> table reference
     */
    public DComment(Name alias) {
        this(alias, D_COMMENT);
    }

    /**
     * Create a <code>ZDB.D_COMMENT</code> table reference
     */
    public DComment() {
        this(DSL.name("D_COMMENT"), null);
    }

    public <O extends Record> DComment(Table<O> child, ForeignKey<O, DCommentRecord> key) {
        super(child, key, D_COMMENT);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DCommentRecord> getRecordType() {
        return DCommentRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<DCommentRecord> getPrimaryKey() {
        return Keys.KEY_D_COMMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<DCommentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_D_COMMENT_CODE);
    }

    @Override
    public DComment as(String alias) {
        return new DComment(DSL.name(alias), this);
    }

    @Override
    public DComment as(Name alias) {
        return new DComment(alias, this);
    }

    @Override
    public DComment as(Table<?> alias) {
        return new DComment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DComment rename(String name) {
        return new DComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DComment rename(Name name) {
        return new DComment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DComment rename(Table<?> name) {
        return new DComment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, String, String, String, String, LocalDateTime, String, Integer, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function18<? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function18<? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
