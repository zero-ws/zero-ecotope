/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables;


import io.zerows.extension.commerce.documentation.domain.Keys;
import io.zerows.extension.commerce.documentation.domain.Zdb;
import io.zerows.extension.commerce.documentation.domain.tables.records.DExamRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DExam extends TableImpl<DExamRecord> {

    /**
     * The reference instance of <code>ZDB.D_EXAM</code>
     */
    public static final DExam D_EXAM = new DExam();
    private static final long serialVersionUID = 1L;
    /**
     * The column <code>ZDB.D_EXAM.KEY</code>. 「key」- 考试主键
     */
    public final TableField<DExamRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 考试主键");
    /**
     * The column <code>ZDB.D_EXAM.CODE</code>. 「code」- 考试编号
     */
    public final TableField<DExamRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255), this, "「code」- 考试编号");
    /**
     * The column <code>ZDB.D_EXAM.NAME</code>. 「name」- 考试名称
     */
    public final TableField<DExamRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 考试名称");
    /**
     * The column <code>ZDB.D_EXAM.SUBJECT</code>. 「subject」- 考试科目
     */
    public final TableField<DExamRecord, String> SUBJECT = createField(DSL.name("SUBJECT"), SQLDataType.VARCHAR(255), this, "「subject」- 考试科目");
    /**
     * The column <code>ZDB.D_EXAM.BRIEF</code>. 「brief」- 考试简介
     */
    public final TableField<DExamRecord, String> BRIEF = createField(DSL.name("BRIEF"), SQLDataType.CLOB, this, "「brief」- 考试简介");
    /**
     * The column <code>ZDB.D_EXAM.SN</code>. 「sn」- 考试代码，如SCJP、SCWCD
     * 1.5等专业考试专用代码
     */
    public final TableField<DExamRecord, String> SN = createField(DSL.name("SN"), SQLDataType.VARCHAR(255), this, "「sn」- 考试代码，如SCJP、SCWCD 1.5等专业考试专用代码");
    /**
     * The column <code>ZDB.D_EXAM.DURATION</code>. 「duration」- 时长，单位：分钟
     */
    public final TableField<DExamRecord, Integer> DURATION = createField(DSL.name("DURATION"), SQLDataType.INTEGER, this, "「duration」- 时长，单位：分钟");
    /**
     * The column <code>ZDB.D_EXAM.TYPE</code>. 「type」- 考试类型
     */
    public final TableField<DExamRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(128), this, "「type」- 考试类型");
    /**
     * The column <code>ZDB.D_EXAM.STATUS</code>. 「status」- 状态
     */
    public final TableField<DExamRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(12), this, "「status」- 状态");
    /**
     * The column <code>ZDB.D_EXAM.ONLINE</code>. 「online」- 是否线上考试
     */
    public final TableField<DExamRecord, Boolean> ONLINE = createField(DSL.name("ONLINE"), SQLDataType.BIT, this, "「online」- 是否线上考试");
    /**
     * The column <code>ZDB.D_EXAM.ADDR_URL</code>. 「addrUrl」- 线上考试地址
     */
    public final TableField<DExamRecord, String> ADDR_URL = createField(DSL.name("ADDR_URL"), SQLDataType.VARCHAR(1024), this, "「addrUrl」- 线上考试地址");
    /**
     * The column <code>ZDB.D_EXAM.ADDR_LOCATION</code>. 「addrLocation」-
     * 线下考试的考试地址
     */
    public final TableField<DExamRecord, String> ADDR_LOCATION = createField(DSL.name("ADDR_LOCATION"), SQLDataType.VARCHAR(36), this, "「addrLocation」- 线下考试的考试地址");
    /**
     * The column <code>ZDB.D_EXAM.ADDR_CONTENT</code>. 「addrContent」-
     * 线下考试地址详细描述
     */
    public final TableField<DExamRecord, String> ADDR_CONTENT = createField(DSL.name("ADDR_CONTENT"), SQLDataType.CLOB, this, "「addrContent」- 线下考试地址详细描述");
    /**
     * The column <code>ZDB.D_EXAM.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    public final TableField<DExamRecord, String> MODEL_ID = createField(DSL.name("MODEL_ID"), SQLDataType.VARCHAR(255), this, "「modelId」- 关联的模型identifier，用于描述");
    /**
     * The column <code>ZDB.D_EXAM.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    public final TableField<DExamRecord, String> MODEL_KEY = createField(DSL.name("MODEL_KEY"), SQLDataType.VARCHAR(36), this, "「modelKey」- 关联的模型记录ID，用于描述哪一个Model中的记录");
    /**
     * The column <code>ZDB.D_EXAM.ISSUER</code>. 「issuer」- 发布者
     */
    public final TableField<DExamRecord, String> ISSUER = createField(DSL.name("ISSUER"), SQLDataType.VARCHAR(128), this, "「issuer」- 发布者");
    /**
     * The column <code>ZDB.D_EXAM.ISSUER_AT</code>. 「issuerAt」- 发布时间
     */
    public final TableField<DExamRecord, LocalDateTime> ISSUER_AT = createField(DSL.name("ISSUER_AT"), SQLDataType.LOCALDATETIME(0), this, "「issuerAt」- 发布时间");
    /**
     * The column <code>ZDB.D_EXAM.START_AT</code>. 「startAt」- 考试开始时间
     */
    public final TableField<DExamRecord, LocalDateTime> START_AT = createField(DSL.name("START_AT"), SQLDataType.LOCALDATETIME(0), this, "「startAt」- 考试开始时间");
    /**
     * The column <code>ZDB.D_EXAM.END_AT</code>. 「endAt」- 考试结束时间
     */
    public final TableField<DExamRecord, LocalDateTime> END_AT = createField(DSL.name("END_AT"), SQLDataType.LOCALDATETIME(0), this, "「endAt」- 考试结束时间");
    /**
     * The column <code>ZDB.D_EXAM.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<DExamRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");
    /**
     * The column <code>ZDB.D_EXAM.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<DExamRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");
    /**
     * The column <code>ZDB.D_EXAM.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<DExamRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");
    /**
     * The column <code>ZDB.D_EXAM.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<DExamRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");
    /**
     * The column <code>ZDB.D_EXAM.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<DExamRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");
    /**
     * The column <code>ZDB.D_EXAM.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<DExamRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");
    /**
     * The column <code>ZDB.D_EXAM.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<DExamRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");
    /**
     * The column <code>ZDB.D_EXAM.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<DExamRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private DExam(Name alias, Table<DExamRecord> aliased) {
        this(alias, aliased, null);
    }

    private DExam(Name alias, Table<DExamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.D_EXAM</code> table reference
     */
    public DExam(String alias) {
        this(DSL.name(alias), D_EXAM);
    }

    /**
     * Create an aliased <code>ZDB.D_EXAM</code> table reference
     */
    public DExam(Name alias) {
        this(alias, D_EXAM);
    }

    /**
     * Create a <code>ZDB.D_EXAM</code> table reference
     */
    public DExam() {
        this(DSL.name("D_EXAM"), null);
    }

    public <O extends Record> DExam(Table<O> child, ForeignKey<O, DExamRecord> key) {
        super(child, key, D_EXAM);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DExamRecord> getRecordType() {
        return DExamRecord.class;
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<DExamRecord> getPrimaryKey() {
        return Keys.KEY_D_EXAM_PRIMARY;
    }

    @Override
    public List<UniqueKey<DExamRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_D_EXAM_CODE);
    }

    @Override
    public DExam as(String alias) {
        return new DExam(DSL.name(alias), this);
    }

    @Override
    public DExam as(Name alias) {
        return new DExam(alias, this);
    }

    @Override
    public DExam as(Table<?> alias) {
        return new DExam(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DExam rename(String name) {
        return new DExam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DExam rename(Name name) {
        return new DExam(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DExam rename(Table<?> name) {
        return new DExam(name.getQualifiedName(), null);
    }
}
