/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.commerce.documentation.domain.tables.DQstore;
import io.zerows.extension.commerce.documentation.domain.tables.records.DQstoreRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DQstoreDao extends AbstractVertxDAO<DQstoreRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore, String, Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>>, Future<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DQstoreRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public DQstoreDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(DQstore.D_QSTORE, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore.class, new JDBCClassicQueryExecutor<DQstoreRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore, String>(configuration, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore.class, vertx));
    }

    @Override
    protected String getId(io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByCode(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByCode(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByType(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByType(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByStatus(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.STATUS.in(values));
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByStatus(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.STATUS.in(values), limit);
    }

    /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByCategory(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.CATEGORY.in(values));
    }

    /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByCategory(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.CATEGORY.in(values), limit);
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByName(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByName(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>BRIEF IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByBrief(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.BRIEF.in(values));
    }

    /**
     * Find records that have <code>BRIEF IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByBrief(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.BRIEF.in(values), limit);
    }

    /**
     * Find records that have <code>VERSION IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByVersion(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.VERSION.in(values));
    }

    /**
     * Find records that have <code>VERSION IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByVersion(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.VERSION.in(values), limit);
    }

    /**
     * Find records that have <code>QUESTIONS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByQuestions(Collection<Integer> values) {
        return findManyByCondition(DQstore.D_QSTORE.QUESTIONS.in(values));
    }

    /**
     * Find records that have <code>QUESTIONS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByQuestions(Collection<Integer> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.QUESTIONS.in(values), limit);
    }

    /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByModelId(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.MODEL_ID.in(values));
    }

    /**
     * Find records that have <code>MODEL_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByModelId(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.MODEL_ID.in(values), limit);
    }

    /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByModelKey(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.MODEL_KEY.in(values));
    }

    /**
     * Find records that have <code>MODEL_KEY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByModelKey(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.MODEL_KEY.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyBySigma(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyBySigma(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByLanguage(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByLanguage(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByActive(Collection<Boolean> values) {
        return findManyByCondition(DQstore.D_QSTORE.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByActive(Collection<Boolean> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByMetadata(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByMetadata(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByCreatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DQstore.D_QSTORE.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByCreatedBy(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByCreatedBy(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DQstore.D_QSTORE.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByUpdatedBy(Collection<String> values) {
        return findManyByCondition(DQstore.D_QSTORE.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore>> findManyByUpdatedBy(Collection<String> values, int limit) {
        return findManyByCondition(DQstore.D_QSTORE.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<DQstoreRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<DQstoreRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQstore, String>) super.queryExecutor();
    }
}
