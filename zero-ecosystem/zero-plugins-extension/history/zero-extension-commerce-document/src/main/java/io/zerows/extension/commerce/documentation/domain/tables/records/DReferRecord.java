/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.records;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.documentation.domain.tables.DRefer;
import io.zerows.extension.commerce.documentation.domain.tables.interfaces.IDRefer;
import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DReferRecord extends UpdatableRecordImpl<DReferRecord> implements VertxPojo, Record7<String, String, String, String, Boolean, String, String>, IDRefer {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached DReferRecord
     */
    public DReferRecord() {
        super(DRefer.D_REFER);
    }

    /**
     * Create a detached, initialised DReferRecord
     */
    public DReferRecord(String fromId, String fromType, String toId, String toType, Boolean inline, String comment, String referComponent) {
        super(DRefer.D_REFER);

        setFromId(fromId);
        setFromType(fromType);
        setToId(toId);
        setToType(toType);
        setInline(inline);
        setComment(comment);
        setReferComponent(referComponent);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DReferRecord
     */
    public DReferRecord(io.zerows.extension.commerce.documentation.domain.tables.pojos.DRefer value) {
        super(DRefer.D_REFER);

        if (value != null) {
            setFromId(value.getFromId());
            setFromType(value.getFromType());
            setToId(value.getToId());
            setToType(value.getToType());
            setInline(value.getInline());
            setComment(value.getComment());
            setReferComponent(value.getReferComponent());
            resetChangedOnNotNull();
        }
    }

    public DReferRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.D_REFER.FROM_ID</code>. 「fromId」- 从ID
     */
    @Override
    public String getFromId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.D_REFER.FROM_ID</code>. 「fromId」- 从ID
     */
    @Override
    public DReferRecord setFromId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REFER.FROM_TYPE</code>. 「fromType」- 从类型
     */
    @Override
    public String getFromType() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.D_REFER.FROM_TYPE</code>. 「fromType」- 从类型
     */
    @Override
    public DReferRecord setFromType(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REFER.TO_ID</code>. 「toId」- 到ID
     */
    @Override
    public String getToId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.D_REFER.TO_ID</code>. 「toId」- 到ID
     */
    @Override
    public DReferRecord setToId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REFER.TO_TYPE</code>. 「toType」- 到类型
     */
    @Override
    public String getToType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.D_REFER.TO_TYPE</code>. 「toType」- 到类型
     */
    @Override
    public DReferRecord setToType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REFER.INLINE</code>. 「inline」- 是否内联
     */
    @Override
    public Boolean getInline() {
        return (Boolean) get(4);
    }

    /**
     * Setter for <code>ZDB.D_REFER.INLINE</code>. 「inline」- 是否内联
     */
    @Override
    public DReferRecord setInline(Boolean value) {
        set(4, value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>ZDB.D_REFER.COMMENT</code>. 「comment」- 关系备注
     */
    @Override
    public String getComment() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.D_REFER.COMMENT</code>. 「comment」- 关系备注
     */
    @Override
    public DReferRecord setComment(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REFER.REFER_COMPONENT</code>. 「referComponent」-
     * 关联执行组件（扩展用）
     */
    @Override
    public String getReferComponent() {
        return (String) get(6);
    }

    /**
     * Setter for <code>ZDB.D_REFER.REFER_COMPONENT</code>. 「referComponent」-
     * 关联执行组件（扩展用）
     */
    @Override
    public DReferRecord setReferComponent(String value) {
        set(6, value);
        return this;
    }

    @Override
    public Record4<String, String, String, String> key() {
        return (Record4) super.key();
    }

    @Override
    public Row7<String, String, String, String, Boolean, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<String, String, String, String, Boolean, String, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return DRefer.D_REFER.FROM_ID;
    }

    @Override
    public Field<String> field2() {
        return DRefer.D_REFER.FROM_TYPE;
    }

    @Override
    public Field<String> field3() {
        return DRefer.D_REFER.TO_ID;
    }

    @Override
    public Field<String> field4() {
        return DRefer.D_REFER.TO_TYPE;
    }

    @Override
    public Field<Boolean> field5() {
        return DRefer.D_REFER.INLINE;
    }

    @Override
    public Field<String> field6() {
        return DRefer.D_REFER.COMMENT;
    }

    @Override
    public Field<String> field7() {
        return DRefer.D_REFER.REFER_COMPONENT;
    }

    @Override
    public String component1() {
        return getFromId();
    }

    @Override
    public String component2() {
        return getFromType();
    }

    @Override
    public String component3() {
        return getToId();
    }

    @Override
    public String component4() {
        return getToType();
    }

    @Override
    public Boolean component5() {
        return getInline();
    }

    @Override
    public String component6() {
        return getComment();
    }

    @Override
    public String component7() {
        return getReferComponent();
    }

    @Override
    public String value1() {
        return getFromId();
    }

    @Override
    public String value2() {
        return getFromType();
    }

    @Override
    public String value3() {
        return getToId();
    }

    @Override
    public String value4() {
        return getToType();
    }

    @Override
    public Boolean value5() {
        return getInline();
    }

    @Override
    public String value6() {
        return getComment();
    }

    @Override
    public String value7() {
        return getReferComponent();
    }

    @Override
    public DReferRecord value1(String value) {
        setFromId(value);
        return this;
    }

    @Override
    public DReferRecord value2(String value) {
        setFromType(value);
        return this;
    }

    @Override
    public DReferRecord value3(String value) {
        setToId(value);
        return this;
    }

    @Override
    public DReferRecord value4(String value) {
        setToType(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public DReferRecord value5(Boolean value) {
        setInline(value);
        return this;
    }

    @Override
    public DReferRecord value6(String value) {
        setComment(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    @Override
    public DReferRecord value7(String value) {
        setReferComponent(value);
        return this;
    }

    @Override
    public DReferRecord values(String value1, String value2, String value3, String value4, Boolean value5, String value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    @Override
    public void from(IDRefer from) {
        setFromId(from.getFromId());
        setFromType(from.getFromType());
        setToId(from.getToId());
        setToType(from.getToType());
        setInline(from.getInline());
        setComment(from.getComment());
        setReferComponent(from.getReferComponent());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IDRefer> E into(E into) {
        into.from(this);
        return into;
    }
}
