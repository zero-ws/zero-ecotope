/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.commerce.documentation.domain.tables.DReplyItem;
import io.zerows.extension.commerce.documentation.domain.tables.records.DReplyItemRecord;
import org.jooq.Configuration;
import org.jooq.Record2;

import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DReplyItemDao extends AbstractVertxDAO<DReplyItemRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem, Record2<String, String>, Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>>, Future<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>, Future<Integer>, Future<Record2<String, String>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DReplyItemRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem, Record2<String, String>> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public DReplyItemDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(DReplyItem.D_REPLY_ITEM, io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem.class, new JDBCClassicQueryExecutor<DReplyItemRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem, Record2<String, String>>(configuration, io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem.class, vertx));
    }

    @Override
    protected Record2<String, String> getId(io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem object) {
        return compositeKeyRecord(object.getReplyId(), object.getQuestionCode());
    }

    /**
     * Find records that have <code>QUESTION_CODE IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>> findManyByQuestionCode(Collection<String> values) {
        return findManyByCondition(DReplyItem.D_REPLY_ITEM.QUESTION_CODE.in(values));
    }

    /**
     * Find records that have <code>QUESTION_CODE IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>> findManyByQuestionCode(Collection<String> values, int limit) {
        return findManyByCondition(DReplyItem.D_REPLY_ITEM.QUESTION_CODE.in(values), limit);
    }

    /**
     * Find records that have <code>ANSWER_CONTENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>> findManyByAnswerContent(Collection<String> values) {
        return findManyByCondition(DReplyItem.D_REPLY_ITEM.ANSWER_CONTENT.in(values));
    }

    /**
     * Find records that have <code>ANSWER_CONTENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>> findManyByAnswerContent(Collection<String> values, int limit) {
        return findManyByCondition(DReplyItem.D_REPLY_ITEM.ANSWER_CONTENT.in(values), limit);
    }

    /**
     * Find records that have <code>ANSWER_FILES IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>> findManyByAnswerFiles(Collection<String> values) {
        return findManyByCondition(DReplyItem.D_REPLY_ITEM.ANSWER_FILES.in(values));
    }

    /**
     * Find records that have <code>ANSWER_FILES IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>> findManyByAnswerFiles(Collection<String> values, int limit) {
        return findManyByCondition(DReplyItem.D_REPLY_ITEM.ANSWER_FILES.in(values), limit);
    }

    /**
     * Find records that have <code>ANSWER_PROOF IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>> findManyByAnswerProof(Collection<String> values) {
        return findManyByCondition(DReplyItem.D_REPLY_ITEM.ANSWER_PROOF.in(values));
    }

    /**
     * Find records that have <code>ANSWER_PROOF IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>> findManyByAnswerProof(Collection<String> values, int limit) {
        return findManyByCondition(DReplyItem.D_REPLY_ITEM.ANSWER_PROOF.in(values), limit);
    }

    /**
     * Find records that have <code>SORT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>> findManyBySort(Collection<Integer> values) {
        return findManyByCondition(DReplyItem.D_REPLY_ITEM.SORT.in(values));
    }

    /**
     * Find records that have <code>SORT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>> findManyBySort(Collection<Integer> values, int limit) {
        return findManyByCondition(DReplyItem.D_REPLY_ITEM.SORT.in(values), limit);
    }

    /**
     * Find records that have <code>ANSWER_COMPONENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>> findManyByAnswerComponent(Collection<String> values) {
        return findManyByCondition(DReplyItem.D_REPLY_ITEM.ANSWER_COMPONENT.in(values));
    }

    /**
     * Find records that have <code>ANSWER_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem>> findManyByAnswerComponent(Collection<String> values, int limit) {
        return findManyByCondition(DReplyItem.D_REPLY_ITEM.ANSWER_COMPONENT.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<DReplyItemRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem, Record2<String, String>> queryExecutor() {
        return (JDBCClassicQueryExecutor<DReplyItemRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DReplyItem, Record2<String, String>>) super.queryExecutor();
    }
}
