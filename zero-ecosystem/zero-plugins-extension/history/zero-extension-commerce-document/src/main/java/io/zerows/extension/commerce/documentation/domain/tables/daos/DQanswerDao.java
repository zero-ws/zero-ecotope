/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.commerce.documentation.domain.tables.DQanswer;
import io.zerows.extension.commerce.documentation.domain.tables.records.DQanswerRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DQanswerDao extends AbstractVertxDAO<DQanswerRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer, String, Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>>, Future<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<DQanswerRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public DQanswerDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(DQanswer.D_QANSWER, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer.class, new JDBCClassicQueryExecutor<DQanswerRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer, String>(configuration, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer.class, vertx));
    }

    @Override
    protected String getId(io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByCode(Collection<String> values) {
        return findManyByCondition(DQanswer.D_QANSWER.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByCode(Collection<String> values, int limit) {
        return findManyByCondition(DQanswer.D_QANSWER.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByName(Collection<String> values) {
        return findManyByCondition(DQanswer.D_QANSWER.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByName(Collection<String> values, int limit) {
        return findManyByCondition(DQanswer.D_QANSWER.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>BRIEF IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByBrief(Collection<String> values) {
        return findManyByCondition(DQanswer.D_QANSWER.BRIEF.in(values));
    }

    /**
     * Find records that have <code>BRIEF IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByBrief(Collection<String> values, int limit) {
        return findManyByCondition(DQanswer.D_QANSWER.BRIEF.in(values), limit);
    }

    /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByUiConfig(Collection<String> values) {
        return findManyByCondition(DQanswer.D_QANSWER.UI_CONFIG.in(values));
    }

    /**
     * Find records that have <code>UI_CONFIG IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByUiConfig(Collection<String> values, int limit) {
        return findManyByCondition(DQanswer.D_QANSWER.UI_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>QUESTION_ID IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByQuestionId(Collection<String> values) {
        return findManyByCondition(DQanswer.D_QANSWER.QUESTION_ID.in(values));
    }

    /**
     * Find records that have <code>QUESTION_ID IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByQuestionId(Collection<String> values, int limit) {
        return findManyByCondition(DQanswer.D_QANSWER.QUESTION_ID.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyBySigma(Collection<String> values) {
        return findManyByCondition(DQanswer.D_QANSWER.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyBySigma(Collection<String> values, int limit) {
        return findManyByCondition(DQanswer.D_QANSWER.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByLanguage(Collection<String> values) {
        return findManyByCondition(DQanswer.D_QANSWER.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByLanguage(Collection<String> values, int limit) {
        return findManyByCondition(DQanswer.D_QANSWER.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByActive(Collection<Boolean> values) {
        return findManyByCondition(DQanswer.D_QANSWER.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByActive(Collection<Boolean> values, int limit) {
        return findManyByCondition(DQanswer.D_QANSWER.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByMetadata(Collection<String> values) {
        return findManyByCondition(DQanswer.D_QANSWER.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByMetadata(Collection<String> values, int limit) {
        return findManyByCondition(DQanswer.D_QANSWER.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByCreatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DQanswer.D_QANSWER.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DQanswer.D_QANSWER.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByCreatedBy(Collection<String> values) {
        return findManyByCondition(DQanswer.D_QANSWER.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByCreatedBy(Collection<String> values, int limit) {
        return findManyByCondition(DQanswer.D_QANSWER.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
        return findManyByCondition(DQanswer.D_QANSWER.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
        return findManyByCondition(DQanswer.D_QANSWER.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByUpdatedBy(Collection<String> values) {
        return findManyByCondition(DQanswer.D_QANSWER.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer>> findManyByUpdatedBy(Collection<String> values, int limit) {
        return findManyByCondition(DQanswer.D_QANSWER.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<DQanswerRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<DQanswerRecord, io.zerows.extension.commerce.documentation.domain.tables.pojos.DQanswer, String>) super.queryExecutor();
    }
}
