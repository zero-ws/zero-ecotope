/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.documentation.domain.tables.records;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.documentation.domain.tables.DReply;
import io.zerows.extension.commerce.documentation.domain.tables.interfaces.IDReply;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DReplyRecord extends UpdatableRecordImpl<DReplyRecord> implements VertxPojo, IDReply {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached DReplyRecord
     */
    public DReplyRecord() {
        super(DReply.D_REPLY);
    }

    /**
     * Create a detached, initialised DReplyRecord
     */
    public DReplyRecord(String key, String code, String userId, String userName, String userNo, String identityIdc, String identityId, String examId, String paperId, String modelId, String modelKey, BigDecimal score, String grade, Boolean passed, Integer qTotal, Integer qReply, Integer qOk, String sigma, String language, Boolean active, String metadata, LocalDateTime createdAt, String createdBy, LocalDateTime updatedAt, String updatedBy) {
        super(DReply.D_REPLY);

        setKey(key);
        setCode(code);
        setUserId(userId);
        setUserName(userName);
        setUserNo(userNo);
        setIdentityIdc(identityIdc);
        setIdentityId(identityId);
        setExamId(examId);
        setPaperId(paperId);
        setModelId(modelId);
        setModelKey(modelKey);
        setScore(score);
        setGrade(grade);
        setPassed(passed);
        setQTotal(qTotal);
        setQReply(qReply);
        setQOk(qOk);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised DReplyRecord
     */
    public DReplyRecord(io.zerows.extension.commerce.documentation.domain.tables.pojos.DReply value) {
        super(DReply.D_REPLY);

        if (value != null) {
            setKey(value.getKey());
            setCode(value.getCode());
            setUserId(value.getUserId());
            setUserName(value.getUserName());
            setUserNo(value.getUserNo());
            setIdentityIdc(value.getIdentityIdc());
            setIdentityId(value.getIdentityId());
            setExamId(value.getExamId());
            setPaperId(value.getPaperId());
            setModelId(value.getModelId());
            setModelKey(value.getModelKey());
            setScore(value.getScore());
            setGrade(value.getGrade());
            setPassed(value.getPassed());
            setQTotal(value.getQTotal());
            setQReply(value.getQReply());
            setQOk(value.getQOk());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            resetChangedOnNotNull();
        }
    }

    public DReplyRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.D_REPLY.KEY</code>. 「key」- 答题卡主键
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.KEY</code>. 「key」- 答题卡主键
     */
    @Override
    public DReplyRecord setKey(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.CODE</code>. 「code」- 答题卡编号
     */
    @Override
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.CODE</code>. 「code」- 答题卡编号
     */
    @Override
    public DReplyRecord setCode(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.USER_ID</code>. 「userId」- 考生ID
     */
    @Override
    public String getUserId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.USER_ID</code>. 「userId」- 考生ID
     */
    @Override
    public DReplyRecord setUserId(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.USER_NAME</code>. 「userName」- 考生姓名
     */
    @Override
    public String getUserName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.USER_NAME</code>. 「userName」- 考生姓名
     */
    @Override
    public DReplyRecord setUserName(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.USER_NO</code>. 「userNo」- 准考证号
     */
    @Override
    public String getUserNo() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.USER_NO</code>. 「userNo」- 准考证号
     */
    @Override
    public DReplyRecord setUserNo(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.IDENTITY_IDC</code>. 「identityIdc」- 证件号
     */
    @Override
    public String getIdentityIdc() {
        return (String) get(5);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.IDENTITY_IDC</code>. 「identityIdc」- 证件号
     */
    @Override
    public DReplyRecord setIdentityIdc(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.IDENTITY_ID</code>. 「identityId」-
     * 关联档案时考生档案ID
     */
    @Override
    public String getIdentityId() {
        return (String) get(6);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.IDENTITY_ID</code>. 「identityId」-
     * 关联档案时考生档案ID
     */
    @Override
    public DReplyRecord setIdentityId(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.EXAM_ID</code>. 「examId」- 哪场考试答题卡
     */
    @Override
    public String getExamId() {
        return (String) get(7);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.EXAM_ID</code>. 「examId」- 哪场考试答题卡
     */
    @Override
    public DReplyRecord setExamId(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.PAPER_ID</code>. 「paperId」- 哪张试卷答题卡
     */
    @Override
    public String getPaperId() {
        return (String) get(8);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.PAPER_ID</code>. 「paperId」- 哪张试卷答题卡
     */
    @Override
    public DReplyRecord setPaperId(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public String getModelId() {
        return (String) get(9);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.MODEL_ID</code>. 「modelId」-
     * 关联的模型identifier，用于描述
     */
    @Override
    public DReplyRecord setModelId(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public String getModelKey() {
        return (String) get(10);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.MODEL_KEY</code>. 「modelKey」-
     * 关联的模型记录ID，用于描述哪一个Model中的记录
     */
    @Override
    public DReplyRecord setModelKey(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.SCORE</code>. 「score」- 得分
     */
    @Override
    public BigDecimal getScore() {
        return (BigDecimal) get(11);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.SCORE</code>. 「score」- 得分
     */
    @Override
    public DReplyRecord setScore(BigDecimal value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.GRADE</code>. 「grade」- 最终评级 S/A/B/C/D/E
     */
    @Override
    public String getGrade() {
        return (String) get(12);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.GRADE</code>. 「grade」- 最终评级 S/A/B/C/D/E
     */
    @Override
    public DReplyRecord setGrade(String value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.PASSED</code>. 「passed」- 是否及格，及格 passed =
     * true，否则 passed = false
     */
    @Override
    public Boolean getPassed() {
        return (Boolean) get(13);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.PASSED</code>. 「passed」- 是否及格，及格 passed =
     * true，否则 passed = false
     */
    @Override
    public DReplyRecord setPassed(Boolean value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.Q_TOTAL</code>. 「qTotal」- 试题总量
     */
    @Override
    public Integer getQTotal() {
        return (Integer) get(14);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.Q_TOTAL</code>. 「qTotal」- 试题总量
     */
    @Override
    public DReplyRecord setQTotal(Integer value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.Q_REPLY</code>. 「qReply」- 已答试题数量
     */
    @Override
    public Integer getQReply() {
        return (Integer) get(15);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.Q_REPLY</code>. 「qReply」- 已答试题数量
     */
    @Override
    public DReplyRecord setQReply(Integer value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.Q_OK</code>. 「qOk」- 正确试题数量
     */
    @Override
    public Integer getQOk() {
        return (Integer) get(16);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.Q_OK</code>. 「qOk」- 正确试题数量
     */
    @Override
    public DReplyRecord setQOk(Integer value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(17);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public DReplyRecord setSigma(String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(18);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public DReplyRecord setLanguage(String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(19);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public DReplyRecord setActive(Boolean value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(20);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public DReplyRecord setMetadata(String value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(21);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public DReplyRecord setCreatedAt(LocalDateTime value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(22);
    }

    /**
     * Setter for <code>ZDB.D_REPLY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public DReplyRecord setCreatedBy(String value) {
        set(22, value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>ZDB.D_REPLY.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(23);
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.D_REPLY.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public DReplyRecord setUpdatedAt(LocalDateTime value) {
        set(23, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.D_REPLY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(24);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>ZDB.D_REPLY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public DReplyRecord setUpdatedBy(String value) {
        set(24, value);
        return this;
    }

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    @Override
    public void from(IDReply from) {
        setKey(from.getKey());
        setCode(from.getCode());
        setUserId(from.getUserId());
        setUserName(from.getUserName());
        setUserNo(from.getUserNo());
        setIdentityIdc(from.getIdentityIdc());
        setIdentityId(from.getIdentityId());
        setExamId(from.getExamId());
        setPaperId(from.getPaperId());
        setModelId(from.getModelId());
        setModelKey(from.getModelKey());
        setScore(from.getScore());
        setGrade(from.getGrade());
        setPassed(from.getPassed());
        setQTotal(from.getQTotal());
        setQReply(from.getQReply());
        setQOk(from.getQOk());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IDReply> E into(E into) {
        into.from(this);
        return into;
    }
}
