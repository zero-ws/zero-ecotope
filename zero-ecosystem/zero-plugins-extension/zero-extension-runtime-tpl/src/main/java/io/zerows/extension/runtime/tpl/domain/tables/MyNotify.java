/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.tpl.domain.tables;


import io.zerows.extension.runtime.tpl.domain.Keys;
import io.zerows.extension.runtime.tpl.domain.Zdb;
import io.zerows.extension.runtime.tpl.domain.tables.records.MyNotifyRecord;
import org.jooq.*;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MyNotify extends TableImpl<MyNotifyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.MY_NOTIFY</code>
     */
    public static final MyNotify MY_NOTIFY = new MyNotify();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MyNotifyRecord> getRecordType() {
        return MyNotifyRecord.class;
    }

    /**
     * The column <code>ZDB.MY_NOTIFY.KEY</code>. 「key」- 设置主键
     */
    public final TableField<MyNotifyRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 设置主键");

    /**
     * The column <code>ZDB.MY_NOTIFY.OWNER_TYPE</code>. 「ownerType」- 拥有者类型
     */
    public final TableField<MyNotifyRecord, String> OWNER_TYPE = createField(DSL.name("OWNER_TYPE"), SQLDataType.VARCHAR(128), this, "「ownerType」- 拥有者类型");

    /**
     * The column <code>ZDB.MY_NOTIFY.OWNER_ID</code>. 「ownerId」- 拥有者ID
     */
    public final TableField<MyNotifyRecord, String> OWNER_ID = createField(DSL.name("OWNER_ID"), SQLDataType.VARCHAR(36), this, "「ownerId」- 拥有者ID");

    /**
     * The column <code>ZDB.MY_NOTIFY.CONFIG_INTERNAL</code>. 「configInternal」-
     * 站内信配置
     */
    public final TableField<MyNotifyRecord, String> CONFIG_INTERNAL = createField(DSL.name("CONFIG_INTERNAL"), SQLDataType.CLOB, this, "「configInternal」- 站内信配置");

    /**
     * The column <code>ZDB.MY_NOTIFY.CONFIG_EMAIL</code>. 「configEmail」- 邮件配置
     */
    public final TableField<MyNotifyRecord, String> CONFIG_EMAIL = createField(DSL.name("CONFIG_EMAIL"), SQLDataType.CLOB, this, "「configEmail」- 邮件配置");

    /**
     * The column <code>ZDB.MY_NOTIFY.CONFIG_SMS</code>. 「configSms」- 短信配置
     */
    public final TableField<MyNotifyRecord, String> CONFIG_SMS = createField(DSL.name("CONFIG_SMS"), SQLDataType.CLOB, this, "「configSms」- 短信配置");

    /**
     * The column <code>ZDB.MY_NOTIFY.APP_ID</code>. 「id」- 所属应用ID
     */
    public final TableField<MyNotifyRecord, String> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.VARCHAR(36), this, "「id」- 所属应用ID");

    /**
     * The column <code>ZDB.MY_NOTIFY.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<MyNotifyRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>ZDB.MY_NOTIFY.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<MyNotifyRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");

    /**
     * The column <code>ZDB.MY_NOTIFY.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<MyNotifyRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");

    /**
     * The column <code>ZDB.MY_NOTIFY.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<MyNotifyRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");

    /**
     * The column <code>ZDB.MY_NOTIFY.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<MyNotifyRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");

    /**
     * The column <code>ZDB.MY_NOTIFY.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<MyNotifyRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");

    /**
     * The column <code>ZDB.MY_NOTIFY.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<MyNotifyRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");

    /**
     * The column <code>ZDB.MY_NOTIFY.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<MyNotifyRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private MyNotify(Name alias, Table<MyNotifyRecord> aliased) {
        this(alias, aliased, null);
    }

    private MyNotify(Name alias, Table<MyNotifyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.MY_NOTIFY</code> table reference
     */
    public MyNotify(String alias) {
        this(DSL.name(alias), MY_NOTIFY);
    }

    /**
     * Create an aliased <code>ZDB.MY_NOTIFY</code> table reference
     */
    public MyNotify(Name alias) {
        this(alias, MY_NOTIFY);
    }

    /**
     * Create a <code>ZDB.MY_NOTIFY</code> table reference
     */
    public MyNotify() {
        this(DSL.name("MY_NOTIFY"), null);
    }

    public <O extends Record> MyNotify(Table<O> child, ForeignKey<O, MyNotifyRecord> key) {
        super(child, key, MY_NOTIFY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<MyNotifyRecord> getPrimaryKey() {
        return Keys.KEY_MY_NOTIFY_PRIMARY;
    }

    @Override
    public List<UniqueKey<MyNotifyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MY_NOTIFY_APP_ID);
    }

    @Override
    public MyNotify as(String alias) {
        return new MyNotify(DSL.name(alias), this);
    }

    @Override
    public MyNotify as(Name alias) {
        return new MyNotify(alias, this);
    }

    @Override
    public MyNotify as(Table<?> alias) {
        return new MyNotify(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public MyNotify rename(String name) {
        return new MyNotify(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MyNotify rename(Name name) {
        return new MyNotify(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public MyNotify rename(Table<?> name) {
        return new MyNotify(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function15<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function15<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
