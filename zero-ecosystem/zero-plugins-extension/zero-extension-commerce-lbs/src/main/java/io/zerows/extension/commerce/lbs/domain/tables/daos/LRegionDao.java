/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.lbs.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.zerows.extension.commerce.lbs.domain.tables.LRegion;
import io.zerows.extension.commerce.lbs.domain.tables.records.LRegionRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LRegionDao extends AbstractVertxDAO<LRegionRecord, io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion, String, Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>>, Future<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<LRegionRecord,io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public LRegionDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(LRegion.L_REGION, io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion.class, new JDBCClassicQueryExecutor<LRegionRecord,io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion,String>(configuration,io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion.class,vertx));
        }

        @Override
        protected String getId(io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByName(Collection<String> values) {
                return findManyByCondition(LRegion.L_REGION.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(LRegion.L_REGION.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByCode(Collection<String> values) {
                return findManyByCondition(LRegion.L_REGION.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(LRegion.L_REGION.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(LRegion.L_REGION.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(LRegion.L_REGION.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByOrder(Collection<Integer> values) {
                return findManyByCondition(LRegion.L_REGION.ORDER.in(values));
        }

        /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByOrder(Collection<Integer> values, int limit) {
                return findManyByCondition(LRegion.L_REGION.ORDER.in(values),limit);
        }

        /**
     * Find records that have <code>CITY_ID IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByCityId(Collection<String> values) {
                return findManyByCondition(LRegion.L_REGION.CITY_ID.in(values));
        }

        /**
     * Find records that have <code>CITY_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByCityId(Collection<String> values, int limit) {
                return findManyByCondition(LRegion.L_REGION.CITY_ID.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(LRegion.L_REGION.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(LRegion.L_REGION.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(LRegion.L_REGION.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(LRegion.L_REGION.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(LRegion.L_REGION.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(LRegion.L_REGION.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(LRegion.L_REGION.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(LRegion.L_REGION.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(LRegion.L_REGION.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(LRegion.L_REGION.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(LRegion.L_REGION.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(LRegion.L_REGION.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(LRegion.L_REGION.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(LRegion.L_REGION.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<LRegionRecord,io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<LRegionRecord,io.zerows.extension.commerce.lbs.domain.tables.pojos.LRegion,String>) super.queryExecutor();
        }
}
