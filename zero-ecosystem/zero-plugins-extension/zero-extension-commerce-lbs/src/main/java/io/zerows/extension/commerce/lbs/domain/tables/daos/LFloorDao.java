/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.lbs.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.commerce.lbs.domain.tables.LFloor;
import io.zerows.extension.commerce.lbs.domain.tables.records.LFloorRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class LFloorDao extends AbstractVertxDAO<LFloorRecord, io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor, String, Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>>, Future<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<LFloorRecord, io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public LFloorDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(LFloor.L_FLOOR, io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor.class, new JDBCClassicQueryExecutor<LFloorRecord, io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor, String>(configuration, io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByName(final Collection<String> values) {
        return findManyByCondition(LFloor.L_FLOOR.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(LFloor.L_FLOOR.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(LFloor.L_FLOOR.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(LFloor.L_FLOOR.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(LFloor.L_FLOOR.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(LFloor.L_FLOOR.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByOrder(final Collection<Integer> values) {
        return findManyByCondition(LFloor.L_FLOOR.ORDER.in(values));
    }

    /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByOrder(final Collection<Integer> values, final int limit) {
        return findManyByCondition(LFloor.L_FLOOR.ORDER.in(values), limit);
    }

    /**
     * Find records that have <code>TENT_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByTentId(final Collection<String> values) {
        return findManyByCondition(LFloor.L_FLOOR.TENT_ID.in(values));
    }

    /**
     * Find records that have <code>TENT_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByTentId(final Collection<String> values, final int limit) {
        return findManyByCondition(LFloor.L_FLOOR.TENT_ID.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(LFloor.L_FLOOR.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(LFloor.L_FLOOR.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(LFloor.L_FLOOR.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(LFloor.L_FLOOR.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(LFloor.L_FLOOR.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(LFloor.L_FLOOR.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(LFloor.L_FLOOR.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(LFloor.L_FLOOR.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(LFloor.L_FLOOR.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(LFloor.L_FLOOR.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(LFloor.L_FLOOR.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(LFloor.L_FLOOR.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(LFloor.L_FLOOR.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(LFloor.L_FLOOR.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<LFloorRecord, io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<LFloorRecord, io.zerows.extension.commerce.lbs.domain.tables.pojos.LFloor, String>) super.queryExecutor();
    }
}
