/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.lbs.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.commerce.lbs.domain.tables.LCountry;
import io.zerows.extension.commerce.lbs.domain.tables.records.LCountryRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class LCountryDao extends AbstractVertxDAO<LCountryRecord, io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry, String, Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>>, Future<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<LCountryRecord, io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public LCountryDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(LCountry.L_COUNTRY, io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry.class, new JDBCClassicQueryExecutor<LCountryRecord, io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry, String>(configuration, io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByName(final Collection<String> values) {
        return findManyByCondition(LCountry.L_COUNTRY.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(LCountry.L_COUNTRY.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>FLAG IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByFlag(final Collection<String> values) {
        return findManyByCondition(LCountry.L_COUNTRY.FLAG.in(values));
    }

    /**
     * Find records that have <code>FLAG IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByFlag(final Collection<String> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.FLAG.in(values), limit);
    }

    /**
     * Find records that have <code>PHONE_PREFIX IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByPhonePrefix(final Collection<String> values) {
        return findManyByCondition(LCountry.L_COUNTRY.PHONE_PREFIX.in(values));
    }

    /**
     * Find records that have <code>PHONE_PREFIX IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByPhonePrefix(final Collection<String> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.PHONE_PREFIX.in(values), limit);
    }

    /**
     * Find records that have <code>CURRENCY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByCurrency(final Collection<String> values) {
        return findManyByCondition(LCountry.L_COUNTRY.CURRENCY.in(values));
    }

    /**
     * Find records that have <code>CURRENCY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByCurrency(final Collection<String> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.CURRENCY.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(LCountry.L_COUNTRY.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByOrder(final Collection<Integer> values) {
        return findManyByCondition(LCountry.L_COUNTRY.ORDER.in(values));
    }

    /**
     * Find records that have <code>ORDER IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByOrder(final Collection<Integer> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.ORDER.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(LCountry.L_COUNTRY.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(LCountry.L_COUNTRY.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(LCountry.L_COUNTRY.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(LCountry.L_COUNTRY.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(LCountry.L_COUNTRY.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(LCountry.L_COUNTRY.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(LCountry.L_COUNTRY.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(LCountry.L_COUNTRY.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<LCountryRecord, io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<LCountryRecord, io.zerows.extension.commerce.lbs.domain.tables.pojos.LCountry, String>) super.queryExecutor();
    }
}
