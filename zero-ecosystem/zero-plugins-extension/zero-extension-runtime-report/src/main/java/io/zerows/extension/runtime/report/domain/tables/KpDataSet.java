/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.report.domain.tables;


import io.zerows.extension.runtime.report.domain.Keys;
import io.zerows.extension.runtime.report.domain.Zdb;
import io.zerows.extension.runtime.report.domain.tables.records.KpDataSetRecord;
import org.jooq.*;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KpDataSet extends TableImpl<KpDataSetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.KP_DATA_SET</code>
     */
    public static final KpDataSet KP_DATA_SET = new KpDataSet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KpDataSetRecord> getRecordType() {
        return KpDataSetRecord.class;
    }

    /**
     * The column <code>ZDB.KP_DATA_SET.KEY</code>. 「key」- 数据源主键
     */
    public final TableField<KpDataSetRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 数据源主键");

    /**
     * The column <code>ZDB.KP_DATA_SET.NAME</code>. 「name」- 数据源名称
     */
    public final TableField<KpDataSetRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 数据源名称");

    /**
     * The column <code>ZDB.KP_DATA_SET.CODE</code>. 「code」- 数据源编码
     */
    public final TableField<KpDataSetRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(36), this, "「code」- 数据源编码");

    /**
     * The column <code>ZDB.KP_DATA_SET.DATA_QUERY</code>. 「dataQuery」- 数据查询配置
     */
    public final TableField<KpDataSetRecord, String> DATA_QUERY = createField(DSL.name("DATA_QUERY"), SQLDataType.CLOB, this, "「dataQuery」- 数据查询配置");

    /**
     * The column <code>ZDB.KP_DATA_SET.DATA_SOURCE</code>. 「dataSource」-
     * 基于什么内容做报表
     */
    public final TableField<KpDataSetRecord, String> DATA_SOURCE = createField(DSL.name("DATA_SOURCE"), SQLDataType.CLOB, this, "「dataSource」- 基于什么内容做报表");

    /**
     * The column <code>ZDB.KP_DATA_SET.DATA_CONFIG</code>. 「dataConfig」-
     * 数据查询过程中的配置
     */
    public final TableField<KpDataSetRecord, String> DATA_CONFIG = createField(DSL.name("DATA_CONFIG"), SQLDataType.CLOB, this, "「dataConfig」- 数据查询过程中的配置");

    /**
     * The column <code>ZDB.KP_DATA_SET.DATA_FIELD</code>. 「dataField」- 数据字段
     */
    public final TableField<KpDataSetRecord, String> DATA_FIELD = createField(DSL.name("DATA_FIELD"), SQLDataType.CLOB, this, "「dataField」- 数据字段");

    /**
     * The column <code>ZDB.KP_DATA_SET.DATA_COMPONENT</code>. 「dataComponent」-
     * 数据查询组件
     */
    public final TableField<KpDataSetRecord, String> DATA_COMPONENT = createField(DSL.name("DATA_COMPONENT"), SQLDataType.CLOB, this, "「dataComponent」- 数据查询组件");

    /**
     * The column <code>ZDB.KP_DATA_SET.TYPE</code>. 「type」- 数据源类型
     */
    public final TableField<KpDataSetRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(255), this, "「type」- 数据源类型");

    /**
     * The column <code>ZDB.KP_DATA_SET.STATUS</code>. 「status」- 数据源状态
     */
    public final TableField<KpDataSetRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(255), this, "「status」- 数据源状态");

    /**
     * The column <code>ZDB.KP_DATA_SET.SOURCE_ID</code>. 「sourceId」- 额外数据源
     */
    public final TableField<KpDataSetRecord, String> SOURCE_ID = createField(DSL.name("SOURCE_ID"), SQLDataType.VARCHAR(36), this, "「sourceId」- 额外数据源");

    /**
     * The column <code>ZDB.KP_DATA_SET.SOURCE_CONFIG</code>. 「sourceConfig」-
     * 数据源相关配置
     */
    public final TableField<KpDataSetRecord, String> SOURCE_CONFIG = createField(DSL.name("SOURCE_CONFIG"), SQLDataType.CLOB, this, "「sourceConfig」- 数据源相关配置");

    /**
     * The column <code>ZDB.KP_DATA_SET.APP_ID</code>. 「appId」- 应用数据
     */
    public final TableField<KpDataSetRecord, String> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.VARCHAR(36), this, "「appId」- 应用数据");

    /**
     * The column <code>ZDB.KP_DATA_SET.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<KpDataSetRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>ZDB.KP_DATA_SET.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<KpDataSetRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");

    /**
     * The column <code>ZDB.KP_DATA_SET.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<KpDataSetRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");

    /**
     * The column <code>ZDB.KP_DATA_SET.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<KpDataSetRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");

    /**
     * The column <code>ZDB.KP_DATA_SET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<KpDataSetRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");

    /**
     * The column <code>ZDB.KP_DATA_SET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<KpDataSetRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");

    /**
     * The column <code>ZDB.KP_DATA_SET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<KpDataSetRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");

    /**
     * The column <code>ZDB.KP_DATA_SET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<KpDataSetRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private KpDataSet(Name alias, Table<KpDataSetRecord> aliased) {
        this(alias, aliased, null);
    }

    private KpDataSet(Name alias, Table<KpDataSetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.KP_DATA_SET</code> table reference
     */
    public KpDataSet(String alias) {
        this(DSL.name(alias), KP_DATA_SET);
    }

    /**
     * Create an aliased <code>ZDB.KP_DATA_SET</code> table reference
     */
    public KpDataSet(Name alias) {
        this(alias, KP_DATA_SET);
    }

    /**
     * Create a <code>ZDB.KP_DATA_SET</code> table reference
     */
    public KpDataSet() {
        this(DSL.name("KP_DATA_SET"), null);
    }

    public <O extends Record> KpDataSet(Table<O> child, ForeignKey<O, KpDataSetRecord> key) {
        super(child, key, KP_DATA_SET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<KpDataSetRecord> getPrimaryKey() {
        return Keys.KEY_KP_DATA_SET_PRIMARY;
    }

    @Override
    public KpDataSet as(String alias) {
        return new KpDataSet(DSL.name(alias), this);
    }

    @Override
    public KpDataSet as(Name alias) {
        return new KpDataSet(alias, this);
    }

    @Override
    public KpDataSet as(Table<?> alias) {
        return new KpDataSet(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public KpDataSet rename(String name) {
        return new KpDataSet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KpDataSet rename(Name name) {
        return new KpDataSet(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public KpDataSet rename(Table<?> name) {
        return new KpDataSet(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<String, String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function21<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function21<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
