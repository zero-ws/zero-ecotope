/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.report.domain.tables;


import io.zerows.extension.runtime.report.domain.Keys;
import io.zerows.extension.runtime.report.domain.Zdb;
import io.zerows.extension.runtime.report.domain.tables.records.KpFeatureRecord;
import org.jooq.*;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KpFeature extends TableImpl<KpFeatureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.KP_FEATURE</code>
     */
    public static final KpFeature KP_FEATURE = new KpFeature();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KpFeatureRecord> getRecordType() {
        return KpFeatureRecord.class;
    }

    /**
     * The column <code>ZDB.KP_FEATURE.KEY</code>. 「key」- 特征主键
     */
    public final TableField<KpFeatureRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 特征主键");

    /**
     * The column <code>ZDB.KP_FEATURE.NAME</code>. 「name」- 特征名称
     */
    public final TableField<KpFeatureRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 特征名称");

    /**
     * The column <code>ZDB.KP_FEATURE.TYPE</code>. 「type」- 特征类型
     */
    public final TableField<KpFeatureRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(255), this, "「type」- 特征类型");

    /**
     * The column <code>ZDB.KP_FEATURE.STATUS</code>. 「status」- 特征状态
     */
    public final TableField<KpFeatureRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(255), this, "「status」- 特征状态");

    /**
     * The column <code>ZDB.KP_FEATURE.VALUE_PATH</code>. 「valuePath」- 特征名称
     */
    public final TableField<KpFeatureRecord, String> VALUE_PATH = createField(DSL.name("VALUE_PATH"), SQLDataType.VARCHAR(1024), this, "「valuePath」- 特征名称");

    /**
     * The column <code>ZDB.KP_FEATURE.VALUE_CONFIG</code>. 「valueConfig」- 特征配置
     */
    public final TableField<KpFeatureRecord, String> VALUE_CONFIG = createField(DSL.name("VALUE_CONFIG"), SQLDataType.CLOB, this, "「valueConfig」- 特征配置");

    /**
     * The column <code>ZDB.KP_FEATURE.VALUE_DISPLAY</code>. 「valueDisplay」-
     * 特征显示名称
     */
    public final TableField<KpFeatureRecord, String> VALUE_DISPLAY = createField(DSL.name("VALUE_DISPLAY"), SQLDataType.VARCHAR(255), this, "「valueDisplay」- 特征显示名称");

    /**
     * The column <code>ZDB.KP_FEATURE.IN_CONFIG</code>. 「inConfig」- 特殊输出配置
     */
    public final TableField<KpFeatureRecord, String> IN_CONFIG = createField(DSL.name("IN_CONFIG"), SQLDataType.CLOB, this, "「inConfig」- 特殊输出配置");

    /**
     * The column <code>ZDB.KP_FEATURE.IN_COMPONENT</code>. 「inComponent」-
     * 特殊输出组件
     */
    public final TableField<KpFeatureRecord, String> IN_COMPONENT = createField(DSL.name("IN_COMPONENT"), SQLDataType.CLOB, this, "「inComponent」- 特殊输出组件");

    /**
     * The column <code>ZDB.KP_FEATURE.OUT_CONFIG</code>. 「outConfig」- 特殊输出配置
     */
    public final TableField<KpFeatureRecord, String> OUT_CONFIG = createField(DSL.name("OUT_CONFIG"), SQLDataType.CLOB, this, "「outConfig」- 特殊输出配置");

    /**
     * The column <code>ZDB.KP_FEATURE.OUT_COMPONENT</code>. 「outComponent」-
     * 特殊输出组件
     */
    public final TableField<KpFeatureRecord, String> OUT_COMPONENT = createField(DSL.name("OUT_COMPONENT"), SQLDataType.CLOB, this, "「outComponent」- 特殊输出组件");

    /**
     * The column <code>ZDB.KP_FEATURE.REPORT_ID</code>. 「reportId」- 关联报表ID
     */
    public final TableField<KpFeatureRecord, String> REPORT_ID = createField(DSL.name("REPORT_ID"), SQLDataType.VARCHAR(36), this, "「reportId」- 关联报表ID");

    /**
     * The column <code>ZDB.KP_FEATURE.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<KpFeatureRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>ZDB.KP_FEATURE.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<KpFeatureRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");

    /**
     * The column <code>ZDB.KP_FEATURE.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<KpFeatureRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");

    /**
     * The column <code>ZDB.KP_FEATURE.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<KpFeatureRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");

    /**
     * The column <code>ZDB.KP_FEATURE.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<KpFeatureRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");

    /**
     * The column <code>ZDB.KP_FEATURE.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<KpFeatureRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");

    /**
     * The column <code>ZDB.KP_FEATURE.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<KpFeatureRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");

    /**
     * The column <code>ZDB.KP_FEATURE.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<KpFeatureRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private KpFeature(Name alias, Table<KpFeatureRecord> aliased) {
        this(alias, aliased, null);
    }

    private KpFeature(Name alias, Table<KpFeatureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.KP_FEATURE</code> table reference
     */
    public KpFeature(String alias) {
        this(DSL.name(alias), KP_FEATURE);
    }

    /**
     * Create an aliased <code>ZDB.KP_FEATURE</code> table reference
     */
    public KpFeature(Name alias) {
        this(alias, KP_FEATURE);
    }

    /**
     * Create a <code>ZDB.KP_FEATURE</code> table reference
     */
    public KpFeature() {
        this(DSL.name("KP_FEATURE"), null);
    }

    public <O extends Record> KpFeature(Table<O> child, ForeignKey<O, KpFeatureRecord> key) {
        super(child, key, KP_FEATURE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<KpFeatureRecord> getPrimaryKey() {
        return Keys.KEY_KP_FEATURE_PRIMARY;
    }

    @Override
    public List<UniqueKey<KpFeatureRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_KP_FEATURE_NAME);
    }

    @Override
    public KpFeature as(String alias) {
        return new KpFeature(DSL.name(alias), this);
    }

    @Override
    public KpFeature as(Name alias) {
        return new KpFeature(alias, this);
    }

    @Override
    public KpFeature as(Table<?> alias) {
        return new KpFeature(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public KpFeature rename(String name) {
        return new KpFeature(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KpFeature rename(Name name) {
        return new KpFeature(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public KpFeature rename(Table<?> name) {
        return new KpFeature(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function20<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function20<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
