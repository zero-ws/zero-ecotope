/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.report.domain.tables.pojos;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.runtime.report.domain.tables.interfaces.IKpDimension;

import java.time.LocalDateTime;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KpDimension implements VertxPojo, IKpDimension {

    private static final long serialVersionUID = 1L;

    private String key;
    private String name;
    private String code;
    private String type;
    private String status;
    private String dataSetId;
    private String dataQuery;
    private String dataSort;
    private String dataGroup;
    private String dataOutput;
    private String dataField;
    private String chartType;
    private String chartConfig;
    private String reportId;
    private Boolean active;
    private String sigma;
    private String metadata;
    private String language;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public KpDimension() {}

    public KpDimension(IKpDimension value) {
        this.key = value.getKey();
        this.name = value.getName();
        this.code = value.getCode();
        this.type = value.getType();
        this.status = value.getStatus();
        this.dataSetId = value.getDataSetId();
        this.dataQuery = value.getDataQuery();
        this.dataSort = value.getDataSort();
        this.dataGroup = value.getDataGroup();
        this.dataOutput = value.getDataOutput();
        this.dataField = value.getDataField();
        this.chartType = value.getChartType();
        this.chartConfig = value.getChartConfig();
        this.reportId = value.getReportId();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public KpDimension(
        String key,
        String name,
        String code,
        String type,
        String status,
        String dataSetId,
        String dataQuery,
        String dataSort,
        String dataGroup,
        String dataOutput,
        String dataField,
        String chartType,
        String chartConfig,
        String reportId,
        Boolean active,
        String sigma,
        String metadata,
        String language,
        LocalDateTime createdAt,
        String createdBy,
        LocalDateTime updatedAt,
        String updatedBy
    ) {
        this.key = key;
        this.name = name;
        this.code = code;
        this.type = type;
        this.status = status;
        this.dataSetId = dataSetId;
        this.dataQuery = dataQuery;
        this.dataSort = dataSort;
        this.dataGroup = dataGroup;
        this.dataOutput = dataOutput;
        this.dataField = dataField;
        this.chartType = chartType;
        this.chartConfig = chartConfig;
        this.reportId = reportId;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

        public KpDimension(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.KEY</code>. 「key」- 维度主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.KEY</code>. 「key」- 维度主键
     */
    @Override
    public KpDimension setKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.NAME</code>. 「name」- 维度名称
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.NAME</code>. 「name」- 维度名称
     */
    @Override
    public KpDimension setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.CODE</code>. 「code」- 维度代码
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.CODE</code>. 「code」- 维度代码
     */
    @Override
    public KpDimension setCode(String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.TYPE</code>. 「type」- 维度类型
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.TYPE</code>. 「type」- 维度类型
     */
    @Override
    public KpDimension setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.STATUS</code>. 「status」- 维度状态
     */
    @Override
    public String getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.STATUS</code>. 「status」- 维度状态
     */
    @Override
    public KpDimension setStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.DATA_SET_ID</code>. 「dataSetId」- 数据源ID
     */
    @Override
    public String getDataSetId() {
        return this.dataSetId;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.DATA_SET_ID</code>. 「dataSetId」- 数据源ID
     */
    @Override
    public KpDimension setDataSetId(String dataSetId) {
        this.dataSetId = dataSetId;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.DATA_QUERY</code>. 「dataQuery」- 数据查询配置
     */
    @Override
    public String getDataQuery() {
        return this.dataQuery;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.DATA_QUERY</code>. 「dataQuery」- 数据查询配置
     */
    @Override
    public KpDimension setDataQuery(String dataQuery) {
        this.dataQuery = dataQuery;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.DATA_SORT</code>. 「dataSort」- 排序维度处理
     */
    @Override
    public String getDataSort() {
        return this.dataSort;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.DATA_SORT</code>. 「dataSort」- 排序维度处理
     */
    @Override
    public KpDimension setDataSort(String dataSort) {
        this.dataSort = dataSort;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.DATA_GROUP</code>. 「dataGroup」- 分组维度处理
     */
    @Override
    public String getDataGroup() {
        return this.dataGroup;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.DATA_GROUP</code>. 「dataGroup」- 分组维度处理
     */
    @Override
    public KpDimension setDataGroup(String dataGroup) {
        this.dataGroup = dataGroup;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.DATA_OUTPUT</code>. 「dataOutput」-
     * 输出专用配置
     */
    @Override
    public String getDataOutput() {
        return this.dataOutput;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.DATA_OUTPUT</code>. 「dataOutput」-
     * 输出专用配置
     */
    @Override
    public KpDimension setDataOutput(String dataOutput) {
        this.dataOutput = dataOutput;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.DATA_FIELD</code>. 「dataField」-
     * 当前报表对应字段
     */
    @Override
    public String getDataField() {
        return this.dataField;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.DATA_FIELD</code>. 「dataField」-
     * 当前报表对应字段
     */
    @Override
    public KpDimension setDataField(String dataField) {
        this.dataField = dataField;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.CHART_TYPE</code>. 「chartType」- 图表类型
     */
    @Override
    public String getChartType() {
        return this.chartType;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.CHART_TYPE</code>. 「chartType」- 图表类型
     */
    @Override
    public KpDimension setChartType(String chartType) {
        this.chartType = chartType;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.CHART_CONFIG</code>. 「chartConfig」-
     * 若当前报表是图表，则使用此配置
     */
    @Override
    public String getChartConfig() {
        return this.chartConfig;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.CHART_CONFIG</code>. 「chartConfig」-
     * 若当前报表是图表，则使用此配置
     */
    @Override
    public KpDimension setChartConfig(String chartConfig) {
        this.chartConfig = chartConfig;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.REPORT_ID</code>. 「reportId」- 关联报表ID
     */
    @Override
    public String getReportId() {
        return this.reportId;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.REPORT_ID</code>. 「reportId」- 关联报表ID
     */
    @Override
    public KpDimension setReportId(String reportId) {
        this.reportId = reportId;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public KpDimension setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public KpDimension setSigma(String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public KpDimension setMetadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public KpDimension setLanguage(String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public KpDimension setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public KpDimension setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public KpDimension setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DIMENSION.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>ZDB.KP_DIMENSION.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public KpDimension setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final KpDimension other = (KpDimension) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        }
        else if (!this.key.equals(other.key))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        }
        else if (!this.code.equals(other.code))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        if (this.dataSetId == null) {
            if (other.dataSetId != null)
                return false;
        }
        else if (!this.dataSetId.equals(other.dataSetId))
            return false;
        if (this.dataQuery == null) {
            if (other.dataQuery != null)
                return false;
        }
        else if (!this.dataQuery.equals(other.dataQuery))
            return false;
        if (this.dataSort == null) {
            if (other.dataSort != null)
                return false;
        }
        else if (!this.dataSort.equals(other.dataSort))
            return false;
        if (this.dataGroup == null) {
            if (other.dataGroup != null)
                return false;
        }
        else if (!this.dataGroup.equals(other.dataGroup))
            return false;
        if (this.dataOutput == null) {
            if (other.dataOutput != null)
                return false;
        }
        else if (!this.dataOutput.equals(other.dataOutput))
            return false;
        if (this.dataField == null) {
            if (other.dataField != null)
                return false;
        }
        else if (!this.dataField.equals(other.dataField))
            return false;
        if (this.chartType == null) {
            if (other.chartType != null)
                return false;
        }
        else if (!this.chartType.equals(other.chartType))
            return false;
        if (this.chartConfig == null) {
            if (other.chartConfig != null)
                return false;
        }
        else if (!this.chartConfig.equals(other.chartConfig))
            return false;
        if (this.reportId == null) {
            if (other.reportId != null)
                return false;
        }
        else if (!this.reportId.equals(other.reportId))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        }
        else if (!this.active.equals(other.active))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        }
        else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        }
        else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        }
        else if (!this.language.equals(other.language))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        }
        else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.dataSetId == null) ? 0 : this.dataSetId.hashCode());
        result = prime * result + ((this.dataQuery == null) ? 0 : this.dataQuery.hashCode());
        result = prime * result + ((this.dataSort == null) ? 0 : this.dataSort.hashCode());
        result = prime * result + ((this.dataGroup == null) ? 0 : this.dataGroup.hashCode());
        result = prime * result + ((this.dataOutput == null) ? 0 : this.dataOutput.hashCode());
        result = prime * result + ((this.dataField == null) ? 0 : this.dataField.hashCode());
        result = prime * result + ((this.chartType == null) ? 0 : this.chartType.hashCode());
        result = prime * result + ((this.chartConfig == null) ? 0 : this.chartConfig.hashCode());
        result = prime * result + ((this.reportId == null) ? 0 : this.reportId.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("KpDimension (");

        sb.append(key);
        sb.append(", ").append(name);
        sb.append(", ").append(code);
        sb.append(", ").append(type);
        sb.append(", ").append(status);
        sb.append(", ").append(dataSetId);
        sb.append(", ").append(dataQuery);
        sb.append(", ").append(dataSort);
        sb.append(", ").append(dataGroup);
        sb.append(", ").append(dataOutput);
        sb.append(", ").append(dataField);
        sb.append(", ").append(chartType);
        sb.append(", ").append(chartConfig);
        sb.append(", ").append(reportId);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IKpDimension from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setType(from.getType());
        setStatus(from.getStatus());
        setDataSetId(from.getDataSetId());
        setDataQuery(from.getDataQuery());
        setDataSort(from.getDataSort());
        setDataGroup(from.getDataGroup());
        setDataOutput(from.getDataOutput());
        setDataField(from.getDataField());
        setChartType(from.getChartType());
        setChartConfig(from.getChartConfig());
        setReportId(from.getReportId());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IKpDimension> E into(E into) {
        into.from(this);
        return into;
    }
}
