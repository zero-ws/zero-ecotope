/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.report.domain.tables.interfaces;


import io.r2mo.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;

import static io.r2mo.vertx.jooq.shared.internal.VertxPojo.setOrThrow;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public interface IKpDataSet extends VertxPojo, Serializable {

    /**
     * Setter for <code>ZDB.KP_DATA_SET.KEY</code>. 「key」- 数据源主键
     */
    public IKpDataSet setKey(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.KEY</code>. 「key」- 数据源主键
     */
    public String getKey();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.NAME</code>. 「name」- 数据源名称
     */
    public IKpDataSet setName(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.NAME</code>. 「name」- 数据源名称
     */
    public String getName();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.CODE</code>. 「code」- 数据源编码
     */
    public IKpDataSet setCode(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.CODE</code>. 「code」- 数据源编码
     */
    public String getCode();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.DATA_QUERY</code>. 「dataQuery」- 数据查询配置
     */
    public IKpDataSet setDataQuery(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.DATA_QUERY</code>. 「dataQuery」- 数据查询配置
     */
    public String getDataQuery();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.DATA_SOURCE</code>. 「dataSource」-
     * 基于什么内容做报表
     */
    public IKpDataSet setDataSource(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.DATA_SOURCE</code>. 「dataSource」-
     * 基于什么内容做报表
     */
    public String getDataSource();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.DATA_CONFIG</code>. 「dataConfig」-
     * 数据查询过程中的配置
     */
    public IKpDataSet setDataConfig(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.DATA_CONFIG</code>. 「dataConfig」-
     * 数据查询过程中的配置
     */
    public String getDataConfig();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.DATA_FIELD</code>. 「dataField」- 数据字段
     */
    public IKpDataSet setDataField(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.DATA_FIELD</code>. 「dataField」- 数据字段
     */
    public String getDataField();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.DATA_COMPONENT</code>. 「dataComponent」-
     * 数据查询组件
     */
    public IKpDataSet setDataComponent(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.DATA_COMPONENT</code>. 「dataComponent」-
     * 数据查询组件
     */
    public String getDataComponent();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.TYPE</code>. 「type」- 数据源类型
     */
    public IKpDataSet setType(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.TYPE</code>. 「type」- 数据源类型
     */
    public String getType();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.STATUS</code>. 「status」- 数据源状态
     */
    public IKpDataSet setStatus(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.STATUS</code>. 「status」- 数据源状态
     */
    public String getStatus();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.SOURCE_ID</code>. 「sourceId」- 额外数据源
     */
    public IKpDataSet setSourceId(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.SOURCE_ID</code>. 「sourceId」- 额外数据源
     */
    public String getSourceId();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.SOURCE_CONFIG</code>. 「sourceConfig」-
     * 数据源相关配置
     */
    public IKpDataSet setSourceConfig(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.SOURCE_CONFIG</code>. 「sourceConfig」-
     * 数据源相关配置
     */
    public String getSourceConfig();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.APP_ID</code>. 「id」- 应用数据
     */
    public IKpDataSet setAppId(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.APP_ID</code>. 「id」- 应用数据
     */
    public String getAppId();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.ACTIVE</code>. 「active」- 是否启用
     */
    public IKpDataSet setActive(Boolean value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.ACTIVE</code>. 「active」- 是否启用
     */
    public Boolean getActive();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.SIGMA</code>. 「sigma」- 统一标识
     */
    public IKpDataSet setSigma(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.SIGMA</code>. 「sigma」- 统一标识
     */
    public String getSigma();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.METADATA</code>. 「metadata」- 附加配置
     */
    public IKpDataSet setMetadata(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.METADATA</code>. 「metadata」- 附加配置
     */
    public String getMetadata();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.LANGUAGE</code>. 「language」- 使用的语言
     */
    public IKpDataSet setLanguage(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.LANGUAGE</code>. 「language」- 使用的语言
     */
    public String getLanguage();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public IKpDataSet setCreatedAt(LocalDateTime value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public LocalDateTime getCreatedAt();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public IKpDataSet setCreatedBy(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public String getCreatedBy();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public IKpDataSet setUpdatedAt(LocalDateTime value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public LocalDateTime getUpdatedAt();

    /**
     * Setter for <code>ZDB.KP_DATA_SET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public IKpDataSet setUpdatedBy(String value);

    /**
     * Getter for <code>ZDB.KP_DATA_SET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public String getUpdatedBy();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common
     * interface IKpDataSet
     */
    public void from(IKpDataSet from);

    /**
     * Copy data into another generated Record/POJO implementing the common
     * interface IKpDataSet
     */
    public <E extends IKpDataSet> E into(E into);

    @Override
    public default IKpDataSet fromJson(final io.vertx.core.json.JsonObject json) {
        setOrThrow(this::setKey, json::getString, "KEY", "java.lang.String");
        setOrThrow(this::setName, json::getString, "NAME", "java.lang.String");
        setOrThrow(this::setCode, json::getString, "CODE", "java.lang.String");
        setOrThrow(this::setDataQuery, json::getString, "DATA_QUERY", "java.lang.String");
        setOrThrow(this::setDataSource, json::getString, "DATA_SOURCE", "java.lang.String");
        setOrThrow(this::setDataConfig, json::getString, "DATA_CONFIG", "java.lang.String");
        setOrThrow(this::setDataField, json::getString, "DATA_FIELD", "java.lang.String");
        setOrThrow(this::setDataComponent, json::getString, "DATA_COMPONENT", "java.lang.String");
        setOrThrow(this::setType, json::getString, "TYPE", "java.lang.String");
        setOrThrow(this::setStatus, json::getString, "STATUS", "java.lang.String");
        setOrThrow(this::setSourceId, json::getString, "SOURCE_ID", "java.lang.String");
        setOrThrow(this::setSourceConfig, json::getString, "SOURCE_CONFIG", "java.lang.String");
        setOrThrow(this::setAppId, json::getString, "APP_ID", "java.lang.String");
        setOrThrow(this::setActive, json::getBoolean, "ACTIVE", "java.lang.Boolean");
        setOrThrow(this::setSigma, json::getString, "SIGMA", "java.lang.String");
        setOrThrow(this::setMetadata, json::getString, "METADATA", "java.lang.String");
        setOrThrow(this::setLanguage, json::getString, "LANGUAGE", "java.lang.String");
        setOrThrow(this::setCreatedAt, key -> {
            final String s = json.getString(key);
            return s == null ? null : java.time.LocalDateTime.parse(s);
        }, "CREATED_AT", "java.time.LocalDateTime");
        setOrThrow(this::setCreatedBy, json::getString, "CREATED_BY", "java.lang.String");
        setOrThrow(this::setUpdatedAt, key -> {
            final String s = json.getString(key);
            return s == null ? null : java.time.LocalDateTime.parse(s);
        }, "UPDATED_AT", "java.time.LocalDateTime");
        setOrThrow(this::setUpdatedBy, json::getString, "UPDATED_BY", "java.lang.String");
        return this;
    }


    @Override
    public default io.vertx.core.json.JsonObject toJson() {
        final io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("KEY", getKey());
        json.put("NAME", getName());
        json.put("CODE", getCode());
        json.put("DATA_QUERY", getDataQuery());
        json.put("DATA_SOURCE", getDataSource());
        json.put("DATA_CONFIG", getDataConfig());
        json.put("DATA_FIELD", getDataField());
        json.put("DATA_COMPONENT", getDataComponent());
        json.put("TYPE", getType());
        json.put("STATUS", getStatus());
        json.put("SOURCE_ID", getSourceId());
        json.put("SOURCE_CONFIG", getSourceConfig());
        json.put("APP_ID", getAppId());
        json.put("ACTIVE", getActive());
        json.put("SIGMA", getSigma());
        json.put("METADATA", getMetadata());
        json.put("LANGUAGE", getLanguage());
        json.put("CREATED_AT", getCreatedAt() == null ? null : getCreatedAt().toString());
        json.put("CREATED_BY", getCreatedBy());
        json.put("UPDATED_AT", getUpdatedAt() == null ? null : getUpdatedAt().toString());
        json.put("UPDATED_BY", getUpdatedBy());
        return json;
    }

}
