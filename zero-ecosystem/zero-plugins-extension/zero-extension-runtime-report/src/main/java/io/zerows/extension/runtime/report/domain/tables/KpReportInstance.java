/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.report.domain.tables;


import io.zerows.extension.runtime.report.domain.Keys;
import io.zerows.extension.runtime.report.domain.Zdb;
import io.zerows.extension.runtime.report.domain.tables.records.KpReportInstanceRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KpReportInstance extends TableImpl<KpReportInstanceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.KP_REPORT_INSTANCE</code>
     */
    public static final KpReportInstance KP_REPORT_INSTANCE = new KpReportInstance();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KpReportInstanceRecord> getRecordType() {
        return KpReportInstanceRecord.class;
    }

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.KEY</code>. 「key」- 报表主键
     */
    public final TableField<KpReportInstanceRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 报表主键");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.NAME</code>. 「name」- 报表名称
     */
    public final TableField<KpReportInstanceRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 报表名称");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.STATUS</code>. 「status」- 报表状态
     */
    public final TableField<KpReportInstanceRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(255), this, "「status」- 报表状态");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.TYPE</code>. 「type」- 报表类型
     */
    public final TableField<KpReportInstanceRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(255), this, "「type」- 报表类型");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.TITLE</code>. 「title」- 报表标题
     */
    public final TableField<KpReportInstanceRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(255), this, "「title」- 报表标题");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.SUBTITLE</code>. 「subtitle」- 副标题
     */
    public final TableField<KpReportInstanceRecord, String> SUBTITLE = createField(DSL.name("SUBTITLE"), SQLDataType.VARCHAR(255), this, "「subtitle」- 副标题");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.EXTRA</code>. 「extra」- 额外信息
     */
    public final TableField<KpReportInstanceRecord, String> EXTRA = createField(DSL.name("EXTRA"), SQLDataType.VARCHAR(255), this, "「extra」- 额外信息");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.DESCRIPTION</code>.
     * 「description」- 报表描述
     */
    public final TableField<KpReportInstanceRecord, String> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.CLOB, this, "「description」- 报表描述");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.MODE_EXPR</code>. 「modeExpr」-
     * 表达式（和 type 绑定）
     */
    public final TableField<KpReportInstanceRecord, String> MODE_EXPR = createField(DSL.name("MODE_EXPR"), SQLDataType.VARCHAR(255), this, "「modeExpr」- 表达式（和 type 绑定）");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.REPORT_ID</code>. 「reportId」-
     * 关联报表ID
     */
    public final TableField<KpReportInstanceRecord, String> REPORT_ID = createField(DSL.name("REPORT_ID"), SQLDataType.VARCHAR(36), this, "「reportId」- 关联报表ID");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.REPORT_CONTENT</code>.
     * 「reportContent」- 报表内容
     */
    public final TableField<KpReportInstanceRecord, String> REPORT_CONTENT = createField(DSL.name("REPORT_CONTENT"), SQLDataType.CLOB, this, "「reportContent」- 报表内容");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.REPORT_DATA</code>. 「reportData」-
     * 报表最终数据
     */
    public final TableField<KpReportInstanceRecord, String> REPORT_DATA = createField(DSL.name("REPORT_DATA"), SQLDataType.CLOB, this, "「reportData」- 报表最终数据");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.REPORT_BY</code>. 「reportBy」- 报表人
     */
    public final TableField<KpReportInstanceRecord, String> REPORT_BY = createField(DSL.name("REPORT_BY"), SQLDataType.VARCHAR(36), this, "「reportBy」- 报表人");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.REPORT_AT</code>. 「reportAt」-
     * 报表生成时间
     */
    public final TableField<KpReportInstanceRecord, LocalDateTime> REPORT_AT = createField(DSL.name("REPORT_AT"), SQLDataType.LOCALDATETIME(0), this, "「reportAt」- 报表生成时间");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.REF_TYPE</code>. 「refType」- 关联类型
     */
    public final TableField<KpReportInstanceRecord, String> REF_TYPE = createField(DSL.name("REF_TYPE"), SQLDataType.VARCHAR(255), this, "「refType」- 关联类型");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.REF_ID</code>. 「refId」- 关联ID
     */
    public final TableField<KpReportInstanceRecord, String> REF_ID = createField(DSL.name("REF_ID"), SQLDataType.VARCHAR(36), this, "「refId」- 关联ID");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<KpReportInstanceRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<KpReportInstanceRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<KpReportInstanceRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.LANGUAGE</code>. 「language」-
     * 使用的语言
     */
    public final TableField<KpReportInstanceRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.CREATED_AT</code>. 「createdAt」-
     * 创建时间
     */
    public final TableField<KpReportInstanceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.CREATED_BY</code>. 「createdBy」-
     * 创建人
     */
    public final TableField<KpReportInstanceRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.UPDATED_AT</code>. 「updatedAt」-
     * 更新时间
     */
    public final TableField<KpReportInstanceRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");

    /**
     * The column <code>ZDB.KP_REPORT_INSTANCE.UPDATED_BY</code>. 「updatedBy」-
     * 更新人
     */
    public final TableField<KpReportInstanceRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private KpReportInstance(Name alias, Table<KpReportInstanceRecord> aliased) {
        this(alias, aliased, null);
    }

    private KpReportInstance(Name alias, Table<KpReportInstanceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.KP_REPORT_INSTANCE</code> table reference
     */
    public KpReportInstance(String alias) {
        this(DSL.name(alias), KP_REPORT_INSTANCE);
    }

    /**
     * Create an aliased <code>ZDB.KP_REPORT_INSTANCE</code> table reference
     */
    public KpReportInstance(Name alias) {
        this(alias, KP_REPORT_INSTANCE);
    }

    /**
     * Create a <code>ZDB.KP_REPORT_INSTANCE</code> table reference
     */
    public KpReportInstance() {
        this(DSL.name("KP_REPORT_INSTANCE"), null);
    }

    public <O extends Record> KpReportInstance(Table<O> child, ForeignKey<O, KpReportInstanceRecord> key) {
        super(child, key, KP_REPORT_INSTANCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<KpReportInstanceRecord> getPrimaryKey() {
        return Keys.KEY_KP_REPORT_INSTANCE_PRIMARY;
    }

    @Override
    public List<UniqueKey<KpReportInstanceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_KP_REPORT_INSTANCE_REPORT_ID);
    }

    @Override
    public KpReportInstance as(String alias) {
        return new KpReportInstance(DSL.name(alias), this);
    }

    @Override
    public KpReportInstance as(Name alias) {
        return new KpReportInstance(alias, this);
    }

    @Override
    public KpReportInstance as(Table<?> alias) {
        return new KpReportInstance(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public KpReportInstance rename(String name) {
        return new KpReportInstance(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KpReportInstance rename(Name name) {
        return new KpReportInstance(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public KpReportInstance rename(Table<?> name) {
        return new KpReportInstance(name.getQualifiedName(), null);
    }
}
