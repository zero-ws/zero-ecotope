/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.report.domain.tables.pojos;


import io.r2mo.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.runtime.report.domain.tables.interfaces.IKpDataSet;

import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class KpDataSet implements VertxPojo, IKpDataSet {

    private static final long serialVersionUID = 1L;

    private String key;
    private String name;
    private String code;
    private String dataQuery;
    private String dataSource;
    private String dataConfig;
    private String dataField;
    private String dataComponent;
    private String type;
    private String status;
    private String sourceId;
    private String sourceConfig;
    private String appId;
    private Boolean active;
    private String sigma;
    private String metadata;
    private String language;
    private LocalDateTime createdAt;
    private String createdBy;
    private LocalDateTime updatedAt;
    private String updatedBy;

    public KpDataSet() {
    }

    public KpDataSet(final IKpDataSet value) {
        this.key = value.getKey();
        this.name = value.getName();
        this.code = value.getCode();
        this.dataQuery = value.getDataQuery();
        this.dataSource = value.getDataSource();
        this.dataConfig = value.getDataConfig();
        this.dataField = value.getDataField();
        this.dataComponent = value.getDataComponent();
        this.type = value.getType();
        this.status = value.getStatus();
        this.sourceId = value.getSourceId();
        this.sourceConfig = value.getSourceConfig();
        this.appId = value.getAppId();
        this.active = value.getActive();
        this.sigma = value.getSigma();
        this.metadata = value.getMetadata();
        this.language = value.getLanguage();
        this.createdAt = value.getCreatedAt();
        this.createdBy = value.getCreatedBy();
        this.updatedAt = value.getUpdatedAt();
        this.updatedBy = value.getUpdatedBy();
    }

    public KpDataSet(
        final String key,
        final String name,
        final String code,
        final String dataQuery,
        final String dataSource,
        final String dataConfig,
        final String dataField,
        final String dataComponent,
        final String type,
        final String status,
        final String sourceId,
        final String sourceConfig,
        final String appId,
        final Boolean active,
        final String sigma,
        final String metadata,
        final String language,
        final LocalDateTime createdAt,
        final String createdBy,
        final LocalDateTime updatedAt,
        final String updatedBy
    ) {
        this.key = key;
        this.name = name;
        this.code = code;
        this.dataQuery = dataQuery;
        this.dataSource = dataSource;
        this.dataConfig = dataConfig;
        this.dataField = dataField;
        this.dataComponent = dataComponent;
        this.type = type;
        this.status = status;
        this.sourceId = sourceId;
        this.sourceConfig = sourceConfig;
        this.appId = appId;
        this.active = active;
        this.sigma = sigma;
        this.metadata = metadata;
        this.language = language;
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

    public KpDataSet(final io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.KEY</code>. 「key」- 数据源主键
     */
    @Override
    public String getKey() {
        return this.key;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.KEY</code>. 「key」- 数据源主键
     */
    @Override
    public KpDataSet setKey(final String key) {
        this.key = key;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.NAME</code>. 「name」- 数据源名称
     */
    @Override
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.NAME</code>. 「name」- 数据源名称
     */
    @Override
    public KpDataSet setName(final String name) {
        this.name = name;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.CODE</code>. 「code」- 数据源编码
     */
    @Override
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.CODE</code>. 「code」- 数据源编码
     */
    @Override
    public KpDataSet setCode(final String code) {
        this.code = code;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.DATA_QUERY</code>. 「dataQuery」- 数据查询配置
     */
    @Override
    public String getDataQuery() {
        return this.dataQuery;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.DATA_QUERY</code>. 「dataQuery」- 数据查询配置
     */
    @Override
    public KpDataSet setDataQuery(final String dataQuery) {
        this.dataQuery = dataQuery;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.DATA_SOURCE</code>. 「dataSource」-
     * 基于什么内容做报表
     */
    @Override
    public String getDataSource() {
        return this.dataSource;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.DATA_SOURCE</code>. 「dataSource」-
     * 基于什么内容做报表
     */
    @Override
    public KpDataSet setDataSource(final String dataSource) {
        this.dataSource = dataSource;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.DATA_CONFIG</code>. 「dataConfig」-
     * 数据查询过程中的配置
     */
    @Override
    public String getDataConfig() {
        return this.dataConfig;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.DATA_CONFIG</code>. 「dataConfig」-
     * 数据查询过程中的配置
     */
    @Override
    public KpDataSet setDataConfig(final String dataConfig) {
        this.dataConfig = dataConfig;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.DATA_FIELD</code>. 「dataField」- 数据字段
     */
    @Override
    public String getDataField() {
        return this.dataField;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.DATA_FIELD</code>. 「dataField」- 数据字段
     */
    @Override
    public KpDataSet setDataField(final String dataField) {
        this.dataField = dataField;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.DATA_COMPONENT</code>. 「dataComponent」-
     * 数据查询组件
     */
    @Override
    public String getDataComponent() {
        return this.dataComponent;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.DATA_COMPONENT</code>. 「dataComponent」-
     * 数据查询组件
     */
    @Override
    public KpDataSet setDataComponent(final String dataComponent) {
        this.dataComponent = dataComponent;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.TYPE</code>. 「type」- 数据源类型
     */
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.TYPE</code>. 「type」- 数据源类型
     */
    @Override
    public KpDataSet setType(final String type) {
        this.type = type;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.STATUS</code>. 「status」- 数据源状态
     */
    @Override
    public String getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.STATUS</code>. 「status」- 数据源状态
     */
    @Override
    public KpDataSet setStatus(final String status) {
        this.status = status;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.SOURCE_ID</code>. 「sourceId」- 额外数据源
     */
    @Override
    public String getSourceId() {
        return this.sourceId;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.SOURCE_ID</code>. 「sourceId」- 额外数据源
     */
    @Override
    public KpDataSet setSourceId(final String sourceId) {
        this.sourceId = sourceId;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.SOURCE_CONFIG</code>. 「sourceConfig」-
     * 数据源相关配置
     */
    @Override
    public String getSourceConfig() {
        return this.sourceConfig;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.SOURCE_CONFIG</code>. 「sourceConfig」-
     * 数据源相关配置
     */
    @Override
    public KpDataSet setSourceConfig(final String sourceConfig) {
        this.sourceConfig = sourceConfig;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.APP_ID</code>. 「id」- 应用数据
     */
    @Override
    public String getAppId() {
        return this.appId;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.APP_ID</code>. 「id」- 应用数据
     */
    @Override
    public KpDataSet setAppId(final String appId) {
        this.appId = appId;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public KpDataSet setActive(final Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return this.sigma;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public KpDataSet setSigma(final String sigma) {
        this.sigma = sigma;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public String getMetadata() {
        return this.metadata;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.METADATA</code>. 「metadata」- 附加配置
     */
    @Override
    public KpDataSet setMetadata(final String metadata) {
        this.metadata = metadata;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return this.language;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public KpDataSet setLanguage(final String language) {
        this.language = language;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public KpDataSet setCreatedAt(final LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public KpDataSet setCreatedBy(final String createdBy) {
        this.createdBy = createdBy;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public KpDataSet setUpdatedAt(final LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Getter for <code>ZDB.KP_DATA_SET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return this.updatedBy;
    }

    /**
     * Setter for <code>ZDB.KP_DATA_SET.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public KpDataSet setUpdatedBy(final String updatedBy) {
        this.updatedBy = updatedBy;
        return this;
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final KpDataSet other = (KpDataSet) obj;
        if (this.key == null) {
            if (other.key != null)
                return false;
        } else if (!this.key.equals(other.key))
            return false;
        if (this.name == null) {
            if (other.name != null)
                return false;
        } else if (!this.name.equals(other.name))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        } else if (!this.code.equals(other.code))
            return false;
        if (this.dataQuery == null) {
            if (other.dataQuery != null)
                return false;
        } else if (!this.dataQuery.equals(other.dataQuery))
            return false;
        if (this.dataSource == null) {
            if (other.dataSource != null)
                return false;
        } else if (!this.dataSource.equals(other.dataSource))
            return false;
        if (this.dataConfig == null) {
            if (other.dataConfig != null)
                return false;
        } else if (!this.dataConfig.equals(other.dataConfig))
            return false;
        if (this.dataField == null) {
            if (other.dataField != null)
                return false;
        } else if (!this.dataField.equals(other.dataField))
            return false;
        if (this.dataComponent == null) {
            if (other.dataComponent != null)
                return false;
        } else if (!this.dataComponent.equals(other.dataComponent))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        } else if (!this.type.equals(other.type))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        } else if (!this.status.equals(other.status))
            return false;
        if (this.sourceId == null) {
            if (other.sourceId != null)
                return false;
        } else if (!this.sourceId.equals(other.sourceId))
            return false;
        if (this.sourceConfig == null) {
            if (other.sourceConfig != null)
                return false;
        } else if (!this.sourceConfig.equals(other.sourceConfig))
            return false;
        if (this.appId == null) {
            if (other.appId != null)
                return false;
        } else if (!this.appId.equals(other.appId))
            return false;
        if (this.active == null) {
            if (other.active != null)
                return false;
        } else if (!this.active.equals(other.active))
            return false;
        if (this.sigma == null) {
            if (other.sigma != null)
                return false;
        } else if (!this.sigma.equals(other.sigma))
            return false;
        if (this.metadata == null) {
            if (other.metadata != null)
                return false;
        } else if (!this.metadata.equals(other.metadata))
            return false;
        if (this.language == null) {
            if (other.language != null)
                return false;
        } else if (!this.language.equals(other.language))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        } else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        } else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        } else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.updatedBy == null) {
            if (other.updatedBy != null)
                return false;
        } else if (!this.updatedBy.equals(other.updatedBy))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.key == null) ? 0 : this.key.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.dataQuery == null) ? 0 : this.dataQuery.hashCode());
        result = prime * result + ((this.dataSource == null) ? 0 : this.dataSource.hashCode());
        result = prime * result + ((this.dataConfig == null) ? 0 : this.dataConfig.hashCode());
        result = prime * result + ((this.dataField == null) ? 0 : this.dataField.hashCode());
        result = prime * result + ((this.dataComponent == null) ? 0 : this.dataComponent.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.sourceId == null) ? 0 : this.sourceId.hashCode());
        result = prime * result + ((this.sourceConfig == null) ? 0 : this.sourceConfig.hashCode());
        result = prime * result + ((this.appId == null) ? 0 : this.appId.hashCode());
        result = prime * result + ((this.active == null) ? 0 : this.active.hashCode());
        result = prime * result + ((this.sigma == null) ? 0 : this.sigma.hashCode());
        result = prime * result + ((this.metadata == null) ? 0 : this.metadata.hashCode());
        result = prime * result + ((this.language == null) ? 0 : this.language.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.updatedBy == null) ? 0 : this.updatedBy.hashCode());
        return result;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("KpDataSet (");

        sb.append(key);
        sb.append(", ").append(name);
        sb.append(", ").append(code);
        sb.append(", ").append(dataQuery);
        sb.append(", ").append(dataSource);
        sb.append(", ").append(dataConfig);
        sb.append(", ").append(dataField);
        sb.append(", ").append(dataComponent);
        sb.append(", ").append(type);
        sb.append(", ").append(status);
        sb.append(", ").append(sourceId);
        sb.append(", ").append(sourceConfig);
        sb.append(", ").append(appId);
        sb.append(", ").append(active);
        sb.append(", ").append(sigma);
        sb.append(", ").append(metadata);
        sb.append(", ").append(language);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(updatedBy);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(final IKpDataSet from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setDataQuery(from.getDataQuery());
        setDataSource(from.getDataSource());
        setDataConfig(from.getDataConfig());
        setDataField(from.getDataField());
        setDataComponent(from.getDataComponent());
        setType(from.getType());
        setStatus(from.getStatus());
        setSourceId(from.getSourceId());
        setSourceConfig(from.getSourceConfig());
        setAppId(from.getAppId());
        setActive(from.getActive());
        setSigma(from.getSigma());
        setMetadata(from.getMetadata());
        setLanguage(from.getLanguage());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
    }

    @Override
    public <E extends IKpDataSet> E into(final E into) {
        into.from(this);
        return into;
    }
}
