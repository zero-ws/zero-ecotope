/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.report.domain.tables;


import io.zerows.extension.runtime.report.domain.Keys;
import io.zerows.extension.runtime.report.domain.Zdb;
import io.zerows.extension.runtime.report.domain.tables.records.KpReportRecord;
import org.jooq.*;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KpReport extends TableImpl<KpReportRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.KP_REPORT</code>
     */
    public static final KpReport KP_REPORT = new KpReport();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KpReportRecord> getRecordType() {
        return KpReportRecord.class;
    }

    /**
     * The column <code>ZDB.KP_REPORT.KEY</code>. 「key」- 报表主键
     */
    public final TableField<KpReportRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 报表主键");

    /**
     * The column <code>ZDB.KP_REPORT.NAME</code>. 「name」- 表表名称
     */
    public final TableField<KpReportRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」- 表表名称");

    /**
     * The column <code>ZDB.KP_REPORT.CODE</code>. 「code」- 报表编码
     */
    public final TableField<KpReportRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(36), this, "「code」- 报表编码");

    /**
     * The column <code>ZDB.KP_REPORT.STATUS</code>. 「status」- 报表状态
     */
    public final TableField<KpReportRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(255), this, "「status」- 报表状态");

    /**
     * The column <code>ZDB.KP_REPORT.TITLE</code>. 「title」- 报表标题
     */
    public final TableField<KpReportRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.VARCHAR(255), this, "「title」- 报表标题");

    /**
     * The column <code>ZDB.KP_REPORT.REPORT_PARAM</code>. 「reportParam」- 报表参数配置
     */
    public final TableField<KpReportRecord, String> REPORT_PARAM = createField(DSL.name("REPORT_PARAM"), SQLDataType.CLOB, this, "「reportParam」- 报表参数配置");

    /**
     * The column <code>ZDB.KP_REPORT.REPORT_CONFIG</code>. 「reportConfig」-
     * 主表基础配置
     */
    public final TableField<KpReportRecord, String> REPORT_CONFIG = createField(DSL.name("REPORT_CONFIG"), SQLDataType.CLOB, this, "「reportConfig」- 主表基础配置");

    /**
     * The column <code>ZDB.KP_REPORT.REPORT_BY</code>. 「reportBy」- 模板创建人
     */
    public final TableField<KpReportRecord, String> REPORT_BY = createField(DSL.name("REPORT_BY"), SQLDataType.VARCHAR(36), this, "「reportBy」- 模板创建人");

    /**
     * The column <code>ZDB.KP_REPORT.REPORT_AT</code>. 「reportAt」- 模板创建时间
     */
    public final TableField<KpReportRecord, LocalDateTime> REPORT_AT = createField(DSL.name("REPORT_AT"), SQLDataType.LOCALDATETIME(0), this, "「reportAt」- 模板创建时间");

    /**
     * The column <code>ZDB.KP_REPORT.DATA_SET_ID</code>. 「dataSetId」- 数据源ID
     */
    public final TableField<KpReportRecord, String> DATA_SET_ID = createField(DSL.name("DATA_SET_ID"), SQLDataType.VARCHAR(36), this, "「dataSetId」- 数据源ID");

    /**
     * The column <code>ZDB.KP_REPORT.DATA_TPL_ID</code>. 「dataTplId」- 关联报表模板
     */
    public final TableField<KpReportRecord, String> DATA_TPL_ID = createField(DSL.name("DATA_TPL_ID"), SQLDataType.VARCHAR(36), this, "「dataTplId」- 关联报表模板");

    /**
     * The column <code>ZDB.KP_REPORT.APP_ID</code>. 「appId」- 应用数据
     */
    public final TableField<KpReportRecord, String> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.VARCHAR(36), this, "「appId」- 应用数据");

    /**
     * The column <code>ZDB.KP_REPORT.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<KpReportRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>ZDB.KP_REPORT.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<KpReportRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");

    /**
     * The column <code>ZDB.KP_REPORT.METADATA</code>. 「metadata」- 附加配置
     */
    public final TableField<KpReportRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置");

    /**
     * The column <code>ZDB.KP_REPORT.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<KpReportRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(8), this, "「language」- 使用的语言");

    /**
     * The column <code>ZDB.KP_REPORT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<KpReportRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");

    /**
     * The column <code>ZDB.KP_REPORT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<KpReportRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");

    /**
     * The column <code>ZDB.KP_REPORT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<KpReportRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");

    /**
     * The column <code>ZDB.KP_REPORT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<KpReportRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private KpReport(Name alias, Table<KpReportRecord> aliased) {
        this(alias, aliased, null);
    }

    private KpReport(Name alias, Table<KpReportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.KP_REPORT</code> table reference
     */
    public KpReport(String alias) {
        this(DSL.name(alias), KP_REPORT);
    }

    /**
     * Create an aliased <code>ZDB.KP_REPORT</code> table reference
     */
    public KpReport(Name alias) {
        this(alias, KP_REPORT);
    }

    /**
     * Create a <code>ZDB.KP_REPORT</code> table reference
     */
    public KpReport() {
        this(DSL.name("KP_REPORT"), null);
    }

    public <O extends Record> KpReport(Table<O> child, ForeignKey<O, KpReportRecord> key) {
        super(child, key, KP_REPORT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public UniqueKey<KpReportRecord> getPrimaryKey() {
        return Keys.KEY_KP_REPORT_PRIMARY;
    }

    @Override
    public List<UniqueKey<KpReportRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_KP_REPORT_NAME, Keys.KEY_KP_REPORT_CODE);
    }

    @Override
    public KpReport as(String alias) {
        return new KpReport(DSL.name(alias), this);
    }

    @Override
    public KpReport as(Name alias) {
        return new KpReport(alias, this);
    }

    @Override
    public KpReport as(Table<?> alias) {
        return new KpReport(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public KpReport rename(String name) {
        return new KpReport(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KpReport rename(Name name) {
        return new KpReport(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public KpReport rename(Table<?> name) {
        return new KpReport(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row20 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row20<String, String, String, String, String, String, String, String, LocalDateTime, String, String, String, Boolean, String, String, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row20) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function20<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function20<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
