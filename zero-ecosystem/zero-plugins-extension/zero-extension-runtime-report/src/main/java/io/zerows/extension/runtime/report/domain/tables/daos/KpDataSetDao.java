/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.runtime.report.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.runtime.report.domain.tables.KpDataSet;
import io.zerows.extension.runtime.report.domain.tables.records.KpDataSetRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class KpDataSetDao extends AbstractVertxDAO<KpDataSetRecord, io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet, String, Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>>, Future<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<KpDataSetRecord, io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public KpDataSetDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(KpDataSet.KP_DATA_SET, io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet.class, new JDBCClassicQueryExecutor<KpDataSetRecord, io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet, String>(configuration, io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByName(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>DATA_QUERY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByDataQuery(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.DATA_QUERY.in(values));
    }

    /**
     * Find records that have <code>DATA_QUERY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByDataQuery(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.DATA_QUERY.in(values), limit);
    }

    /**
     * Find records that have <code>DATA_SOURCE IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByDataSource(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.DATA_SOURCE.in(values));
    }

    /**
     * Find records that have <code>DATA_SOURCE IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByDataSource(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.DATA_SOURCE.in(values), limit);
    }

    /**
     * Find records that have <code>DATA_CONFIG IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByDataConfig(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.DATA_CONFIG.in(values));
    }

    /**
     * Find records that have <code>DATA_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByDataConfig(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.DATA_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>DATA_FIELD IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByDataField(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.DATA_FIELD.in(values));
    }

    /**
     * Find records that have <code>DATA_FIELD IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByDataField(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.DATA_FIELD.in(values), limit);
    }

    /**
     * Find records that have <code>DATA_COMPONENT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByDataComponent(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.DATA_COMPONENT.in(values));
    }

    /**
     * Find records that have <code>DATA_COMPONENT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByDataComponent(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.DATA_COMPONENT.in(values), limit);
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByType(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.TYPE.in(values));
    }

    /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByType(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.TYPE.in(values), limit);
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByStatus(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.STATUS.in(values));
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByStatus(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.STATUS.in(values), limit);
    }

    /**
     * Find records that have <code>SOURCE_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyBySourceId(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.SOURCE_ID.in(values));
    }

    /**
     * Find records that have <code>SOURCE_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyBySourceId(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.SOURCE_ID.in(values), limit);
    }

    /**
     * Find records that have <code>SOURCE_CONFIG IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyBySourceConfig(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.SOURCE_CONFIG.in(values));
    }

    /**
     * Find records that have <code>SOURCE_CONFIG IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyBySourceConfig(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.SOURCE_CONFIG.in(values), limit);
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByAppId(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.APP_ID.in(values));
    }

    /**
     * Find records that have <code>APP_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByAppId(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.APP_ID.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(KpDataSet.KP_DATA_SET.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<KpDataSetRecord, io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<KpDataSetRecord, io.zerows.extension.runtime.report.domain.tables.pojos.KpDataSet, String>) super.queryExecutor();
    }
}
