/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.finance.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.commerce.finance.domain.tables.FCurrency;
import io.zerows.extension.commerce.finance.domain.tables.records.FCurrencyRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FCurrencyDao extends AbstractVertxDAO<FCurrencyRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency, String, Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>>, Future<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<FCurrencyRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public FCurrencyDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(FCurrency.F_CURRENCY, io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency.class, new JDBCClassicQueryExecutor<FCurrencyRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency, String>(configuration, io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByName(final Collection<String> values) {
        return findManyByCondition(FCurrency.F_CURRENCY.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(FCurrency.F_CURRENCY.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(FCurrency.F_CURRENCY.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(FCurrency.F_CURRENCY.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByComment(final Collection<String> values) {
        return findManyByCondition(FCurrency.F_CURRENCY.COMMENT.in(values));
    }

    /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByComment(final Collection<String> values, final int limit) {
        return findManyByCondition(FCurrency.F_CURRENCY.COMMENT.in(values), limit);
    }

    /**
     * Find records that have <code>DIGIT_AMOUNT IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByDigitAmount(final Collection<Integer> values) {
        return findManyByCondition(FCurrency.F_CURRENCY.DIGIT_AMOUNT.in(values));
    }

    /**
     * Find records that have <code>DIGIT_AMOUNT IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByDigitAmount(final Collection<Integer> values, final int limit) {
        return findManyByCondition(FCurrency.F_CURRENCY.DIGIT_AMOUNT.in(values), limit);
    }

    /**
     * Find records that have <code>DIGIT_PRICE IN (values)</code>
     * asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByDigitPrice(final Collection<Integer> values) {
        return findManyByCondition(FCurrency.F_CURRENCY.DIGIT_PRICE.in(values));
    }

    /**
     * Find records that have <code>DIGIT_PRICE IN (values)</code>
     * asynchronously limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByDigitPrice(final Collection<Integer> values, final int limit) {
        return findManyByCondition(FCurrency.F_CURRENCY.DIGIT_PRICE.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(FCurrency.F_CURRENCY.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(FCurrency.F_CURRENCY.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(FCurrency.F_CURRENCY.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(FCurrency.F_CURRENCY.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(FCurrency.F_CURRENCY.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(FCurrency.F_CURRENCY.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(FCurrency.F_CURRENCY.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(FCurrency.F_CURRENCY.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(FCurrency.F_CURRENCY.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(FCurrency.F_CURRENCY.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(FCurrency.F_CURRENCY.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(FCurrency.F_CURRENCY.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(FCurrency.F_CURRENCY.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(FCurrency.F_CURRENCY.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(FCurrency.F_CURRENCY.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(FCurrency.F_CURRENCY.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<FCurrencyRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<FCurrencyRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FCurrency, String>) super.queryExecutor();
    }
}
