/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.finance.domain.tables.records;


import io.r2mo.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.finance.domain.tables.FTrans;
import io.zerows.extension.commerce.finance.domain.tables.interfaces.IFTrans;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FTransRecord extends UpdatableRecordImpl<FTransRecord> implements VertxPojo, IFTrans {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ZDB.F_TRANS.KEY</code>. 「key」- 交易单主键ID
     */
    @Override
    public FTransRecord setKey(final String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.KEY</code>. 「key」- 交易单主键ID
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.NAME</code>. 「name」 - 交易单标题
     */
    @Override
    public FTransRecord setName(final String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.NAME</code>. 「name」 - 交易单标题
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.CODE</code>. 「code」 - 交易单编号
     */
    @Override
    public FTransRecord setCode(final String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.CODE</code>. 「code」 - 交易单编号
     */
    @Override
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.SERIAL</code>. 「serial」 - 交易单据号
     */
    @Override
    public FTransRecord setSerial(final String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.SERIAL</code>. 「serial」 - 交易单据号
     */
    @Override
    public String getSerial() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.TYPE</code>. 「type」 - 交易单类型
     */
    @Override
    public FTransRecord setType(final String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.TYPE</code>. 「type」 - 交易单类型
     */
    @Override
    public String getType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.STATUS</code>. 「status」 - 交易状态
     */
    @Override
    public FTransRecord setStatus(final String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.STATUS</code>. 「status」 - 交易状态
     */
    @Override
    public String getStatus() {
        return (String) get(5);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.AMOUNT</code>. 「amount」——价税合计，所有明细对应的实际结算金额
     */
    @Override
    public FTransRecord setAmount(final BigDecimal value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.AMOUNT</code>. 「amount」——价税合计，所有明细对应的实际结算金额
     */
    @Override
    public BigDecimal getAmount() {
        return (BigDecimal) get(6);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.AMOUNT_PRE</code>. 「amountPre」预付金额
     */
    @Override
    public FTransRecord setAmountPre(final BigDecimal value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.AMOUNT_PRE</code>. 「amountPre」预付金额
     */
    @Override
    public BigDecimal getAmountPre() {
        return (BigDecimal) get(7);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.AMOUNT_GAP</code>. 「amountGap」——差价，根据
     * rounded 计算差价
     */
    @Override
    public FTransRecord setAmountGap(final BigDecimal value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.AMOUNT_GAP</code>. 「amountGap」——差价，根据
     * rounded 计算差价
     */
    @Override
    public BigDecimal getAmountGap() {
        return (BigDecimal) get(8);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.ROUNDED</code>. 「rounded」抹零方式，不同抹零方式会影响验证规则
     */
    @Override
    public FTransRecord setRounded(final String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.ROUNDED</code>. 「rounded」抹零方式，不同抹零方式会影响验证规则
     */
    @Override
    public String getRounded() {
        return (String) get(9);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.PREPAY</code>. 「prepay」- 是否预付
     */
    @Override
    public FTransRecord setPrepay(final Boolean value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.PREPAY</code>. 「prepay」- 是否预付
     */
    @Override
    public Boolean getPrepay() {
        return (Boolean) get(10);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.COMMENT</code>. 「comment」 - 备注
     */
    @Override
    public FTransRecord setComment(final String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.COMMENT</code>. 「comment」 - 备注
     */
    @Override
    public String getComment() {
        return (String) get(11);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.START_AT</code>. 「startAt」- 开始时间
     */
    @Override
    public FTransRecord setStartAt(final LocalDateTime value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.START_AT</code>. 「startAt」- 开始时间
     */
    @Override
    public LocalDateTime getStartAt() {
        return (LocalDateTime) get(12);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.END_AT</code>. 「endAt」- 结束时间
     */
    @Override
    public FTransRecord setEndAt(final LocalDateTime value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.END_AT</code>. 「endAt」- 结束时间
     */
    @Override
    public LocalDateTime getEndAt() {
        return (LocalDateTime) get(13);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.GROUP_BY</code>. 「groupBy」- 分组
     */
    @Override
    public FTransRecord setGroupBy(final String value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.GROUP_BY</code>. 「groupBy」- 分组
     */
    @Override
    public String getGroupBy() {
        return (String) get(14);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public FTransRecord setSigma(final String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(15);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public FTransRecord setLanguage(final String value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(16);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public FTransRecord setActive(final Boolean value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(17);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public FTransRecord setMetadata(final String value) {
        set(18, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(18);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public FTransRecord setCreatedAt(final LocalDateTime value) {
        set(19, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(19);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public FTransRecord setCreatedBy(final String value) {
        set(20, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(20);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public FTransRecord setUpdatedAt(final LocalDateTime value) {
        set(21, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(21);
    }

    /**
     * Setter for <code>ZDB.F_TRANS.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public FTransRecord setUpdatedBy(final String value) {
        set(22, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_TRANS.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(22);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(final IFTrans from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setSerial(from.getSerial());
        setType(from.getType());
        setStatus(from.getStatus());
        setAmount(from.getAmount());
        setAmountPre(from.getAmountPre());
        setAmountGap(from.getAmountGap());
        setRounded(from.getRounded());
        setPrepay(from.getPrepay());
        setComment(from.getComment());
        setStartAt(from.getStartAt());
        setEndAt(from.getEndAt());
        setGroupBy(from.getGroupBy());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IFTrans> E into(final E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FTransRecord
     */
    public FTransRecord() {
        super(FTrans.F_TRANS);
    }

    /**
     * Create a detached, initialised FTransRecord
     */
    public FTransRecord(final String key, final String name, final String code, final String serial, final String type, final String status, final BigDecimal amount, final BigDecimal amountPre, final BigDecimal amountGap, final String rounded, final Boolean prepay, final String comment, final LocalDateTime startAt, final LocalDateTime endAt, final String groupBy, final String sigma, final String language, final Boolean active, final String metadata, final LocalDateTime createdAt, final String createdBy, final LocalDateTime updatedAt, final String updatedBy) {
        super(FTrans.F_TRANS);

        setKey(key);
        setName(name);
        setCode(code);
        setSerial(serial);
        setType(type);
        setStatus(status);
        setAmount(amount);
        setAmountPre(amountPre);
        setAmountGap(amountGap);
        setRounded(rounded);
        setPrepay(prepay);
        setComment(comment);
        setStartAt(startAt);
        setEndAt(endAt);
        setGroupBy(groupBy);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised FTransRecord
     */
    public FTransRecord(final io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans value) {
        super(FTrans.F_TRANS);

        if (value != null) {
            setKey(value.getKey());
            setName(value.getName());
            setCode(value.getCode());
            setSerial(value.getSerial());
            setType(value.getType());
            setStatus(value.getStatus());
            setAmount(value.getAmount());
            setAmountPre(value.getAmountPre());
            setAmountGap(value.getAmountGap());
            setRounded(value.getRounded());
            setPrepay(value.getPrepay());
            setComment(value.getComment());
            setStartAt(value.getStartAt());
            setEndAt(value.getEndAt());
            setGroupBy(value.getGroupBy());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            resetChangedOnNotNull();
        }
    }

    public FTransRecord(final io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
