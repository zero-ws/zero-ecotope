/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.finance.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.commerce.finance.domain.tables.FSubject;
import io.zerows.extension.commerce.finance.domain.tables.records.FSubjectRecord;
import org.jooq.Configuration;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FSubjectDao extends AbstractVertxDAO<FSubjectRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject, String, Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>>, Future<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<FSubjectRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public FSubjectDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(FSubject.F_SUBJECT, io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject.class, new JDBCClassicQueryExecutor<FSubjectRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject, String>(configuration, io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByName(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.NAME.in(values));
    }

    /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByName(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.NAME.in(values), limit);
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyBySerial(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.SERIAL.in(values));
    }

    /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyBySerial(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.SERIAL.in(values), limit);
    }

    /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByCategory(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.CATEGORY.in(values));
    }

    /**
     * Find records that have <code>CATEGORY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByCategory(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.CATEGORY.in(values), limit);
    }

    /**
     * Find records that have <code>HELP_CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByHelpCode(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.HELP_CODE.in(values));
    }

    /**
     * Find records that have <code>HELP_CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByHelpCode(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.HELP_CODE.in(values), limit);
    }

    /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByComment(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.COMMENT.in(values));
    }

    /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByComment(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.COMMENT.in(values), limit);
    }

    /**
     * Find records that have <code>OWNER IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByOwner(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.OWNER.in(values));
    }

    /**
     * Find records that have <code>OWNER IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByOwner(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.OWNER.in(values), limit);
    }

    /**
     * Find records that have <code>COMPANY_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByCompanyId(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.COMPANY_ID.in(values));
    }

    /**
     * Find records that have <code>COMPANY_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByCompanyId(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.COMPANY_ID.in(values), limit);
    }

    /**
     * Find records that have <code>PARENT_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByParentId(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.PARENT_ID.in(values));
    }

    /**
     * Find records that have <code>PARENT_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByParentId(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.PARENT_ID.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(FSubject.F_SUBJECT.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(FSubject.F_SUBJECT.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(FSubject.F_SUBJECT.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(FSubject.F_SUBJECT.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(FSubject.F_SUBJECT.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<FSubjectRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<FSubjectRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject, String>) super.queryExecutor();
    }
}
