/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.finance.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.zerows.extension.commerce.finance.domain.tables.FTransOf;
import io.zerows.extension.commerce.finance.domain.tables.records.FTransOfRecord;

import java.util.Collection;

import org.jooq.Configuration;
import org.jooq.Record3;


import java.util.List;
import io.vertx.core.Future;
import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FTransOfDao extends AbstractVertxDAO<FTransOfRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf, Record3<String, String, String>, Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf>>, Future<io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf>, Future<Integer>, Future<Record3<String, String, String>>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<FTransOfRecord,io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf,Record3<String, String, String>> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public FTransOfDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(FTransOf.F_TRANS_OF, io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf.class, new JDBCClassicQueryExecutor<FTransOfRecord,io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf,Record3<String, String, String>>(configuration,io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf.class,vertx));
        }

        @Override
        protected Record3<String, String, String> getId(io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf object) {
                return compositeKeyRecord(object.getTransId(), object.getObjectType(), object.getObjectId());
        }

        /**
     * Find records that have <code>OBJECT_TYPE IN (values)</code>
     * asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf>> findManyByObjectType(Collection<String> values) {
                return findManyByCondition(FTransOf.F_TRANS_OF.OBJECT_TYPE.in(values));
        }

        /**
     * Find records that have <code>OBJECT_TYPE IN (values)</code>
     * asynchronously limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf>> findManyByObjectType(Collection<String> values, int limit) {
                return findManyByCondition(FTransOf.F_TRANS_OF.OBJECT_TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>OBJECT_ID IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf>> findManyByObjectId(Collection<String> values) {
                return findManyByCondition(FTransOf.F_TRANS_OF.OBJECT_ID.in(values));
        }

        /**
     * Find records that have <code>OBJECT_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf>> findManyByObjectId(Collection<String> values, int limit) {
                return findManyByCondition(FTransOf.F_TRANS_OF.OBJECT_ID.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf>> findManyByComment(Collection<String> values) {
                return findManyByCondition(FTransOf.F_TRANS_OF.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(FTransOf.F_TRANS_OF.COMMENT.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<FTransOfRecord,io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf,Record3<String, String, String>> queryExecutor(){
                return (JDBCClassicQueryExecutor<FTransOfRecord,io.zerows.extension.commerce.finance.domain.tables.pojos.FTransOf,Record3<String, String, String>>) super.queryExecutor();
        }
}
