/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.finance.domain.tables.daos;


import io.github.jklingsporn.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.commerce.finance.domain.tables.FTrans;
import io.zerows.extension.commerce.finance.domain.tables.records.FTransRecord;
import org.jooq.Configuration;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FTransDao extends AbstractVertxDAO<FTransRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans, String, Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>>, Future<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>, Future<Integer>, Future<String>> implements io.github.jklingsporn.vertx.jooq.classic.VertxDAO<FTransRecord,io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans,String> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public FTransDao(Configuration configuration, io.vertx.core.Vertx vertx) {
                super(FTrans.F_TRANS, io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans.class, new JDBCClassicQueryExecutor<FTransRecord,io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans,String>(configuration,io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans.class,vertx));
        }

        @Override
        protected String getId(io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans object) {
                return object.getKey();
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByName(Collection<String> values) {
                return findManyByCondition(FTrans.F_TRANS.NAME.in(values));
        }

        /**
     * Find records that have <code>NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByCode(Collection<String> values) {
                return findManyByCondition(FTrans.F_TRANS.CODE.in(values));
        }

        /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByCode(Collection<String> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.CODE.in(values),limit);
        }

        /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyBySerial(Collection<String> values) {
                return findManyByCondition(FTrans.F_TRANS.SERIAL.in(values));
        }

        /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyBySerial(Collection<String> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.SERIAL.in(values),limit);
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByType(Collection<String> values) {
                return findManyByCondition(FTrans.F_TRANS.TYPE.in(values));
        }

        /**
     * Find records that have <code>TYPE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByStatus(Collection<String> values) {
                return findManyByCondition(FTrans.F_TRANS.STATUS.in(values));
        }

        /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByStatus(Collection<String> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.STATUS.in(values),limit);
        }

        /**
     * Find records that have <code>AMOUNT IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByAmount(Collection<BigDecimal> values) {
                return findManyByCondition(FTrans.F_TRANS.AMOUNT.in(values));
        }

        /**
     * Find records that have <code>AMOUNT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByAmount(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.AMOUNT.in(values),limit);
        }

        /**
     * Find records that have <code>AMOUNT_PRE IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByAmountPre(Collection<BigDecimal> values) {
                return findManyByCondition(FTrans.F_TRANS.AMOUNT_PRE.in(values));
        }

        /**
     * Find records that have <code>AMOUNT_PRE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByAmountPre(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.AMOUNT_PRE.in(values),limit);
        }

        /**
     * Find records that have <code>AMOUNT_GAP IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByAmountGap(Collection<BigDecimal> values) {
                return findManyByCondition(FTrans.F_TRANS.AMOUNT_GAP.in(values));
        }

        /**
     * Find records that have <code>AMOUNT_GAP IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByAmountGap(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.AMOUNT_GAP.in(values),limit);
        }

        /**
     * Find records that have <code>ROUNDED IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByRounded(Collection<String> values) {
                return findManyByCondition(FTrans.F_TRANS.ROUNDED.in(values));
        }

        /**
     * Find records that have <code>ROUNDED IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByRounded(Collection<String> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.ROUNDED.in(values),limit);
        }

        /**
     * Find records that have <code>PREPAY IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByPrepay(Collection<Boolean> values) {
                return findManyByCondition(FTrans.F_TRANS.PREPAY.in(values));
        }

        /**
     * Find records that have <code>PREPAY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByPrepay(Collection<Boolean> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.PREPAY.in(values),limit);
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByComment(Collection<String> values) {
                return findManyByCondition(FTrans.F_TRANS.COMMENT.in(values));
        }

        /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByComment(Collection<String> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.COMMENT.in(values),limit);
        }

        /**
     * Find records that have <code>START_AT IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByStartAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FTrans.F_TRANS.START_AT.in(values));
        }

        /**
     * Find records that have <code>START_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByStartAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.START_AT.in(values),limit);
        }

        /**
     * Find records that have <code>END_AT IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByEndAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FTrans.F_TRANS.END_AT.in(values));
        }

        /**
     * Find records that have <code>END_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByEndAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.END_AT.in(values),limit);
        }

        /**
     * Find records that have <code>GROUP_BY IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByGroupBy(Collection<String> values) {
                return findManyByCondition(FTrans.F_TRANS.GROUP_BY.in(values));
        }

        /**
     * Find records that have <code>GROUP_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByGroupBy(Collection<String> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.GROUP_BY.in(values),limit);
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyBySigma(Collection<String> values) {
                return findManyByCondition(FTrans.F_TRANS.SIGMA.in(values));
        }

        /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyBySigma(Collection<String> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.SIGMA.in(values),limit);
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByLanguage(Collection<String> values) {
                return findManyByCondition(FTrans.F_TRANS.LANGUAGE.in(values));
        }

        /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByLanguage(Collection<String> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.LANGUAGE.in(values),limit);
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(FTrans.F_TRANS.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByMetadata(Collection<String> values) {
                return findManyByCondition(FTrans.F_TRANS.METADATA.in(values));
        }

        /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByMetadata(Collection<String> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.METADATA.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByCreatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FTrans.F_TRANS.CREATED_AT.in(values));
        }

        /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByCreatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.CREATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByCreatedBy(Collection<String> values) {
                return findManyByCondition(FTrans.F_TRANS.CREATED_BY.in(values));
        }

        /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByCreatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.CREATED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByUpdatedAt(Collection<LocalDateTime> values) {
                return findManyByCondition(FTrans.F_TRANS.UPDATED_AT.in(values));
        }

        /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByUpdatedAt(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.UPDATED_AT.in(values),limit);
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByUpdatedBy(Collection<String> values) {
                return findManyByCondition(FTrans.F_TRANS.UPDATED_BY.in(values));
        }

        /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans>> findManyByUpdatedBy(Collection<String> values, int limit) {
                return findManyByCondition(FTrans.F_TRANS.UPDATED_BY.in(values),limit);
        }

        @Override
        public JDBCClassicQueryExecutor<FTransRecord,io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans,String> queryExecutor(){
                return (JDBCClassicQueryExecutor<FTransRecord,io.zerows.extension.commerce.finance.domain.tables.pojos.FTrans,String>) super.queryExecutor();
        }
}
