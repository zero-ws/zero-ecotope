/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.finance.domain.tables;


import io.zerows.extension.commerce.finance.domain.Indexes;
import io.zerows.extension.commerce.finance.domain.Keys;
import io.zerows.extension.commerce.finance.domain.Zdb;
import io.zerows.extension.commerce.finance.domain.tables.records.FTransItemRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function21;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FTransItem extends TableImpl<FTransItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ZDB.F_TRANS_ITEM</code>
     */
    public static final FTransItem F_TRANS_ITEM = new FTransItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FTransItemRecord> getRecordType() {
        return FTransItemRecord.class;
    }

    /**
     * The column <code>ZDB.F_TRANS_ITEM.KEY</code>. 「key」- 收款明细账单主键ID
     */
    public final TableField<FTransItemRecord, String> KEY = createField(DSL.name("KEY"), SQLDataType.VARCHAR(36).nullable(false), this, "「key」- 收款明细账单主键ID");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.NAME</code>. 「name」 - 收款明细单标题
     */
    public final TableField<FTransItemRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "「name」 - 收款明细单标题");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.CODE</code>. 「code」 - 收款明细单编号
     */
    public final TableField<FTransItemRecord, String> CODE = createField(DSL.name("CODE"), SQLDataType.VARCHAR(255).nullable(false), this, "「code」 - 收款明细单编号");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.SERIAL</code>. 「serial」 - 收款明细单据号
     */
    public final TableField<FTransItemRecord, String> SERIAL = createField(DSL.name("SERIAL"), SQLDataType.VARCHAR(36).nullable(false), this, "「serial」 - 收款明细单据号");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.AMOUNT</code>.
     * 「amount」——价税合计，所有明细对应的实际结算金额
     */
    public final TableField<FTransItemRecord, BigDecimal> AMOUNT = createField(DSL.name("AMOUNT"), SQLDataType.DECIMAL(18, 2).nullable(false), this, "「amount」——价税合计，所有明细对应的实际结算金额");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.TRANSACTION_ID</code>.
     * 「transactionId」交易ID
     */
    public final TableField<FTransItemRecord, String> TRANSACTION_ID = createField(DSL.name("TRANSACTION_ID"), SQLDataType.VARCHAR(36), this, "「transactionId」交易ID");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.PAY_NAME</code>. 「payName」打款人姓名
     */
    public final TableField<FTransItemRecord, String> PAY_NAME = createField(DSL.name("PAY_NAME"), SQLDataType.VARCHAR(128), this, "「payName」打款人姓名");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.PAY_MOBILE</code>. 「payMobile」打款人电话
     */
    public final TableField<FTransItemRecord, String> PAY_MOBILE = createField(DSL.name("PAY_MOBILE"), SQLDataType.VARCHAR(128), this, "「payMobile」打款人电话");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.PAY_METHOD</code>. 「payMethod」付款方式
     */
    public final TableField<FTransItemRecord, String> PAY_METHOD = createField(DSL.name("PAY_METHOD"), SQLDataType.VARCHAR(255), this, "「payMethod」付款方式");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.PAY_ID</code>. 「payId」付款账号
     */
    public final TableField<FTransItemRecord, String> PAY_ID = createField(DSL.name("PAY_ID"), SQLDataType.VARCHAR(255), this, "「payId」付款账号");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.START_AT</code>. 「startAt」- 开始时间
     */
    public final TableField<FTransItemRecord, LocalDateTime> START_AT = createField(DSL.name("START_AT"), SQLDataType.LOCALDATETIME(0), this, "「startAt」- 开始时间");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.END_AT</code>. 「endAt」- 结束时间
     */
    public final TableField<FTransItemRecord, LocalDateTime> END_AT = createField(DSL.name("END_AT"), SQLDataType.LOCALDATETIME(0), this, "「endAt」- 结束时间");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.GROUP_BY</code>. 「groupBy」- 分组
     */
    public final TableField<FTransItemRecord, String> GROUP_BY = createField(DSL.name("GROUP_BY"), SQLDataType.VARCHAR(64), this, "「groupBy」- 分组");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.SIGMA</code>. 「sigma」- 统一标识
     */
    public final TableField<FTransItemRecord, String> SIGMA = createField(DSL.name("SIGMA"), SQLDataType.VARCHAR(32), this, "「sigma」- 统一标识");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.LANGUAGE</code>. 「language」- 使用的语言
     */
    public final TableField<FTransItemRecord, String> LANGUAGE = createField(DSL.name("LANGUAGE"), SQLDataType.VARCHAR(10), this, "「language」- 使用的语言");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.ACTIVE</code>. 「active」- 是否启用
     */
    public final TableField<FTransItemRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BIT, this, "「active」- 是否启用");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.METADATA</code>. 「metadata」- 附加配置数据
     */
    public final TableField<FTransItemRecord, String> METADATA = createField(DSL.name("METADATA"), SQLDataType.CLOB, this, "「metadata」- 附加配置数据");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    public final TableField<FTransItemRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「createdAt」- 创建时间");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.CREATED_BY</code>. 「createdBy」- 创建人
     */
    public final TableField<FTransItemRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(36), this, "「createdBy」- 创建人");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    public final TableField<FTransItemRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType.LOCALDATETIME(0), this, "「updatedAt」- 更新时间");

    /**
     * The column <code>ZDB.F_TRANS_ITEM.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    public final TableField<FTransItemRecord, String> UPDATED_BY = createField(DSL.name("UPDATED_BY"), SQLDataType.VARCHAR(36), this, "「updatedBy」- 更新人");

    private FTransItem(Name alias, Table<FTransItemRecord> aliased) {
        this(alias, aliased, null);
    }

    private FTransItem(Name alias, Table<FTransItemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ZDB.F_TRANS_ITEM</code> table reference
     */
    public FTransItem(String alias) {
        this(DSL.name(alias), F_TRANS_ITEM);
    }

    /**
     * Create an aliased <code>ZDB.F_TRANS_ITEM</code> table reference
     */
    public FTransItem(Name alias) {
        this(alias, F_TRANS_ITEM);
    }

    /**
     * Create a <code>ZDB.F_TRANS_ITEM</code> table reference
     */
    public FTransItem() {
        this(DSL.name("F_TRANS_ITEM"), null);
    }

    public <O extends Record> FTransItem(Table<O> child, ForeignKey<O, FTransItemRecord> key) {
        super(child, key, F_TRANS_ITEM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Zdb.ZDB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.F_TRANS_ITEM_IDX_F_PAYMENT_ITEM_PAYMENT_ID);
    }

    @Override
    public UniqueKey<FTransItemRecord> getPrimaryKey() {
        return Keys.KEY_F_TRANS_ITEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<FTransItemRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_F_TRANS_ITEM_CODE, Keys.KEY_F_TRANS_ITEM_SERIAL);
    }

    @Override
    public FTransItem as(String alias) {
        return new FTransItem(DSL.name(alias), this);
    }

    @Override
    public FTransItem as(Name alias) {
        return new FTransItem(alias, this);
    }

    @Override
    public FTransItem as(Table<?> alias) {
        return new FTransItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FTransItem rename(String name) {
        return new FTransItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FTransItem rename(Name name) {
        return new FTransItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FTransItem rename(Table<?> name) {
        return new FTransItem(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<String, String, String, String, BigDecimal, String, String, String, String, String, LocalDateTime, LocalDateTime, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function21<? super String, ? super String, ? super String, ? super String, ? super BigDecimal, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function21<? super String, ? super String, ? super String, ? super String, ? super BigDecimal, ? super String, ? super String, ? super String, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
