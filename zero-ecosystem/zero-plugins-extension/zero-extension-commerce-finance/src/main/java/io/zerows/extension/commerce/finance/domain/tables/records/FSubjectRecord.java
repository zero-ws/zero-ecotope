/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.finance.domain.tables.records;


import io.r2mo.vertx.jooq.shared.internal.VertxPojo;
import io.zerows.extension.commerce.finance.domain.tables.FSubject;
import io.zerows.extension.commerce.finance.domain.tables.interfaces.IFSubject;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record18;
import org.jooq.Row18;
import org.jooq.impl.UpdatableRecordImpl;

import java.time.LocalDateTime;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FSubjectRecord extends UpdatableRecordImpl<FSubjectRecord> implements VertxPojo, Record18<String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String>, IFSubject {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ZDB.F_SUBJECT.KEY</code>. 「key」- 会计科目ID
     */
    @Override
    public FSubjectRecord setKey(final String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.KEY</code>. 「key」- 会计科目ID
     */
    @Override
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.NAME</code>. 「name」 -  会计科目名称
     */
    @Override
    public FSubjectRecord setName(final String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.NAME</code>. 「name」 -  会计科目名称
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.CODE</code>. 「code」 - 会计科目系统编号
     */
    @Override
    public FSubjectRecord setCode(final String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.CODE</code>. 「code」 - 会计科目系统编号
     */
    @Override
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.SERIAL</code>. 「serial」 - 会计科目编号
     */
    @Override
    public FSubjectRecord setSerial(final String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.SERIAL</code>. 「serial」 - 会计科目编号
     */
    @Override
    public String getSerial() {
        return (String) get(3);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.CATEGORY</code>. 「category」 -
     * 会计科目关联类别，直接对接类型树
     */
    @Override
    public FSubjectRecord setCategory(final String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.CATEGORY</code>. 「category」 -
     * 会计科目关联类别，直接对接类型树
     */
    @Override
    public String getCategory() {
        return (String) get(4);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.HELP_CODE</code>. 「helpCode」- 会计科目助记码
     */
    @Override
    public FSubjectRecord setHelpCode(final String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.HELP_CODE</code>. 「helpCode」- 会计科目助记码
     */
    @Override
    public String getHelpCode() {
        return (String) get(5);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.COMMENT</code>. 「comment」 - 会计科目备注
     */
    @Override
    public FSubjectRecord setComment(final String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.COMMENT</code>. 「comment」 - 会计科目备注
     */
    @Override
    public String getComment() {
        return (String) get(6);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.OWNER</code>. 「owner」- 科目方向：OUT-借方 / IN-贷方
     */
    @Override
    public FSubjectRecord setOwner(final String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.OWNER</code>. 「owner」- 科目方向：OUT-借方 / IN-贷方
     */
    @Override
    public String getOwner() {
        return (String) get(7);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.COMPANY_ID</code>. 「companyId」- 会计科目所属公司
     */
    @Override
    public FSubjectRecord setCompanyId(final String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.COMPANY_ID</code>. 「companyId」- 会计科目所属公司
     */
    @Override
    public String getCompanyId() {
        return (String) get(8);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.PARENT_ID</code>. 「parentId」- 会计科目父科目
     */
    @Override
    public FSubjectRecord setParentId(final String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.PARENT_ID</code>. 「parentId」- 会计科目父科目
     */
    @Override
    public String getParentId() {
        return (String) get(9);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public FSubjectRecord setSigma(final String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.SIGMA</code>. 「sigma」- 统一标识
     */
    @Override
    public String getSigma() {
        return (String) get(10);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public FSubjectRecord setLanguage(final String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.LANGUAGE</code>. 「language」- 使用的语言
     */
    @Override
    public String getLanguage() {
        return (String) get(11);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public FSubjectRecord setActive(final Boolean value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.ACTIVE</code>. 「active」- 是否启用
     */
    @Override
    public Boolean getActive() {
        return (Boolean) get(12);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public FSubjectRecord setMetadata(final String value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.METADATA</code>. 「metadata」- 附加配置数据
     */
    @Override
    public String getMetadata() {
        return (String) get(13);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public FSubjectRecord setCreatedAt(final LocalDateTime value) {
        set(14, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.CREATED_AT</code>. 「createdAt」- 创建时间
     */
    @Override
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(14);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public FSubjectRecord setCreatedBy(final String value) {
        set(15, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.CREATED_BY</code>. 「createdBy」- 创建人
     */
    @Override
    public String getCreatedBy() {
        return (String) get(15);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public FSubjectRecord setUpdatedAt(final LocalDateTime value) {
        set(16, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.UPDATED_AT</code>. 「updatedAt」- 更新时间
     */
    @Override
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(16);
    }

    /**
     * Setter for <code>ZDB.F_SUBJECT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public FSubjectRecord setUpdatedBy(final String value) {
        set(17, value);
        return this;
    }

    /**
     * Getter for <code>ZDB.F_SUBJECT.UPDATED_BY</code>. 「updatedBy」- 更新人
     */
    @Override
    public String getUpdatedBy() {
        return (String) get(17);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record18 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row18<String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> fieldsRow() {
        return (Row18) super.fieldsRow();
    }

    @Override
    public Row18<String, String, String, String, String, String, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, String> valuesRow() {
        return (Row18) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return FSubject.F_SUBJECT.KEY;
    }

    @Override
    public Field<String> field2() {
        return FSubject.F_SUBJECT.NAME;
    }

    @Override
    public Field<String> field3() {
        return FSubject.F_SUBJECT.CODE;
    }

    @Override
    public Field<String> field4() {
        return FSubject.F_SUBJECT.SERIAL;
    }

    @Override
    public Field<String> field5() {
        return FSubject.F_SUBJECT.CATEGORY;
    }

    @Override
    public Field<String> field6() {
        return FSubject.F_SUBJECT.HELP_CODE;
    }

    @Override
    public Field<String> field7() {
        return FSubject.F_SUBJECT.COMMENT;
    }

    @Override
    public Field<String> field8() {
        return FSubject.F_SUBJECT.OWNER;
    }

    @Override
    public Field<String> field9() {
        return FSubject.F_SUBJECT.COMPANY_ID;
    }

    @Override
    public Field<String> field10() {
        return FSubject.F_SUBJECT.PARENT_ID;
    }

    @Override
    public Field<String> field11() {
        return FSubject.F_SUBJECT.SIGMA;
    }

    @Override
    public Field<String> field12() {
        return FSubject.F_SUBJECT.LANGUAGE;
    }

    @Override
    public Field<Boolean> field13() {
        return FSubject.F_SUBJECT.ACTIVE;
    }

    @Override
    public Field<String> field14() {
        return FSubject.F_SUBJECT.METADATA;
    }

    @Override
    public Field<LocalDateTime> field15() {
        return FSubject.F_SUBJECT.CREATED_AT;
    }

    @Override
    public Field<String> field16() {
        return FSubject.F_SUBJECT.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field17() {
        return FSubject.F_SUBJECT.UPDATED_AT;
    }

    @Override
    public Field<String> field18() {
        return FSubject.F_SUBJECT.UPDATED_BY;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getCode();
    }

    @Override
    public String component4() {
        return getSerial();
    }

    @Override
    public String component5() {
        return getCategory();
    }

    @Override
    public String component6() {
        return getHelpCode();
    }

    @Override
    public String component7() {
        return getComment();
    }

    @Override
    public String component8() {
        return getOwner();
    }

    @Override
    public String component9() {
        return getCompanyId();
    }

    @Override
    public String component10() {
        return getParentId();
    }

    @Override
    public String component11() {
        return getSigma();
    }

    @Override
    public String component12() {
        return getLanguage();
    }

    @Override
    public Boolean component13() {
        return getActive();
    }

    @Override
    public String component14() {
        return getMetadata();
    }

    @Override
    public LocalDateTime component15() {
        return getCreatedAt();
    }

    @Override
    public String component16() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component17() {
        return getUpdatedAt();
    }

    @Override
    public String component18() {
        return getUpdatedBy();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getCode();
    }

    @Override
    public String value4() {
        return getSerial();
    }

    @Override
    public String value5() {
        return getCategory();
    }

    @Override
    public String value6() {
        return getHelpCode();
    }

    @Override
    public String value7() {
        return getComment();
    }

    @Override
    public String value8() {
        return getOwner();
    }

    @Override
    public String value9() {
        return getCompanyId();
    }

    @Override
    public String value10() {
        return getParentId();
    }

    @Override
    public String value11() {
        return getSigma();
    }

    @Override
    public String value12() {
        return getLanguage();
    }

    @Override
    public Boolean value13() {
        return getActive();
    }

    @Override
    public String value14() {
        return getMetadata();
    }

    @Override
    public LocalDateTime value15() {
        return getCreatedAt();
    }

    @Override
    public String value16() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value17() {
        return getUpdatedAt();
    }

    @Override
    public String value18() {
        return getUpdatedBy();
    }

    @Override
    public FSubjectRecord value1(final String value) {
        setKey(value);
        return this;
    }

    @Override
    public FSubjectRecord value2(final String value) {
        setName(value);
        return this;
    }

    @Override
    public FSubjectRecord value3(final String value) {
        setCode(value);
        return this;
    }

    @Override
    public FSubjectRecord value4(final String value) {
        setSerial(value);
        return this;
    }

    @Override
    public FSubjectRecord value5(final String value) {
        setCategory(value);
        return this;
    }

    @Override
    public FSubjectRecord value6(final String value) {
        setHelpCode(value);
        return this;
    }

    @Override
    public FSubjectRecord value7(final String value) {
        setComment(value);
        return this;
    }

    @Override
    public FSubjectRecord value8(final String value) {
        setOwner(value);
        return this;
    }

    @Override
    public FSubjectRecord value9(final String value) {
        setCompanyId(value);
        return this;
    }

    @Override
    public FSubjectRecord value10(final String value) {
        setParentId(value);
        return this;
    }

    @Override
    public FSubjectRecord value11(final String value) {
        setSigma(value);
        return this;
    }

    @Override
    public FSubjectRecord value12(final String value) {
        setLanguage(value);
        return this;
    }

    @Override
    public FSubjectRecord value13(final Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public FSubjectRecord value14(final String value) {
        setMetadata(value);
        return this;
    }

    @Override
    public FSubjectRecord value15(final LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public FSubjectRecord value16(final String value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public FSubjectRecord value17(final LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public FSubjectRecord value18(final String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public FSubjectRecord values(final String value1, final String value2, final String value3, final String value4, final String value5, final String value6, final String value7, final String value8, final String value9, final String value10, final String value11, final String value12, final Boolean value13, final String value14, final LocalDateTime value15, final String value16, final LocalDateTime value17, final String value18) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        value17(value17);
        value18(value18);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(final IFSubject from) {
        setKey(from.getKey());
        setName(from.getName());
        setCode(from.getCode());
        setSerial(from.getSerial());
        setCategory(from.getCategory());
        setHelpCode(from.getHelpCode());
        setComment(from.getComment());
        setOwner(from.getOwner());
        setCompanyId(from.getCompanyId());
        setParentId(from.getParentId());
        setSigma(from.getSigma());
        setLanguage(from.getLanguage());
        setActive(from.getActive());
        setMetadata(from.getMetadata());
        setCreatedAt(from.getCreatedAt());
        setCreatedBy(from.getCreatedBy());
        setUpdatedAt(from.getUpdatedAt());
        setUpdatedBy(from.getUpdatedBy());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IFSubject> E into(final E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FSubjectRecord
     */
    public FSubjectRecord() {
        super(FSubject.F_SUBJECT);
    }

    /**
     * Create a detached, initialised FSubjectRecord
     */
    public FSubjectRecord(final String key, final String name, final String code, final String serial, final String category, final String helpCode, final String comment, final String owner, final String companyId, final String parentId, final String sigma, final String language, final Boolean active, final String metadata, final LocalDateTime createdAt, final String createdBy, final LocalDateTime updatedAt, final String updatedBy) {
        super(FSubject.F_SUBJECT);

        setKey(key);
        setName(name);
        setCode(code);
        setSerial(serial);
        setCategory(category);
        setHelpCode(helpCode);
        setComment(comment);
        setOwner(owner);
        setCompanyId(companyId);
        setParentId(parentId);
        setSigma(sigma);
        setLanguage(language);
        setActive(active);
        setMetadata(metadata);
        setCreatedAt(createdAt);
        setCreatedBy(createdBy);
        setUpdatedAt(updatedAt);
        setUpdatedBy(updatedBy);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised FSubjectRecord
     */
    public FSubjectRecord(final io.zerows.extension.commerce.finance.domain.tables.pojos.FSubject value) {
        super(FSubject.F_SUBJECT);

        if (value != null) {
            setKey(value.getKey());
            setName(value.getName());
            setCode(value.getCode());
            setSerial(value.getSerial());
            setCategory(value.getCategory());
            setHelpCode(value.getHelpCode());
            setComment(value.getComment());
            setOwner(value.getOwner());
            setCompanyId(value.getCompanyId());
            setParentId(value.getParentId());
            setSigma(value.getSigma());
            setLanguage(value.getLanguage());
            setActive(value.getActive());
            setMetadata(value.getMetadata());
            setCreatedAt(value.getCreatedAt());
            setCreatedBy(value.getCreatedBy());
            setUpdatedAt(value.getUpdatedAt());
            setUpdatedBy(value.getUpdatedBy());
            resetChangedOnNotNull();
        }
    }

    public FSubjectRecord(final io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }
}
