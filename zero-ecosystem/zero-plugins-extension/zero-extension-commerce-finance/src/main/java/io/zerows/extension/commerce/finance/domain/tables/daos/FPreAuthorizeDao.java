/*
 * This file is generated by jOOQ.
 */
package io.zerows.extension.commerce.finance.domain.tables.daos;


import io.r2mo.vertx.jooq.classic.jdbc.JDBCClassicQueryExecutor;
import io.r2mo.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.vertx.core.Future;
import io.zerows.extension.commerce.finance.domain.tables.FPreAuthorize;
import io.zerows.extension.commerce.finance.domain.tables.records.FPreAuthorizeRecord;
import org.jooq.Configuration;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class FPreAuthorizeDao extends AbstractVertxDAO<FPreAuthorizeRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize, String, Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>>, Future<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>, Future<Integer>, Future<String>> implements io.r2mo.vertx.jooq.classic.VertxDAO<FPreAuthorizeRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize, String> {

    /**
     * @param configuration The Configuration used for rendering and query
     *                      execution.
     * @param vertx         the vertx instance
     */
    public FPreAuthorizeDao(final Configuration configuration, final io.vertx.core.Vertx vertx) {
        super(FPreAuthorize.F_PRE_AUTHORIZE, io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize.class, new JDBCClassicQueryExecutor<FPreAuthorizeRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize, String>(configuration, io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize.class, vertx));
    }

    @Override
    protected String getId(final io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize object) {
        return object.getKey();
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByCode(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.CODE.in(values));
    }

    /**
     * Find records that have <code>CODE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByCode(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.CODE.in(values), limit);
    }

    /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyBySerial(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.SERIAL.in(values));
    }

    /**
     * Find records that have <code>SERIAL IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyBySerial(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.SERIAL.in(values), limit);
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByStatus(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.STATUS.in(values));
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByStatus(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.STATUS.in(values), limit);
    }

    /**
     * Find records that have <code>AMOUNT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByAmount(final Collection<BigDecimal> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.AMOUNT.in(values));
    }

    /**
     * Find records that have <code>AMOUNT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByAmount(final Collection<BigDecimal> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.AMOUNT.in(values), limit);
    }

    /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByComment(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.COMMENT.in(values));
    }

    /**
     * Find records that have <code>COMMENT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByComment(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.COMMENT.in(values), limit);
    }

    /**
     * Find records that have <code>EXPIRED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByExpiredAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.EXPIRED_AT.in(values));
    }

    /**
     * Find records that have <code>EXPIRED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByExpiredAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.EXPIRED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>BANK_NAME IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByBankName(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.BANK_NAME.in(values));
    }

    /**
     * Find records that have <code>BANK_NAME IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByBankName(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.BANK_NAME.in(values), limit);
    }

    /**
     * Find records that have <code>BANK_CARD IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByBankCard(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.BANK_CARD.in(values));
    }

    /**
     * Find records that have <code>BANK_CARD IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByBankCard(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.BANK_CARD.in(values), limit);
    }

    /**
     * Find records that have <code>ORDER_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByOrderId(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.ORDER_ID.in(values));
    }

    /**
     * Find records that have <code>ORDER_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByOrderId(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.ORDER_ID.in(values), limit);
    }

    /**
     * Find records that have <code>BILL_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByBillId(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.BILL_ID.in(values));
    }

    /**
     * Find records that have <code>BILL_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByBillId(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.BILL_ID.in(values), limit);
    }

    /**
     * Find records that have <code>BOOK_ID IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByBookId(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.BOOK_ID.in(values));
    }

    /**
     * Find records that have <code>BOOK_ID IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByBookId(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.BOOK_ID.in(values), limit);
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyBySigma(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.SIGMA.in(values));
    }

    /**
     * Find records that have <code>SIGMA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyBySigma(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.SIGMA.in(values), limit);
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByLanguage(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.LANGUAGE.in(values));
    }

    /**
     * Find records that have <code>LANGUAGE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByLanguage(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.LANGUAGE.in(values), limit);
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByActive(final Collection<Boolean> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.ACTIVE.in(values));
    }

    /**
     * Find records that have <code>ACTIVE IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByActive(final Collection<Boolean> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.ACTIVE.in(values), limit);
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByMetadata(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.METADATA.in(values));
    }

    /**
     * Find records that have <code>METADATA IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByMetadata(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.METADATA.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByCreatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.CREATED_AT.in(values));
    }

    /**
     * Find records that have <code>CREATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByCreatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.CREATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByCreatedBy(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.CREATED_BY.in(values));
    }

    /**
     * Find records that have <code>CREATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByCreatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.CREATED_BY.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByUpdatedAt(final Collection<LocalDateTime> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.UPDATED_AT.in(values));
    }

    /**
     * Find records that have <code>UPDATED_AT IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByUpdatedAt(final Collection<LocalDateTime> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.UPDATED_AT.in(values), limit);
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByUpdatedBy(final Collection<String> values) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.UPDATED_BY.in(values));
    }

    /**
     * Find records that have <code>UPDATED_BY IN (values)</code> asynchronously
     * limited by the given limit
     */
    public Future<List<io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize>> findManyByUpdatedBy(final Collection<String> values, final int limit) {
        return findManyByCondition(FPreAuthorize.F_PRE_AUTHORIZE.UPDATED_BY.in(values), limit);
    }

    @Override
    public JDBCClassicQueryExecutor<FPreAuthorizeRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize, String> queryExecutor() {
        return (JDBCClassicQueryExecutor<FPreAuthorizeRecord, io.zerows.extension.commerce.finance.domain.tables.pojos.FPreAuthorize, String>) super.queryExecutor();
    }
}
